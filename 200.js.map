{"version":3,"file":"200.js","mappings":"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","sources":["webpack://geoview-core/../../common/temp/node_modules/.pnpm/mgrs@1.0.0/node_modules/mgrs/mgrs.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/Point.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/Proj.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/adjust_axis.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/checkSanity.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/adjust_lat.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/adjust_lon.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/adjust_zone.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/asinhy.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/asinz.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/clens.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/clens_cmplx.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/cosh.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/e0fn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/e1fn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/e2fn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/e3fn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/gN.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/gatg.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/hypot.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/imlfn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/iqsfnz.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/log1py.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/mlfn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/msfnz.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/phi2z.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/pj_enfn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/pj_inv_mlfn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/pj_mlfn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/qsfnz.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/sign.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/sinh.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/srat.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/toPoint.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/tsfnz.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/constants/Datum.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/constants/Ellipsoid.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/constants/PrimeMeridian.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/constants/units.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/constants/values.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/core.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/datum.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/datumUtils.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/datum_transform.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/defs.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/deriveConstants.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/extend.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/global.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/index.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/match.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/nadgrid.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/parseCode.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projString.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/aea.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/aeqd.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/bonne.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/cass.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/cea.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/eqc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/eqdc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/eqearth.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/etmerc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/gauss.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/geocent.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/geos.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/gnom.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/krovak.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/laea.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/lcc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/longlat.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/merc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/mill.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/moll.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/nzmg.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/omerc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/ortho.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/poly.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/qsc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/robin.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/sinu.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/somerc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/stere.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/sterea.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/tmerc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/tpers.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/utm.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/vandg.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/transform.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/projs.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/wkt-parser@1.4.0/node_modules/wkt-parser/index.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/wkt-parser@1.4.0/node_modules/wkt-parser/parser.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/wkt-parser@1.4.0/node_modules/wkt-parser/process.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@babel+runtime@7.26.0/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@babel+runtime@7.26.0/node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@babel+runtime@7.26.0/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@babel+runtime@7.26.0/node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@babel+runtime@7.26.0/node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/comlink@4.4.2/node_modules/comlink/dist/esm/comlink.mjs","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/coordinate.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/extent.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/math.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/epsg3857.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/epsg4326.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/utm.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/Projection.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/Units.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/proj4.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/projections.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/transforms.js"],"sourcesContent":["\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n","import {toPoint, forward} from 'mgrs';\n\nfunction Point(x, y, z) {\n  if (!(this instanceof Point)) {\n    return new Point(x, y, z);\n  }\n  if (Array.isArray(x)) {\n    this.x = x[0];\n    this.y = x[1];\n    this.z = x[2] || 0.0;\n  } else if(typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n    this.z = x.z || 0.0;\n  } else if (typeof x === 'string' && typeof y === 'undefined') {\n    var coords = x.split(',');\n    this.x = parseFloat(coords[0], 10);\n    this.y = parseFloat(coords[1], 10);\n    this.z = parseFloat(coords[2], 10) || 0.0;\n  } else {\n    this.x = x;\n    this.y = y;\n    this.z = z || 0.0;\n  }\n  console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\n}\n\nPoint.fromMGRS = function(mgrsStr) {\n  return new Point(toPoint(mgrsStr));\n};\nPoint.prototype.toMGRS = function(accuracy) {\n  return forward([this.x, this.y], accuracy);\n};\nexport default Point;\n","import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport {sphere as dc_sphere, eccentricity as dc_eccentricity} from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\nimport {getNadgrids} from \"./nadgrid\";\n\nfunction Projection(srsCode,callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function(error){\n    if(error){\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if(typeof json !== 'object'){\n    callback('Could not parse to valid json: ' + srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if(!ourProj){\n    callback('Could not get projection name from: ' + srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n    if (datumDef) {\n      json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(',') : null);\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  json.lat1 = json.lat1 || json.lat0; // Lambert_Conformal_Conic_1SP, for example, needs this\n\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var nadgrids = getNadgrids(json.nadgrids);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2,\n    nadgrids);\n\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calculated in deriveConstants.sphere\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n\n}\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;\n","export default function(crs, denorm, point) {\n  var xin = point.x,\n    yin = point.y,\n    zin = point.z || 0.0;\n  var v, t, i;\n  var out = {};\n  for (i = 0; i < 3; i++) {\n    if (denorm && i === 2 && point.z === undefined) {\n      continue;\n    }\n    if (i === 0) {\n      v = xin;\n      if (\"ew\".indexOf(crs.axis[i]) !== -1) {\n        t = 'x';\n      } else {\n        t = 'y';\n      }\n\n    }\n    else if (i === 1) {\n      v = yin;\n      if (\"ns\".indexOf(crs.axis[i]) !== -1) {\n        t = 'y';\n      } else {\n        t = 'x';\n      }\n    }\n    else {\n      v = zin;\n      t = 'z';\n    }\n    switch (crs.axis[i]) {\n    case 'e':\n      out[t] = v;\n      break;\n    case 'w':\n      out[t] = -v;\n      break;\n    case 'n':\n      out[t] = v;\n      break;\n    case 's':\n      out[t] = -v;\n      break;\n    case 'u':\n      if (point[t] !== undefined) {\n        out.z = v;\n      }\n      break;\n    case 'd':\n      if (point[t] !== undefined) {\n        out.z = -v;\n      }\n      break;\n    default:\n      //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n      return null;\n    }\n  }\n  return out;\n}\n","export default function (point) {\n  checkCoord(point.x);\n  checkCoord(point.y);\n}\nfunction checkCoord(num) {\n  if (typeof Number.isFinite === 'function') {\n    if (Number.isFinite(num)) {\n      return;\n    }\n    throw new TypeError('coordinates must be finite numbers');\n  }\n  if (typeof num !== 'number' || num !== num || !isFinite(num)) {\n    throw new TypeError('coordinates must be finite numbers');\n  }\n}\n","import {HALF_PI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\n}\n","\nimport {TWO_PI, SPI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n}\n","import adjust_lon from './adjust_lon';\n\nexport default function(zone, lon) {\n  if (zone === undefined) {\n    zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\n\n    if (zone < 0) {\n      return 0;\n    } else if (zone > 60) {\n      return 60;\n    }\n  }\n  return zone;\n}\n","import hypot from './hypot';\nimport log1py from './log1py';\n\nexport default function(x) {\n  var y = Math.abs(x);\n  y = log1py(y * (1 + y / (hypot(1, y) + 1)));\n\n  return x < 0 ? -y : y;\n}\n","export default function(x) {\n  if (Math.abs(x) > 1) {\n    x = (x > 1) ? 1 : -1;\n  }\n  return Math.asin(x);\n}","export default function(pp, arg_r) {\n  var r = 2 * Math.cos(arg_r);\n  var i = pp.length - 1;\n  var hr1 = pp[i];\n  var hr2 = 0;\n  var hr;\n\n  while (--i >= 0) {\n    hr = -hr2 + r * hr1 + pp[i];\n    hr2 = hr1;\n    hr1 = hr;\n  }\n\n  return Math.sin(arg_r) * hr;\n}\n","import sinh from './sinh';\nimport cosh from './cosh';\n\nexport default function(pp, arg_r, arg_i) {\n  var sin_arg_r = Math.sin(arg_r);\n  var cos_arg_r = Math.cos(arg_r);\n  var sinh_arg_i = sinh(arg_i);\n  var cosh_arg_i = cosh(arg_i);\n  var r = 2 * cos_arg_r * cosh_arg_i;\n  var i = -2 * sin_arg_r * sinh_arg_i;\n  var j = pp.length - 1;\n  var hr = pp[j];\n  var hi1 = 0;\n  var hr1 = 0;\n  var hi = 0;\n  var hr2;\n  var hi2;\n\n  while (--j >= 0) {\n    hr2 = hr1;\n    hi2 = hi1;\n    hr1 = hr;\n    hi1 = hi;\n    hr = -hr2 + r * hr1 - i * hi1 + pp[j];\n    hi = -hi2 + i * hr1 + r * hi1;\n  }\n\n  r = sin_arg_r * cosh_arg_i;\n  i = cos_arg_r * sinh_arg_i;\n\n  return [r * hr - i * hi, r * hi + i * hr];\n}\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r + 1 / r) / 2;\n  return r;\n}","export default function(x) {\n  return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\n}","export default function(x) {\n  return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\n}","export default function(x) {\n  return (0.05859375 * x * x * (1 + 0.75 * x));\n}","export default function(x) {\n  return (x * x * x * (35 / 3072));\n}","export default function(a, e, sinphi) {\n  var temp = e * sinphi;\n  return a / Math.sqrt(1 - temp * temp);\n}","export default function(pp, B) {\n  var cos_2B = 2 * Math.cos(2 * B);\n  var i = pp.length - 1;\n  var h1 = pp[i];\n  var h2 = 0;\n  var h;\n\n  while (--i >= 0) {\n    h = -h2 + cos_2B * h1 + pp[i];\n    h2 = h1;\n    h1 = h;\n  }\n\n  return (B + h * Math.sin(2 * B));\n}\n","export default function(x, y) {\n  x = Math.abs(x);\n  y = Math.abs(y);\n  var a = Math.max(x, y);\n  var b = Math.min(x, y) / (a ? a : 1);\n\n  return a * Math.sqrt(1 + Math.pow(b, 2));\n}\n","export default function(ml, e0, e1, e2, e3) {\n  var phi;\n  var dphi;\n\n  phi = ml / e0;\n  for (var i = 0; i < 15; i++) {\n    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n  return NaN;\n}","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, q) {\n  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n  if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n    if (q < 0) {\n      return (-1 * HALF_PI);\n    }\n    else {\n      return HALF_PI;\n    }\n  }\n  //var phi = 0.5* q/(1-eccent*eccent);\n  var phi = Math.asin(0.5 * q);\n  var dphi;\n  var sin_phi;\n  var cos_phi;\n  var con;\n  for (var i = 0; i < 30; i++) {\n    sin_phi = Math.sin(phi);\n    cos_phi = Math.cos(phi);\n    con = eccent * sin_phi;\n    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n  return NaN;\n}\n","export default function(x) {\n  var y = 1 + x;\n  var z = y - 1;\n\n  return z === 0 ? x : x * Math.log(y) / z;\n}\n","export default function(e0, e1, e2, e3, phi) {\n  return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\n}","export default function(eccent, sinphi, cosphi) {\n  var con = eccent * sinphi;\n  return cosphi / (Math.sqrt(1 - con * con));\n}","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, ts) {\n  var eccnth = 0.5 * eccent;\n  var con, dphi;\n  var phi = HALF_PI - 2 * Math.atan(ts);\n  for (var i = 0; i <= 15; i++) {\n    con = eccent * Math.sin(phi);\n    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n  //console.log(\"phi2z has NoConvergence\");\n  return -9999;\n}\n","var C00 = 1;\nvar C02 = 0.25;\nvar C04 = 0.046875;\nvar C06 = 0.01953125;\nvar C08 = 0.01068115234375;\nvar C22 = 0.75;\nvar C44 = 0.46875;\nvar C46 = 0.01302083333333333333;\nvar C48 = 0.00712076822916666666;\nvar C66 = 0.36458333333333333333;\nvar C68 = 0.00569661458333333333;\nvar C88 = 0.3076171875;\n\nexport default function(es) {\n  var en = [];\n  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n  var t = es * es;\n  en[2] = t * (C44 - es * (C46 + es * C48));\n  t *= es;\n  en[3] = t * (C66 - es * C68);\n  en[4] = t * es * C88;\n  return en;\n}","import pj_mlfn from \"./pj_mlfn\";\nimport {EPSLN} from '../constants/values';\n\nvar MAX_ITER = 20;\n\nexport default function(arg, es, en) {\n  var k = 1 / (1 - es);\n  var phi = arg;\n  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n    var s = Math.sin(phi);\n    var t = 1 - es * s * s;\n    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n    //phi -= t * (t * Math.sqrt(t)) * k;\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n    phi -= t;\n    if (Math.abs(t) < EPSLN) {\n      return phi;\n    }\n  }\n  //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n  return phi;\n}\n","export default function(phi, sphi, cphi, en) {\n  cphi *= sphi;\n  sphi *= sphi;\n  return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\n}","export default function(eccent, sinphi) {\n  var con;\n  if (eccent > 1.0e-7) {\n    con = eccent * sinphi;\n    return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\n  }\n  else {\n    return (2 * sinphi);\n  }\n}","export default function(x) {\n  return x<0 ? -1 : 1;\n}","export default function(x) {\n  var r = Math.exp(x);\n  r = (r - 1 / r) / 2;\n  return r;\n}","export default function(esinp, exp) {\n  return (Math.pow((1 - esinp) / (1 + esinp), exp));\n}","export default function (array){\n  var out = {\n    x: array[0],\n    y: array[1]\n  };\n  if (array.length>2) {\n    out.z = array[2];\n  }\n  if (array.length>3) {\n    out.m = array[3];\n  }\n  return out;\n}","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, phi, sinphi) {\n  var con = eccent * sinphi;\n  var com = 0.5 * eccent;\n  con = Math.pow(((1 - con) / (1 + con)), com);\n  return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n}\n","var datums = {\n  wgs84: {\n    towgs84: \"0,0,0\",\n    ellipse: \"WGS84\",\n    datumName: \"WGS84\"\n  },\n  ch1903: {\n    towgs84: \"674.374,15.056,405.346\",\n    ellipse: \"bessel\",\n    datumName: \"swiss\"\n  },\n  ggrs87: {\n    towgs84: \"-199.87,74.79,246.62\",\n    ellipse: \"GRS80\",\n    datumName: \"Greek_Geodetic_Reference_System_1987\"\n  },\n  nad83: {\n    towgs84: \"0,0,0\",\n    ellipse: \"GRS80\",\n    datumName: \"North_American_Datum_1983\"\n  },\n  nad27: {\n    nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n    ellipse: \"clrk66\",\n    datumName: \"North_American_Datum_1927\"\n  },\n  potsdam: {\n    towgs84: \"598.1,73.7,418.2,0.202,0.045,-2.455,6.7\",\n    ellipse: \"bessel\",\n    datumName: \"Potsdam Rauenberg 1950 DHDN\"\n  },\n  carthage: {\n    towgs84: \"-263.0,6.0,431.0\",\n    ellipse: \"clark80\",\n    datumName: \"Carthage 1934 Tunisia\"\n  },\n  hermannskogel: {\n    towgs84: \"577.326,90.129,463.919,5.137,1.474,5.297,2.4232\",\n    ellipse: \"bessel\",\n    datumName: \"Hermannskogel\"\n  },\n  mgi: {\n    towgs84: \"577.326,90.129,463.919,5.137,1.474,5.297,2.4232\",\n    ellipse: \"bessel\",\n    datumName: \"Militar-Geographische Institut\",\n  },\n  osni52: {\n    towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n    ellipse: \"airy\",\n    datumName: \"Irish National\"\n  },\n  ire65: {\n    towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n    ellipse: \"mod_airy\",\n    datumName: \"Ireland 1965\"\n  },\n  rassadiran: {\n    towgs84: \"-133.63,-157.5,-158.62\",\n    ellipse: \"intl\",\n    datumName: \"Rassadiran\"\n  },\n  nzgd49: {\n    towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n    ellipse: \"intl\",\n    datumName: \"New Zealand Geodetic Datum 1949\"\n  },\n  osgb36: {\n    towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n    ellipse: \"airy\",\n    datumName: \"Ordnance Survey of Great Britain 1936\"\n  },\n  s_jtsk: {\n    towgs84: \"589,76,480\",\n    ellipse: 'bessel',\n    datumName: 'S-JTSK (Ferro)'\n  },\n  beduaram: {\n    towgs84: '-106,-87,188',\n    ellipse: 'clrk80',\n    datumName: 'Beduaram'\n  },\n  gunung_segara: {\n    towgs84: '-403,684,41',\n    ellipse: 'bessel',\n    datumName: 'Gunung Segara Jakarta'\n  },\n  rnb72: {\n    towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n    ellipse: \"intl\",\n    datumName: \"Reseau National Belge 1972\"\n  }\n};\n\nfor (var key in datums) {\n  var datum = datums[key];\n  datums[datum.datumName] = datum;\n}\n\nexport default datums;\n","var exports = {};\nexport {exports as default};\nexports.MERIT = {\n  a: 6378137.0,\n  rf: 298.257,\n  ellipseName: \"MERIT 1983\"\n};\n\nexports.SGS85 = {\n  a: 6378136.0,\n  rf: 298.257,\n  ellipseName: \"Soviet Geodetic System 85\"\n};\n\nexports.GRS80 = {\n  a: 6378137.0,\n  rf: 298.257222101,\n  ellipseName: \"GRS 1980(IUGG, 1980)\"\n};\n\nexports.IAU76 = {\n  a: 6378140.0,\n  rf: 298.257,\n  ellipseName: \"IAU 1976\"\n};\n\nexports.airy = {\n  a: 6377563.396,\n  b: 6356256.910,\n  ellipseName: \"Airy 1830\"\n};\n\nexports.APL4 = {\n  a: 6378137,\n  rf: 298.25,\n  ellipseName: \"Appl. Physics. 1965\"\n};\n\nexports.NWL9D = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"Naval Weapons Lab., 1965\"\n};\n\nexports.mod_airy = {\n  a: 6377340.189,\n  b: 6356034.446,\n  ellipseName: \"Modified Airy\"\n};\n\nexports.andrae = {\n  a: 6377104.43,\n  rf: 300.0,\n  ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n};\n\nexports.aust_SA = {\n  a: 6378160.0,\n  rf: 298.25,\n  ellipseName: \"Australian Natl & S. Amer. 1969\"\n};\n\nexports.GRS67 = {\n  a: 6378160.0,\n  rf: 298.2471674270,\n  ellipseName: \"GRS 67(IUGG 1967)\"\n};\n\nexports.bessel = {\n  a: 6377397.155,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841\"\n};\n\nexports.bess_nam = {\n  a: 6377483.865,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841 (Namibia)\"\n};\n\nexports.clrk66 = {\n  a: 6378206.4,\n  b: 6356583.8,\n  ellipseName: \"Clarke 1866\"\n};\n\nexports.clrk80 = {\n  a: 6378249.145,\n  rf: 293.4663,\n  ellipseName: \"Clarke 1880 mod.\"\n};\n\nexports.clrk80ign = {\n  a: 6378249.2,\n  b: 6356515,\n  rf: 293.4660213,\n  ellipseName: \"Clarke 1880 (IGN)\"\n};\n\nexports.clrk58 = {\n  a: 6378293.645208759,\n  rf: 294.2606763692654,\n  ellipseName: \"Clarke 1858\"\n};\n\nexports.CPM = {\n  a: 6375738.7,\n  rf: 334.29,\n  ellipseName: \"Comm. des Poids et Mesures 1799\"\n};\n\nexports.delmbr = {\n  a: 6376428.0,\n  rf: 311.5,\n  ellipseName: \"Delambre 1810 (Belgium)\"\n};\n\nexports.engelis = {\n  a: 6378136.05,\n  rf: 298.2566,\n  ellipseName: \"Engelis 1985\"\n};\n\nexports.evrst30 = {\n  a: 6377276.345,\n  rf: 300.8017,\n  ellipseName: \"Everest 1830\"\n};\n\nexports.evrst48 = {\n  a: 6377304.063,\n  rf: 300.8017,\n  ellipseName: \"Everest 1948\"\n};\n\nexports.evrst56 = {\n  a: 6377301.243,\n  rf: 300.8017,\n  ellipseName: \"Everest 1956\"\n};\n\nexports.evrst69 = {\n  a: 6377295.664,\n  rf: 300.8017,\n  ellipseName: \"Everest 1969\"\n};\n\nexports.evrstSS = {\n  a: 6377298.556,\n  rf: 300.8017,\n  ellipseName: \"Everest (Sabah & Sarawak)\"\n};\n\nexports.fschr60 = {\n  a: 6378166.0,\n  rf: 298.3,\n  ellipseName: \"Fischer (Mercury Datum) 1960\"\n};\n\nexports.fschr60m = {\n  a: 6378155.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1960\"\n};\n\nexports.fschr68 = {\n  a: 6378150.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1968\"\n};\n\nexports.helmert = {\n  a: 6378200.0,\n  rf: 298.3,\n  ellipseName: \"Helmert 1906\"\n};\n\nexports.hough = {\n  a: 6378270.0,\n  rf: 297.0,\n  ellipseName: \"Hough\"\n};\n\nexports.intl = {\n  a: 6378388.0,\n  rf: 297.0,\n  ellipseName: \"International 1909 (Hayford)\"\n};\n\nexports.kaula = {\n  a: 6378163.0,\n  rf: 298.24,\n  ellipseName: \"Kaula 1961\"\n};\n\nexports.lerch = {\n  a: 6378139.0,\n  rf: 298.257,\n  ellipseName: \"Lerch 1979\"\n};\n\nexports.mprts = {\n  a: 6397300.0,\n  rf: 191.0,\n  ellipseName: \"Maupertius 1738\"\n};\n\nexports.new_intl = {\n  a: 6378157.5,\n  b: 6356772.2,\n  ellipseName: \"New International 1967\"\n};\n\nexports.plessis = {\n  a: 6376523.0,\n  rf: 6355863.0,\n  ellipseName: \"Plessis 1817 (France)\"\n};\n\nexports.krass = {\n  a: 6378245.0,\n  rf: 298.3,\n  ellipseName: \"Krassovsky, 1942\"\n};\n\nexports.SEasia = {\n  a: 6378155.0,\n  b: 6356773.3205,\n  ellipseName: \"Southeast Asia\"\n};\n\nexports.walbeck = {\n  a: 6376896.0,\n  b: 6355834.8467,\n  ellipseName: \"Walbeck\"\n};\n\nexports.WGS60 = {\n  a: 6378165.0,\n  rf: 298.3,\n  ellipseName: \"WGS 60\"\n};\n\nexports.WGS66 = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"WGS 66\"\n};\n\nexports.WGS7 = {\n  a: 6378135.0,\n  rf: 298.26,\n  ellipseName: \"WGS 72\"\n};\n\nexport var WGS84 = exports.WGS84 = {\n  a: 6378137.0,\n  rf: 298.257223563,\n  ellipseName: \"WGS 84\"\n};\n\nexports.sphere = {\n  a: 6370997.0,\n  b: 6370997.0,\n  ellipseName: \"Normal Sphere (r=6370997)\"\n};\n","var exports = {};\nexport {exports as default};\n\nexports.greenwich = 0.0; //\"0dE\",\nexports.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\nexports.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\nexports.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\nexports.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\nexports.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\nexports.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\nexports.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\nexports.ferro = -17.666666666667; //\"17d40'W\",\nexports.brussels = 4.367975; //\"4d22'4.71\\\"E\",\nexports.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\nexports.athens = 23.7163375; //\"23d42'58.815\\\"E\",\nexports.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\n","export default {\n  'mm': {to_meter: 0.001},\n  'cm': {to_meter: 0.01},\n  'ft': {to_meter: 0.3048},\n  'us-ft': {to_meter: 1200 / 3937},\n  'fath': {to_meter: 1.8288},\n  'kmi': {to_meter: 1852},\n  'us-ch': {to_meter: 20.1168402336805},\n  'us-mi': {to_meter: 1609.34721869444},\n  'km': {to_meter: 1000},\n  'ind-ft': {to_meter: 0.30479841},\n  'ind-yd': {to_meter: 0.91439523},\n  'mi': {to_meter: 1609.344},\n  'yd': {to_meter: 0.9144},\n  'ch': {to_meter: 20.1168},\n  'link': {to_meter: 0.201168},\n  'dm': {to_meter: 0.01},\n  'in': {to_meter: 0.0254},\n  'ind-ch': {to_meter: 20.11669506},\n  'us-in': {to_meter: 0.025400050800101},\n  'us-yd': {to_meter: 0.914401828803658}\n};\n","export var PJD_3PARAM = 1;\nexport var PJD_7PARAM = 2;\nexport var PJD_GRIDSHIFT = 3;\nexport var PJD_WGS84 = 4; // WGS84 or equivalent\nexport var PJD_NODATUM = 5; // WGS84 or equivalent\nexport var SRS_WGS84_SEMIMAJOR = 6378137.0;  // only used in grid shift transforms\nexport var SRS_WGS84_SEMIMINOR = 6356752.314;  // only used in grid shift transforms\nexport var SRS_WGS84_ESQUARED = 0.0066943799901413165; // only used in grid shift transforms\nexport var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\nexport var HALF_PI = Math.PI/2;\n// ellipoid pj_set_ell.c\nexport var SIXTH = 0.1666666666666666667;\n/* 1/6 */\nexport var RA4 = 0.04722222222222222222;\n/* 17/360 */\nexport var RA6 = 0.02215608465608465608;\nexport var EPSLN = 1.0e-10;\n// you'd think you could use Number.EPSILON above but that makes\n// Mollweide get into an infinate loop.\n\nexport var D2R = 0.01745329251994329577;\nexport var R2D = 57.29577951308232088;\nexport var FORTPI = Math.PI/4;\nexport var TWO_PI = Math.PI * 2;\n// SPI is slightly greater than Math.PI, so values that exceed the -180..180\n// degree range by a tiny amount don't get wrapped. This prevents points that\n// have drifted from their original location along the 180th meridian (due to\n// floating point error) from changing their sign.\nexport var SPI = 3.14159265359;\n","import proj from './Proj';\nimport transform from './transform';\nvar wgs84 = proj('WGS84');\n\nfunction transformer(from, to, coords, enforceAxis) {\n  var transformedArray, out, keys;\n  if (Array.isArray(coords)) {\n    transformedArray = transform(from, to, coords, enforceAxis) || {x: NaN, y: NaN};\n    if (coords.length > 2) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (typeof transformedArray.z === 'number') {\n          return [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.slice(3));\n        } else {\n          return [transformedArray.x, transformedArray.y, coords[2]].concat(coords.slice(3));\n        }\n      } else {\n        return [transformedArray.x, transformedArray.y].concat(coords.slice(2));\n      }\n    } else {\n      return [transformedArray.x, transformedArray.y];\n    }\n  } else {\n    out = transform(from, to, coords, enforceAxis);\n    keys = Object.keys(coords);\n    if (keys.length === 2) {\n      return out;\n    }\n    keys.forEach(function (key) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (key === 'x' || key === 'y' || key === 'z') {\n          return;\n        }\n      } else {\n        if (key === 'x' || key === 'y') {\n          return;\n        }\n      }\n      out[key] = coords[key];\n    });\n    return out;\n  }\n}\n\nfunction checkProj(item) {\n  if (item instanceof proj) {\n    return item;\n  }\n  if (item.oProj) {\n    return item.oProj;\n  }\n  return proj(item);\n}\n\nfunction proj4(fromProj, toProj, coord) {\n  fromProj = checkProj(fromProj);\n  var single = false;\n  var obj;\n  if (typeof toProj === 'undefined') {\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n    coord = toProj;\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  toProj = checkProj(toProj);\n  if (coord) {\n    return transformer(fromProj, toProj, coord);\n  } else {\n    obj = {\n      forward: function (coords, enforceAxis) {\n        return transformer(fromProj, toProj, coords, enforceAxis);\n      },\n      inverse: function (coords, enforceAxis) {\n        return transformer(toProj, fromProj, coords, enforceAxis);\n      }\n    };\n    if (single) {\n      obj.oProj = toProj;\n    }\n    return obj;\n  }\n}\nexport default proj4;","import {PJD_3PARAM, PJD_7PARAM, PJD_GRIDSHIFT, PJD_WGS84, PJD_NODATUM, SEC_TO_RAD} from './constants/values';\n\nfunction datum(datumCode, datum_params, a, b, es, ep2, nadgrids) {\n  var out = {};\n\n  if (datumCode === undefined || datumCode === 'none') {\n    out.datum_type = PJD_NODATUM;\n  } else {\n    out.datum_type = PJD_WGS84;\n  }\n\n  if (datum_params) {\n    out.datum_params = datum_params.map(parseFloat);\n    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n      out.datum_type = PJD_3PARAM;\n    }\n    if (out.datum_params.length > 3) {\n      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n        out.datum_type = PJD_7PARAM;\n        out.datum_params[3] *= SEC_TO_RAD;\n        out.datum_params[4] *= SEC_TO_RAD;\n        out.datum_params[5] *= SEC_TO_RAD;\n        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n      }\n    }\n  }\n\n  if (nadgrids) {\n    out.datum_type = PJD_GRIDSHIFT;\n    out.grids = nadgrids;\n  }\n  out.a = a; //datum object also uses these values\n  out.b = b;\n  out.es = es;\n  out.ep2 = ep2;\n  return out;\n}\n\nexport default datum;\n","'use strict';\nimport {PJD_3PARAM, PJD_7PARAM, HALF_PI} from './constants/values';\nexport function compareDatums(source, dest) {\n  if (source.datum_type !== dest.datum_type) {\n    return false; // false, datums are not equal\n  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n    // the tolerance for es is to ensure that GRS80 and WGS84\n    // are considered identical\n    return false;\n  } else if (source.datum_type === PJD_3PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n  } else if (source.datum_type === PJD_7PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n  } else {\n    return true; // datums are equal\n  }\n} // cs_compare_datums()\n\n/*\n * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n * according to the current ellipsoid parameters.\n *\n *    Latitude  : Geodetic latitude in radians                     (input)\n *    Longitude : Geodetic longitude in radians                    (input)\n *    Height    : Geodetic height, in meters                       (input)\n *    X         : Calculated Geocentric X coordinate, in meters    (output)\n *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n *\n */\nexport function geodeticToGeocentric(p, es, a) {\n  var Longitude = p.x;\n  var Latitude = p.y;\n  var Height = p.z ? p.z : 0; //Z value not always supplied\n\n  var Rn; /*  Earth radius at location  */\n  var Sin_Lat; /*  Math.sin(Latitude)  */\n  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n  var Cos_Lat; /*  Math.cos(Latitude)  */\n\n  /*\n   ** Don't blow up if Latitude is just a little out of the value\n   ** range as it may just be a rounding issue.  Also removed longitude\n   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n   */\n  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n    Latitude = -HALF_PI;\n  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n    Latitude = HALF_PI;\n  } else if (Latitude < -HALF_PI) {\n    /* Latitude out of range */\n    //..reportError('geocent:lat out of range:' + Latitude);\n    return { x: -Infinity, y: -Infinity, z: p.z };\n  } else if (Latitude > HALF_PI) {\n    /* Latitude out of range */\n    return { x: Infinity, y: Infinity, z: p.z };\n  }\n\n  if (Longitude > Math.PI) {\n    Longitude -= (2 * Math.PI);\n  }\n  Sin_Lat = Math.sin(Latitude);\n  Cos_Lat = Math.cos(Latitude);\n  Sin2_Lat = Sin_Lat * Sin_Lat;\n  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n  return {\n    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n    z: ((Rn * (1 - es)) + Height) * Sin_Lat\n  };\n} // cs_geodetic_to_geocentric()\n\nexport function geocentricToGeodetic(p, es, a, b) {\n  /* local defintions and variables */\n  /* end-criterium of loop, accuracy of sin(Latitude) */\n  var genau = 1e-12;\n  var genau2 = (genau * genau);\n  var maxiter = 30;\n\n  var P; /* distance between semi-minor axis and location */\n  var RR; /* distance between center and location */\n  var CT; /* sin of geocentric latitude */\n  var ST; /* cos of geocentric latitude */\n  var RX;\n  var RK;\n  var RN; /* Earth radius at location */\n  var CPHI0; /* cos of start or old geodetic latitude in iterations */\n  var SPHI0; /* sin of start or old geodetic latitude in iterations */\n  var CPHI; /* cos of searched geodetic latitude */\n  var SPHI; /* sin of searched geodetic latitude */\n  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n  var X = p.x;\n  var Y = p.y;\n  var Z = p.z ? p.z : 0.0; //Z value not always supplied\n  var Longitude;\n  var Latitude;\n  var Height;\n\n  P = Math.sqrt(X * X + Y * Y);\n  RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n  /*      special cases for latitude and longitude */\n  if (P / a < genau) {\n\n    /*  special case, if P=0. (X=0., Y=0.) */\n    Longitude = 0.0;\n\n    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n    if (RR / a < genau) {\n      Latitude = HALF_PI;\n      Height = -b;\n      return {\n        x: p.x,\n        y: p.y,\n        z: p.z\n      };\n    }\n  } else {\n    /*  ellipsoidal (geodetic) longitude\n     *  interval: -PI < Longitude <= +PI */\n    Longitude = Math.atan2(Y, X);\n  }\n\n  /* --------------------------------------------------------------\n   * Following iterative algorithm was developped by\n   * \"Institut for Erdmessung\", University of Hannover, July 1988.\n   * Internet: www.ife.uni-hannover.de\n   * Iterative computation of CPHI,SPHI and Height.\n   * Iteration of CPHI and SPHI to 10**-12 radian resp.\n   * 2*10**-7 arcsec.\n   * --------------------------------------------------------------\n   */\n  CT = Z / RR;\n  ST = P / RR;\n  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n  CPHI0 = ST * (1.0 - es) * RX;\n  SPHI0 = CT * RX;\n  iter = 0;\n\n  /* loop to find sin(Latitude) resp. Latitude\n   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n  do {\n    iter++;\n    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n    /*  ellipsoidal (geodetic) height */\n    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n    RK = es * RN / (RN + Height);\n    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n    CPHI = ST * (1.0 - RK) * RX;\n    SPHI = CT * RX;\n    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n    CPHI0 = CPHI;\n    SPHI0 = SPHI;\n  }\n  while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n  /*      ellipsoidal (geodetic) latitude */\n  Latitude = Math.atan(SPHI / Math.abs(CPHI));\n  return {\n    x: Longitude,\n    y: Latitude,\n    z: Height\n  };\n} // cs_geocentric_to_geodetic()\n\n/****************************************************************/\n// pj_geocentic_to_wgs84( p )\n//  p = point to transform in geocentric coordinates (x,y,z)\n\n\n/** point object, nothing fancy, just allows values to be\n    passed back and forth by reference rather than by value.\n    Other point classes may be used as long as they have\n    x and y properties, which will get modified in the transform method.\n*/\nexport function geocentricToWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x + datum_params[0],\n      y: p.y + datum_params[1],\n      z: p.z + datum_params[2],\n    };\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n    };\n  }\n} // cs_geocentric_to_wgs84\n\n/****************************************************************/\n// pj_geocentic_from_wgs84()\n//  coordinate system definition,\n//  point to transform in geocentric coordinates (x,y,z)\nexport function geocentricFromWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x - datum_params[0],\n      y: p.y - datum_params[1],\n      z: p.z - datum_params[2],\n    };\n\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    var x_tmp = (p.x - Dx_BF) / M_BF;\n    var y_tmp = (p.y - Dy_BF) / M_BF;\n    var z_tmp = (p.z - Dz_BF) / M_BF;\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n\n    return {\n      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n    };\n  } //cs_geocentric_from_wgs84()\n}\n","import {\n  PJD_3PARAM,\n  PJD_7PARAM,\n  PJD_GRIDSHIFT,\n  PJD_NODATUM,\n  R2D,\n  SRS_WGS84_ESQUARED,\n  SRS_WGS84_SEMIMAJOR, SRS_WGS84_SEMIMINOR\n} from './constants/values';\n\nimport {geodeticToGeocentric, geocentricToGeodetic, geocentricToWgs84, geocentricFromWgs84, compareDatums} from './datumUtils';\nimport adjust_lon from \"./common/adjust_lon\";\nfunction checkParams(type) {\n  return (type === PJD_3PARAM || type === PJD_7PARAM);\n}\n\nexport default function(source, dest, point) {\n  // Short cut if the datums are identical.\n  if (compareDatums(source, dest)) {\n    return point; // in this case, zero is sucess,\n    // whereas cs_compare_datums returns 1 to indicate TRUE\n    // confusing, should fix this\n  }\n\n  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n    return point;\n  }\n\n  // If this datum requires grid shifts, then apply it to geodetic coordinates.\n  var source_a = source.a;\n  var source_es = source.es;\n  if (source.datum_type === PJD_GRIDSHIFT) {\n    var gridShiftCode = applyGridShift(source, false, point);\n    if (gridShiftCode !== 0) {\n      return undefined;\n    }\n    source_a = SRS_WGS84_SEMIMAJOR;\n    source_es = SRS_WGS84_ESQUARED;\n  }\n\n  var dest_a = dest.a;\n  var dest_b = dest.b;\n  var dest_es = dest.es;\n  if (dest.datum_type === PJD_GRIDSHIFT) {\n    dest_a = SRS_WGS84_SEMIMAJOR;\n    dest_b = SRS_WGS84_SEMIMINOR;\n    dest_es = SRS_WGS84_ESQUARED;\n  }\n\n  // Do we need to go through geocentric coordinates?\n  if (source_es === dest_es && source_a === dest_a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n    return point;\n  }\n\n  // Convert to geocentric coordinates.\n  point = geodeticToGeocentric(point, source_es, source_a);\n  // Convert between datums\n  if (checkParams(source.datum_type)) {\n    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n  }\n  if (checkParams(dest.datum_type)) {\n    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n  }\n  point = geocentricToGeodetic(point, dest_es, dest_a, dest_b);\n\n  if (dest.datum_type === PJD_GRIDSHIFT) {\n    var destGridShiftResult = applyGridShift(dest, true, point);\n    if (destGridShiftResult !== 0) {\n      return undefined;\n    }\n  }\n\n  return point;\n}\n\nexport function applyGridShift(source, inverse, point) {\n  if (source.grids === null || source.grids.length === 0) {\n    console.log('Grid shift grids not found');\n    return -1;\n  }\n  var input = {x: -point.x, y: point.y};\n  var output = {x: Number.NaN, y: Number.NaN};\n  var onlyMandatoryGrids = false;\n  var attemptedGrids = [];\n  outer:\n  for (var i = 0; i < source.grids.length; i++) {\n    var grid = source.grids[i];\n    attemptedGrids.push(grid.name);\n    if (grid.isNull) {\n      output = input;\n      break;\n    }\n    onlyMandatoryGrids = grid.mandatory;\n    if (grid.grid === null) {\n      if (grid.mandatory) {\n        console.log(\"Unable to find mandatory grid '\" + grid.name + \"'\");\n        return -1;\n      }\n      continue;\n    }\n    var subgrids = grid.grid.subgrids;\n    for (var j = 0, jj = subgrids.length; j < jj; j++) {\n      var subgrid = subgrids[j];\n      // skip tables that don't match our point at all\n      var epsilon = (Math.abs(subgrid.del[1]) + Math.abs(subgrid.del[0])) / 10000.0;\n      var minX = subgrid.ll[0] - epsilon;\n      var minY = subgrid.ll[1] - epsilon;\n      var maxX = subgrid.ll[0] + (subgrid.lim[0] - 1) * subgrid.del[0] + epsilon;\n      var maxY = subgrid.ll[1] + (subgrid.lim[1] - 1) * subgrid.del[1] + epsilon;\n      if (minY > input.y || minX > input.x || maxY < input.y || maxX < input.x ) {\n        continue;\n      }\n      output = applySubgridShift(input, inverse, subgrid);\n      if (!isNaN(output.x)) {\n        break outer;\n      }\n    }\n  }\n  if (isNaN(output.x)) {\n    console.log(\"Failed to find a grid shift table for location '\"+\n      -input.x * R2D + \" \" + input.y * R2D + \" tried: '\" + attemptedGrids + \"'\");\n    return -1;\n  }\n  point.x = -output.x;\n  point.y = output.y;\n  return 0;\n}\n\nfunction applySubgridShift(pin, inverse, ct) {\n  var val = {x: Number.NaN, y: Number.NaN};\n  if (isNaN(pin.x)) { return val; }\n  var tb = {x: pin.x, y: pin.y};\n  tb.x -= ct.ll[0];\n  tb.y -= ct.ll[1];\n  tb.x = adjust_lon(tb.x - Math.PI) + Math.PI;\n  var t = nadInterpolate(tb, ct);\n  if (inverse) {\n    if (isNaN(t.x)) {\n      return val;\n    }\n    t.x = tb.x - t.x;\n    t.y = tb.y - t.y;\n    var i = 9, tol = 1e-12;\n    var dif, del;\n    do {\n      del = nadInterpolate(t, ct);\n      if (isNaN(del.x)) {\n        console.log(\"Inverse grid shift iteration failed, presumably at grid edge.  Using first approximation.\");\n        break;\n      }\n      dif = {x: tb.x - (del.x + t.x), y: tb.y - (del.y + t.y)};\n      t.x += dif.x;\n      t.y += dif.y;\n    } while (i-- && Math.abs(dif.x) > tol && Math.abs(dif.y) > tol);\n    if (i < 0) {\n      console.log(\"Inverse grid shift iterator failed to converge.\");\n      return val;\n    }\n    val.x = adjust_lon(t.x + ct.ll[0]);\n    val.y = t.y + ct.ll[1];\n  } else {\n    if (!isNaN(t.x)) {\n      val.x = pin.x + t.x;\n      val.y = pin.y + t.y;\n    }\n  }\n  return val;\n}\n\nfunction nadInterpolate(pin, ct) {\n  var t = {x: pin.x / ct.del[0], y: pin.y / ct.del[1]};\n  var indx = {x: Math.floor(t.x), y: Math.floor(t.y)};\n  var frct = {x: t.x - 1.0 * indx.x, y: t.y - 1.0 * indx.y};\n  var val= {x: Number.NaN, y: Number.NaN};\n  var inx;\n  if (indx.x < 0 || indx.x >= ct.lim[0]) {\n    return val;\n  }\n  if (indx.y < 0 || indx.y >= ct.lim[1]) {\n    return val;\n  }\n  inx = (indx.y * ct.lim[0]) + indx.x;\n  var f00 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx++;\n  var f10= {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx += ct.lim[0];\n  var f11 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx--;\n  var f01 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  var m11 = frct.x * frct.y, m10 = frct.x * (1.0 - frct.y),\n    m00 = (1.0 - frct.x) * (1.0 - frct.y), m01 = (1.0 - frct.x) * frct.y;\n  val.x = (m00 * f00.x + m10 * f10.x + m01 * f01.x + m11 * f11.x);\n  val.y = (m00 * f00.y + m10 * f10.y + m01 * f01.y + m11 * f11.y);\n  return val;\n}\n","import globals from './global';\nimport parseProj from './projString';\nimport wkt from 'wkt-parser';\n\nfunction defs(name) {\n  /*global console*/\n  var that = this;\n  if (arguments.length === 2) {\n    var def = arguments[1];\n    if (typeof def === 'string') {\n      if (def.charAt(0) === '+') {\n        defs[name] = parseProj(arguments[1]);\n      }\n      else {\n        defs[name] = wkt(arguments[1]);\n      }\n    } else {\n      defs[name] = def;\n    }\n  }\n  else if (arguments.length === 1) {\n    if (Array.isArray(name)) {\n      return name.map(function(v) {\n        if (Array.isArray(v)) {\n          defs.apply(that, v);\n        }\n        else {\n          defs(v);\n        }\n      });\n    }\n    else if (typeof name === 'string') {\n      if (name in defs) {\n        return defs[name];\n      }\n    }\n    else if ('EPSG' in name) {\n      defs['EPSG:' + name.EPSG] = name;\n    }\n    else if ('ESRI' in name) {\n      defs['ESRI:' + name.ESRI] = name;\n    }\n    else if ('IAU2000' in name) {\n      defs['IAU2000:' + name.IAU2000] = name;\n    }\n    else {\n      console.log(name);\n    }\n    return;\n  }\n\n\n}\nglobals(defs);\nexport default defs;\n","import {SIXTH, RA4, RA6, EPSLN} from './constants/values';\nimport {default as Ellipsoid, WGS84} from './constants/Ellipsoid';\nimport match from './match';\n\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) { // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}\n","export default function(destination, source) {\n  destination = destination || {};\n  var value, property;\n  if (!source) {\n    return destination;\n  }\n  for (property in source) {\n    value = source[property];\n    if (value !== undefined) {\n      destination[property] = value;\n    }\n  }\n  return destination;\n}\n","export default function(defs) {\n  defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n  defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n  defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n  // UTM WGS84\n  for (var i = 1; i <= 60; ++i) {\n    defs('EPSG:' + (32600 + i), \"+proj=utm +zone=\" + i + \" +datum=WGS84 +units=m\");\n    defs('EPSG:' + (32700 + i), \"+proj=utm +zone=\" + i + \" +south +datum=WGS84 +units=m\");\n  }\n\n  defs.WGS84 = defs['EPSG:4326'];\n  defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n  defs.GOOGLE = defs['EPSG:3857'];\n  defs['EPSG:900913'] = defs['EPSG:3857'];\n  defs['EPSG:102113'] = defs['EPSG:3857'];\n}\n","import proj4 from './core';\nimport Proj from \"./Proj\";\nimport Point from \"./Point\";\nimport common from \"./common/toPoint\";\nimport defs from \"./defs\";\nimport nadgrid from \"./nadgrid\";\nimport transform from \"./transform\";\nimport mgrs from \"mgrs\";\nimport includedProjections from \"../projs\";\n\nproj4.defaultDatum = 'WGS84'; //default datum\nproj4.Proj = Proj;\nproj4.WGS84 = new proj4.Proj('WGS84');\nproj4.Point = Point;\nproj4.toPoint = common;\nproj4.defs = defs;\nproj4.nadgrid = nadgrid;\nproj4.transform = transform;\nproj4.mgrs = mgrs;\nproj4.version = '__VERSION__';\nincludedProjections(proj4);\nexport default proj4;\n","var ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nexport default function match(obj, key) {\n  if (obj[key]) {\n    return obj[key];\n  }\n  var keys = Object.keys(obj);\n  var lkey = key.toLowerCase().replace(ignoredChar, '');\n  var i = -1;\n  var testkey, processedKey;\n  while (++i < keys.length) {\n    testkey = keys[i];\n    processedKey = testkey.toLowerCase().replace(ignoredChar, '');\n    if (processedKey === lkey) {\n      return obj[testkey];\n    }\n  }\n}\n","/**\n * Resources for details of NTv2 file formats:\n * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf\n * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm\n */\n\nvar loadedNadgrids = {};\n\n/**\n * Load a binary NTv2 file (.gsb) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file\n * as an ArrayBuffer.\n */\nexport default function nadgrid(key, data) {\n  var view = new DataView(data);\n  var isLittleEndian = detectLittleEndian(view);\n  var header = readHeader(view, isLittleEndian);\n  var subgrids = readSubgrids(view, header, isLittleEndian);\n  var nadgrid = {header: header, subgrids: subgrids};\n  loadedNadgrids[key] = nadgrid;\n  return nadgrid;\n}\n\n/**\n * Given a proj4 value for nadgrids, return an array of loaded grids\n */\nexport function getNadgrids(nadgrids) {\n  // Format details: http://proj.maptools.org/gen_parms.html\n  if (nadgrids === undefined) { return null; }\n  var grids = nadgrids.split(',');\n  return grids.map(parseNadgridString);\n}\n\nfunction parseNadgridString(value) {\n  if (value.length === 0) {\n    return null;\n  }\n  var optional = value[0] === '@';\n  if (optional) {\n    value = value.slice(1);\n  }\n  if (value === 'null') {\n    return {name: 'null', mandatory: !optional, grid: null, isNull: true};\n  }\n  return {\n    name: value,\n    mandatory: !optional,\n    grid: loadedNadgrids[value] || null,\n    isNull: false\n  };\n}\n\nfunction secondsToRadians(seconds) {\n  return (seconds / 3600) * Math.PI / 180;\n}\n\nfunction detectLittleEndian(view) {\n  var nFields = view.getInt32(8, false);\n  if (nFields === 11) {\n    return false;\n  }\n  nFields = view.getInt32(8, true);\n  if (nFields !== 11) {\n    console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');\n  }\n  return true;\n}\n\nfunction readHeader(view, isLittleEndian) {\n  return {\n    nFields: view.getInt32(8, isLittleEndian),\n    nSubgridFields: view.getInt32(24, isLittleEndian),\n    nSubgrids: view.getInt32(40, isLittleEndian),\n    shiftType: decodeString(view, 56, 56 + 8).trim(),\n    fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),\n    fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),\n    toSemiMajorAxis: view.getFloat64(152, isLittleEndian),\n    toSemiMinorAxis: view.getFloat64(168, isLittleEndian),\n  };\n}\n\nfunction decodeString(view, start, end) {\n  return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));\n}\n\nfunction readSubgrids(view, header, isLittleEndian) {\n  var gridOffset = 176;\n  var grids = [];\n  for (var i = 0; i < header.nSubgrids; i++) {\n    var subHeader = readGridHeader(view, gridOffset, isLittleEndian);\n    var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian);\n    var lngColumnCount = Math.round(\n      1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);\n    var latColumnCount = Math.round(\n      1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);\n    // Proj4 operates on radians whereas the coordinates are in seconds in the grid\n    grids.push({\n      ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],\n      del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],\n      lim: [lngColumnCount, latColumnCount],\n      count: subHeader.gridNodeCount,\n      cvs: mapNodes(nodes)\n    });\n    gridOffset += 176 + subHeader.gridNodeCount * 16;\n  }\n  return grids;\n}\n\nfunction mapNodes(nodes) {\n  return nodes.map(function (r) {return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];});\n}\n\nfunction readGridHeader(view, offset, isLittleEndian) {\n  return {\n    name: decodeString(view, offset + 8, offset + 16).trim(),\n    parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),\n    lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),\n    upperLatitude: view.getFloat64(offset + 88, isLittleEndian),\n    lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),\n    upperLongitude: view.getFloat64(offset + 120, isLittleEndian),\n    latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),\n    longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),\n    gridNodeCount: view.getInt32(offset + 168, isLittleEndian)\n  };\n}\n\nfunction readGridNodes(view, offset, gridHeader, isLittleEndian) {\n  var nodesOffset = offset + 176;\n  var gridRecordLength = 16;\n  var gridShiftRecords = [];\n  for (var i = 0; i < gridHeader.gridNodeCount; i++) {\n    var record = {\n      latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),\n      longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),\n      latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),\n      longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian),\n    };\n    gridShiftRecords.push(record);\n  }\n  return gridShiftRecords;\n}\n","import defs from './defs';\nimport wkt from 'wkt-parser';\nimport projStr from './projString';\nimport match from './match';\nfunction testObj(code){\n  return typeof code === 'string';\n}\nfunction testDef(code){\n  return code in defs;\n}\nvar codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\nfunction testWKT(code){\n  return codeWords.some(function (word) {\n    return code.indexOf(word) > -1;\n  });\n}\nvar codes = ['3857', '900913', '3785', '102113'];\nfunction checkMercator(item) {\n  var auth = match(item, 'authority');\n  if (!auth) {\n    return;\n  }\n  var code = match(auth, 'epsg');\n  return code && codes.indexOf(code) > -1;\n}\nfunction checkProjStr(item) {\n  var ext = match(item, 'extension');\n  if (!ext) {\n    return;\n  }\n  return match(ext, 'proj4');\n}\nfunction testProj(code){\n  return code[0] === '+';\n}\nfunction parse(code){\n  if (testObj(code)) {\n    //check to see if this is a WKT string\n    if (testDef(code)) {\n      return defs[code];\n    }\n    if (testWKT(code)) {\n      var out = wkt(code);\n      // test of spetial case, due to this being a very common and often malformed\n      if (checkMercator(out)) {\n        return defs['EPSG:3857'];\n      }\n      var maybeProjStr = checkProjStr(out);\n      if (maybeProjStr) {\n        return projStr(maybeProjStr);\n      }\n      return out;\n    }\n    if (testProj(code)) {\n      return projStr(code);\n    }\n  }else{\n    return code;\n  }\n}\n\nexport default parse;\n","import {D2R} from './constants/values';\nimport PrimeMeridian from './constants/PrimeMeridian';\nimport units from './constants/units';\nimport match from './match';\n\nexport default function(defData) {\n  var self = {};\n  var paramObj = defData.split('+').map(function(v) {\n    return v.trim();\n  }).filter(function(a) {\n    return a;\n  }).reduce(function(p, a) {\n    var split = a.split('=');\n    split.push(true);\n    p[split[0].toLowerCase()] = split[1];\n    return p;\n  }, {});\n  var paramName, paramVal, paramOutname;\n  var params = {\n    proj: 'projName',\n    datum: 'datumCode',\n    rf: function(v) {\n      self.rf = parseFloat(v);\n    },\n    lat_0: function(v) {\n      self.lat0 = v * D2R;\n    },\n    lat_1: function(v) {\n      self.lat1 = v * D2R;\n    },\n    lat_2: function(v) {\n      self.lat2 = v * D2R;\n    },\n    lat_ts: function(v) {\n      self.lat_ts = v * D2R;\n    },\n    lon_0: function(v) {\n      self.long0 = v * D2R;\n    },\n    lon_1: function(v) {\n      self.long1 = v * D2R;\n    },\n    lon_2: function(v) {\n      self.long2 = v * D2R;\n    },\n    alpha: function(v) {\n      self.alpha = parseFloat(v) * D2R;\n    },\n    gamma: function(v) {\n      self.rectified_grid_angle = parseFloat(v);\n    },\n    lonc: function(v) {\n      self.longc = v * D2R;\n    },\n    x_0: function(v) {\n      self.x0 = parseFloat(v);\n    },\n    y_0: function(v) {\n      self.y0 = parseFloat(v);\n    },\n    k_0: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    k: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    a: function(v) {\n      self.a = parseFloat(v);\n    },\n    b: function(v) {\n      self.b = parseFloat(v);\n    },\n    r: function(v) {\n      self.a = self.b = parseFloat(v);\n    },\n    r_a: function() {\n      self.R_A = true;\n    },\n    zone: function(v) {\n      self.zone = parseInt(v, 10);\n    },\n    south: function() {\n      self.utmSouth = true;\n    },\n    towgs84: function(v) {\n      self.datum_params = v.split(\",\").map(function(a) {\n        return parseFloat(a);\n      });\n    },\n    to_meter: function(v) {\n      self.to_meter = parseFloat(v);\n    },\n    units: function(v) {\n      self.units = v;\n      var unit = match(units, v);\n      if (unit) {\n        self.to_meter = unit.to_meter;\n      }\n    },\n    from_greenwich: function(v) {\n      self.from_greenwich = v * D2R;\n    },\n    pm: function(v) {\n      var pm = match(PrimeMeridian, v);\n      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n    },\n    nadgrids: function(v) {\n      if (v === '@null') {\n        self.datumCode = 'none';\n      }\n      else {\n        self.nadgrids = v;\n      }\n    },\n    axis: function(v) {\n      var legalAxis = \"ewnsud\";\n      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n        self.axis = v;\n      }\n    },\n    approx: function() {\n      self.approx = true;\n    }\n  };\n  for (paramName in paramObj) {\n    paramVal = paramObj[paramName];\n    if (paramName in params) {\n      paramOutname = params[paramName];\n      if (typeof paramOutname === 'function') {\n        paramOutname(paramVal);\n      }\n      else {\n        self[paramOutname] = paramVal;\n      }\n    }\n    else {\n      self[paramName] = paramVal;\n    }\n  }\n  if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n    self.datumCode = self.datumCode.toLowerCase();\n  }\n  return self;\n}\n","import merc from \"./projections/merc\";\nimport longlat from \"./projections/longlat\";\nvar projs = [merc, longlat];\nvar names = {};\nvar projStore = [];\n\nfunction add(proj, i) {\n  var len = projStore.length;\n  if (!proj.names) {\n    console.log(i);\n    return true;\n  }\n  projStore[len] = proj;\n  proj.names.forEach(function(n) {\n    names[n.toLowerCase()] = len;\n  });\n  return this;\n}\n\nexport {add};\n\nexport function get(name) {\n  if (!name) {\n    return false;\n  }\n  var n = name.toLowerCase();\n  if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\n    return projStore[names[n]];\n  }\n}\n\nexport function start() {\n  projs.forEach(add);\n}\nexport default {\n  start: start,\n  add: add,\n  get: get\n};\n","import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po);\n\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po);\n\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po);\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  }\n  else {\n    this.ns0 = this.con;\n  }\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n\n  var qs = qsfnz(this.e3, this.sin_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n  con = rh1 * this.ns0 / this.a;\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  }\n  else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n  if (eccent < EPSLN) {\n    return phi;\n  }\n\n  var eccnts = eccent * eccent;\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n  return null;\n}\n\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};\n","import adjust_lon from '../common/adjust_lon';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport asinz from '../common/asinz';\nimport imlfn from '../common/imlfn';\n\n\n\nexport function init() {\n  this.sin_p12 = Math.sin(this.lat0);\n  this.cos_p12 = Math.cos(this.lat0);\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var dlon = adjust_lon(lon - this.long0);\n  var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n  if (this.sphere) {\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //default case\n      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n      c = Math.acos(cos_c);\n      kp = c ? c / Math.sin(c) : 1;\n      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n      return p;\n    }\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //Default case\n      tanphi = sinphi / cosphi;\n      Nl1 = gN(this.a, this.e, this.sin_p12);\n      Nl = gN(this.a, this.e, sinphi);\n      psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n      Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n      if (Az === 0) {\n        s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n        s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else {\n        s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n      }\n      G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n      H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n      GH = G * H;\n      Hs = H * H;\n      s2 = s * s;\n      s3 = s2 * s;\n      s4 = s3 * s;\n      s5 = s4 * s;\n      c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n      p.x = this.x0 + c * Math.sin(Az);\n      p.y = this.y0 + c * Math.cos(Az);\n      return p;\n    }\n  }\n\n\n}\n\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F, sinpsi;\n  if (this.sphere) {\n    rh = Math.sqrt(p.x * p.x + p.y * p.y);\n    if (rh > (2 * HALF_PI * this.a)) {\n      return;\n    }\n    z = rh / this.a;\n\n    sinz = Math.sin(z);\n    cosz = Math.cos(z);\n\n    lon = this.long0;\n    if (Math.abs(rh) <= EPSLN) {\n      lat = this.lat0;\n    }\n    else {\n      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n        }\n        else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n      }\n      else {\n        /*con = cosz - this.sin_p12 * Math.sin(lat);\n        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n          //no-op, just keep the lon value as is\n        } else {\n          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n        }*/\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n      }\n    }\n\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = Mlp - rh;\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = rh - Mlp;\n\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else {\n      //default case\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      Az = Math.atan2(p.x, p.y);\n      N1 = gN(this.a, this.e, this.sin_p12);\n      cosAz = Math.cos(Az);\n      tmp = this.e * this.cos_p12 * cosAz;\n      A = -tmp * tmp / (1 - this.es);\n      B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n      D = rh / N1;\n      Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n      F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n      psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n      lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n      sinpsi = Math.sin(psi);\n      lat = Math.atan2((sinpsi - this.es * F * this.sin_p12) * Math.tan(psi), sinpsi * (1 - this.es));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n  }\n\n}\n\nexport var names = [\"Azimuthal_Equidistant\", \"aeqd\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lat from \"../common/adjust_lat\";\nimport adjust_lon from \"../common/adjust_lon\";\nimport hypot from \"../common/hypot\";\nimport pj_enfn from \"../common/pj_enfn\";\nimport pj_inv_mlfn from \"../common/pj_inv_mlfn\";\nimport pj_mlfn from \"../common/pj_mlfn\";\nimport { HALF_PI } from \"../constants/values\";\n\nvar EPS10 = 1e-10;\n\nexport function init() {\n  var c;\n\n  this.phi1 = this.lat1;\n  if (Math.abs(this.phi1) < EPS10) {\n    throw new Error();\n  }\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.m1 = pj_mlfn(this.phi1, this.am1 = Math.sin(this.phi1),\n      c = Math.cos(this.phi1), this.en);\n    this.am1 = c / (Math.sqrt(1 - this.es * this.am1 * this.am1) * this.am1);\n    this.inverse = e_inv;\n    this.forward = e_fwd;\n  } else {\n    if (Math.abs(this.phi1) + EPS10 >= HALF_PI) {\n      this.cphi1 = 0;\n    }\n    else {\n      this.cphi1 = 1 / Math.tan(this.phi1);\n    }\n    this.inverse = s_inv;\n    this.forward = s_fwd;\n  }\n}\n\nfunction e_fwd(p) {\n  var lam = adjust_lon(p.x - (this.long0 || 0));\n  var phi = p.y;\n  var rh, E, c;\n  rh = this.am1 + this.m1 - pj_mlfn(phi, E = Math.sin(phi), c = Math.cos(phi), this.en);\n  E = c * lam / (rh * Math.sqrt(1 - this.es * E * E));\n  p.x = rh * Math.sin(E);\n  p.y = this.am1 - rh * Math.cos(E);\n\n  p.x = this.a * p.x + (this.x0 || 0);\n  p.y = this.a * p.y + (this.y0 || 0);\n  return p;\n}\n\nfunction e_inv(p) {\n  p.x = (p.x - (this.x0 || 0)) / this.a;\n  p.y = (p.y - (this.y0 || 0)) / this.a;\n\n  var s, rh, lam, phi;\n  rh = hypot(p.x, p.y = this.am1 - p.y);\n  phi = pj_inv_mlfn(this.am1 + this.m1 - rh, this.es, this.en);\n  if ((s = Math.abs(phi)) < HALF_PI) {\n    s = Math.sin(phi);\n    lam = rh * Math.atan2(p.x, p.y) * Math.sqrt(1 - this.es * s * s) / Math.cos(phi);\n  } else if (Math.abs(s - HALF_PI) <= EPS10) {\n    lam = 0;\n  }\n  else {\n    throw new Error();\n  }\n  p.x = adjust_lon(lam + (this.long0 || 0));\n  p.y = adjust_lat(phi);\n  return p;\n}\n\nfunction s_fwd(p) {\n  var lam = adjust_lon(p.x - (this.long0 || 0));\n  var phi = p.y;\n  var E, rh;\n  rh = this.cphi1 + this.phi1 - phi;\n  if (Math.abs(rh) > EPS10) {\n    p.x = rh * Math.sin(E = lam * Math.cos(phi) / rh);\n    p.y = this.cphi1 - rh * Math.cos(E);\n  } else {\n    p.x = p.y = 0;\n  }\n\n  p.x = this.a * p.x + (this.x0 || 0);\n  p.y = this.a * p.y + (this.y0 || 0);\n  return p;\n}\n\nfunction s_inv(p) {\n  p.x = (p.x - (this.x0 || 0)) / this.a;\n  p.y = (p.y - (this.y0 || 0)) / this.a;\n\n  var lam, phi;\n  var rh = hypot(p.x, p.y = this.cphi1 - p.y);\n  phi = this.cphi1 + this.phi1 - rh;\n  if (Math.abs(phi) > HALF_PI) {\n    throw new Error();\n  }\n  if (Math.abs(Math.abs(phi) - HALF_PI) <= EPS10) {\n    lam = 0;\n  } else {\n    lam = rh * Math.atan2(p.x, p.y) / Math.cos(phi);\n  }\n  p.x = adjust_lon(lam + (this.long0 || 0));\n  p.y = adjust_lat(phi);\n  return p;\n}\n\nexport var names = [\"bonne\", \"Bonne (Werner lat_1=90)\"];\nexport default {\n  init: init,\n  names: names\n};","import mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nexport function init() {\n  if (!this.sphere) {\n    this.e0 = e0fn(this.es);\n    this.e1 = e1fn(this.es);\n    this.e2 = e2fn(this.es);\n    this.e3 = e3fn(this.es);\n    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  }\n}\n\n/* Cassini forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y;\n  var lam = p.x;\n  var phi = p.y;\n  lam = adjust_lon(lam - this.long0);\n\n  if (this.sphere) {\n    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n  }\n  else {\n    //ellipsoid\n    var sinphi = Math.sin(phi);\n    var cosphi = Math.cos(phi);\n    var nl = gN(this.a, this.e, sinphi);\n    var tl = Math.tan(phi) * Math.tan(phi);\n    var al = lam * Math.cos(phi);\n    var asq = al * al;\n    var cl = this.es * cosphi * cosphi / (1 - this.es);\n    var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\n    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n\n\n  }\n\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var phi, lam;\n\n  if (this.sphere) {\n    var dd = y + this.lat0;\n    phi = Math.asin(Math.sin(dd) * Math.cos(x));\n    lam = Math.atan2(Math.tan(x), Math.cos(dd));\n  }\n  else {\n    /* ellipsoid */\n    var ml1 = this.ml0 / this.a + y;\n    var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n      p.x = this.long0;\n      p.y = HALF_PI;\n      if (y < 0) {\n        p.y *= -1;\n      }\n      return p;\n    }\n    var nl1 = gN(this.a, this.e, Math.sin(phi1));\n\n    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n    var tl1 = Math.pow(Math.tan(phi1), 2);\n    var dl = x * this.a / nl1;\n    var dsq = dl * dl;\n    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n\n  }\n\n  p.x = adjust_lon(lam + this.long0);\n  p.y = adjust_lat(phi);\n  return p;\n\n}\n\nexport var names = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport qsfnz from '../common/qsfnz';\nimport msfnz from '../common/msfnz';\nimport iqsfnz from '../common/iqsfnz';\n\n/*\n  reference:\n    \"Cartographic Projection Procedures for the UNIX Environment-\n    A User's Manual\" by Gerald I. Evenden,\n    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n*/\nexport function init() {\n  //no-op\n  if (!this.sphere) {\n    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n  }\n}\n\n/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  if (this.sphere) {\n    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n  }\n  else {\n    var qs = qsfnz(this.e, Math.sin(lat));\n    x = this.x0 + this.a * this.k0 * dlon;\n    y = this.y0 + this.a * qs * 0.5 / this.k0;\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n  }\n  else {\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"cea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n\n  this.rc = Math.cos(this.lat_ts);\n}\n\n// forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  var dlon = adjust_lon(lon - this.long0);\n  var dlat = adjust_lat(lat - this.lat0);\n  p.x = this.x0 + (this.a * dlon * this.rc);\n  p.y = this.y0 + (this.a * dlat);\n  return p;\n}\n\n// inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var x = p.x;\n  var y = p.y;\n\n  p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\n  p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\n  return p;\n}\n\nexport var names = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport msfnz from '../common/msfnz';\nimport mlfn from '../common/mlfn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.lat2 = this.lat2 || this.lat1;\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n\n  this.sinphi = Math.sin(this.lat1);\n  this.cosphi = Math.cos(this.lat1);\n\n  this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n  this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n    this.ns = this.sinphi;\n  }\n  else {\n    this.sinphi = Math.sin(this.lat2);\n    this.cosphi = Math.cos(this.lat2);\n    this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n    this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n  }\n  this.g = this.ml1 + this.ms1 / this.ns;\n  this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  this.rh = this.a * (this.g - this.ml0);\n}\n\n/* Equidistant Conic forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var rh1;\n\n  /* Forward equations\n      -----------------*/\n  if (this.sphere) {\n    rh1 = this.a * (this.g - lat);\n  }\n  else {\n    var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n    rh1 = this.a * (this.g - ml);\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  var x = this.x0 + rh1 * Math.sin(theta);\n  var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  var con, rh1, lat, lon;\n  if (this.ns >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    lat = adjust_lat(this.g - rh1 / this.a);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    var ml = this.g - rh1 / this.a;\n    lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n\n}\n\nexport var names = [\"Equidistant_Conic\", \"eqdc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","/**\n * Copyright 2018 Bernie Jenny, Monash University, Melbourne, Australia.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Equal Earth is a projection inspired by the Robinson projection, but unlike\n * the Robinson projection retains the relative size of areas. The projection\n * was designed in 2018 by Bojan Savric, Tom Patterson and Bernhard Jenny.\n *\n * Publication:\n * Bojan Savric, Tom Patterson & Bernhard Jenny (2018). The Equal Earth map\n * projection, International Journal of Geographical Information Science,\n * DOI: 10.1080/13658816.2018.1504949\n *\n * Code released August 2018\n * Ported to JavaScript and adapted for mapshaper-proj by Matthew Bloch August 2018\n * Modified for proj4js by Andreas Hocevar by Andreas Hocevar March 2024\n */\n\nimport adjust_lon from \"../common/adjust_lon\";\n\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = Math.sqrt(3) / 2.0;\n\nexport function init() {\n  this.es = 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n}\n\nexport function forward(p) {\n  var lam = adjust_lon(p.x - this.long0);\n  var phi = p.y;\n  var paramLat = Math.asin(M * Math.sin(phi)),\n  paramLatSq = paramLat * paramLat,\n  paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n  p.x = lam * Math.cos(paramLat) /\n  (M * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)));\n  p.y = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq));\n\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  var EPS = 1e-9,\n      NITER = 12,\n      paramLat = p.y,\n      paramLatSq, paramLatPow6, fy, fpy, dlat, i;\n\n  for (i = 0; i < NITER; ++i) {\n    paramLatSq = paramLat * paramLat;\n    paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n    fy = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq)) - p.y;\n    fpy = A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq);\n    paramLat -= dlat = fy / fpy;\n    if (Math.abs(dlat) < EPS) {\n        break;\n    }\n  }\n  paramLatSq = paramLat * paramLat;\n  paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n  p.x = M * p.x * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)) /\n          Math.cos(paramLat);\n  p.y = Math.asin(Math.sin(paramLat) / M);\n\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"eqearth\", \"Equal Earth\", \"Equal_Earth\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};","// Heavily based on this etmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\n\nimport tmerc from '../projections/tmerc';\nimport sinh from '../common/sinh';\nimport hypot from '../common/hypot';\nimport asinhy from '../common/asinhy';\nimport gatg from '../common/gatg';\nimport clens from '../common/clens';\nimport clens_cmplx from '../common/clens_cmplx';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  if (!this.approx && (isNaN(this.es) || this.es <= 0)) {\n    throw new Error('Incorrect elliptical usage. Try using the +approx option in the proj string, or PROJECTION[\"Fast_Transverse_Mercator\"] in the WKT.');\n  }\n  if (this.approx) {\n    // When '+approx' is set, use tmerc instead\n    tmerc.init.apply(this);\n    this.forward = tmerc.forward;\n    this.inverse = tmerc.inverse;\n  }\n\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  this.cgb = [];\n  this.cbg = [];\n  this.utg = [];\n  this.gtu = [];\n\n  var f = this.es / (1 + Math.sqrt(1 - this.es));\n  var n = f / (2 - f);\n  var np = n;\n\n  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\n  this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\n\n  np = np * n;\n  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\n  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\n\n  np = np * n;\n  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\n  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\n\n  np = np * n;\n  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\n  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\n\n  np = np * n;\n  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\n  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\n\n  np = np * n;\n  this.cgb[5] = np * (601676 / 22275);\n  this.cbg[5] = np * (444337 / 155925);\n\n  np = Math.pow(n, 2);\n  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\n\n  this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\n  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\n\n  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\n  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\n\n  np = np * n;\n  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\n  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\n\n  np = np * n;\n  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\n  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\n\n  np = np * n;\n  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\n  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\n\n  np = np * n;\n  this.utg[5] = np * (-20648693 / 638668800);\n  this.gtu[5] = np * (212378941 / 319334400);\n\n  var Z = gatg(this.cbg, this.lat0);\n  this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\n}\n\nexport function forward(p) {\n  var Ce = adjust_lon(p.x - this.long0);\n  var Cn = p.y;\n\n  Cn = gatg(this.cbg, Cn);\n  var sin_Cn = Math.sin(Cn);\n  var cos_Cn = Math.cos(Cn);\n  var sin_Ce = Math.sin(Ce);\n  var cos_Ce = Math.cos(Ce);\n\n  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\n  Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\n  Ce = asinhy(Math.tan(Ce));\n\n  var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\n\n  Cn = Cn + tmp[0];\n  Ce = Ce + tmp[1];\n\n  var x;\n  var y;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    x = this.a * (this.Qn * Ce) + this.x0;\n    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\n  }\n  else {\n    x = Infinity;\n    y = Infinity;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\nexport function inverse(p) {\n  var Ce = (p.x - this.x0) * (1 / this.a);\n  var Cn = (p.y - this.y0) * (1 / this.a);\n\n  Cn = (Cn - this.Zb) / this.Qn;\n  Ce = Ce / this.Qn;\n\n  var lon;\n  var lat;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\n\n    Cn = Cn + tmp[0];\n    Ce = Ce + tmp[1];\n    Ce = Math.atan(sinh(Ce));\n\n    var sin_Cn = Math.sin(Cn);\n    var cos_Cn = Math.cos(Cn);\n    var sin_Ce = Math.sin(Ce);\n    var cos_Ce = Math.cos(Ce);\n\n    Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\n    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\n\n    lon = adjust_lon(Ce + this.long0);\n    lat = gatg(this.cgb, Cn);\n  }\n  else {\n    lon = Infinity;\n    lat = Infinity;\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\", \"Transverse_Mercator\", \"Transverse Mercator\", \"Gauss Kruger\", \"Gauss_Kruger\", \"tmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import srat from '../common/srat';\nvar MAX_ITER = 20;\nimport {HALF_PI, FORTPI} from '../constants/values';\n\nexport function init() {\n  var sphi = Math.sin(this.lat0);\n  var cphi = Math.cos(this.lat0);\n  cphi *= cphi;\n  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n  this.phic0 = Math.asin(sphi / this.C);\n  this.ratexp = 0.5 * this.C * this.e;\n  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n  p.x = this.C * lon;\n  return p;\n}\n\nexport function inverse(p) {\n  var DEL_TOL = 1e-14;\n  var lon = p.x / this.C;\n  var lat = p.y;\n  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n  for (var i = MAX_ITER; i > 0; --i) {\n    lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\n    if (Math.abs(lat - p.y) < DEL_TOL) {\n      break;\n    }\n    p.y = lat;\n  }\n  /* convergence failed */\n  if (!i) {\n    return null;\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gauss\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {\n    geodeticToGeocentric,\n    geocentricToGeodetic\n} from '../datumUtils';\n\nexport function init() {\n    this.name = 'geocent';\n\n}\n\nexport function forward(p) {\n    var point = geodeticToGeocentric(p, this.es, this.a);\n    return point;\n}\n\nexport function inverse(p) {\n    var point = geocentricToGeodetic(p, this.es, this.a, this.b);\n    return point;\n}\n\nexport var names = [\"Geocentric\", 'geocentric', \"geocent\", \"Geocent\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names\n};","import hypot from '../common/hypot';\n\nexport function init() {\n    this.flip_axis = (this.sweep === 'x' ? 1 : 0);\n    this.h = Number(this.h);\n    this.radius_g_1 = this.h / this.a;\n\n    if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) {\n        throw new Error();\n    }\n\n    this.radius_g = 1.0 + this.radius_g_1;\n    this.C = this.radius_g * this.radius_g - 1.0;\n\n    if (this.es !== 0.0) {\n        var one_es = 1.0 - this.es;\n        var rone_es = 1 / one_es;\n\n        this.radius_p = Math.sqrt(one_es);\n        this.radius_p2 = one_es;\n        this.radius_p_inv2 = rone_es;\n\n        this.shape = 'ellipse'; // Use as a condition in the forward and inverse functions.\n    } else {\n        this.radius_p = 1.0;\n        this.radius_p2 = 1.0;\n        this.radius_p_inv2 = 1.0;\n\n        this.shape = 'sphere';  // Use as a condition in the forward and inverse functions.\n    }\n\n    if (!this.title) {\n        this.title = \"Geostationary Satellite View\";\n    }\n}\n\nfunction forward(p) {\n    var lon = p.x;\n    var lat = p.y;\n    var tmp, v_x, v_y, v_z;\n    lon = lon - this.long0;\n\n    if (this.shape === 'ellipse') {\n        lat = Math.atan(this.radius_p2 * Math.tan(lat));\n        var r = this.radius_p / hypot(this.radius_p * Math.cos(lat), Math.sin(lat));\n\n        v_x = r * Math.cos(lon) * Math.cos(lat);\n        v_y = r * Math.sin(lon) * Math.cos(lat);\n        v_z = r * Math.sin(lat);\n\n        if (((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2) < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        tmp = this.radius_g - v_x;\n        if (this.flip_axis) {\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n        } else {\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n        }\n    } else if (this.shape === 'sphere') {\n        tmp = Math.cos(lat);\n        v_x = Math.cos(lon) * tmp;\n        v_y = Math.sin(lon) * tmp;\n        v_z = Math.sin(lat);\n        tmp = this.radius_g - v_x;\n\n        if (this.flip_axis) {\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n        } else {\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n        }\n    }\n    p.x = p.x * this.a;\n    p.y = p.y * this.a;\n    return p;\n}\n\nfunction inverse(p) {\n    var v_x = -1.0;\n    var v_y = 0.0;\n    var v_z = 0.0;\n    var a, b, det, k;\n\n    p.x = p.x / this.a;\n    p.y = p.y / this.a;\n\n    if (this.shape === 'ellipse') {\n        if (this.flip_axis) {\n            v_z = Math.tan(p.y / this.radius_g_1);\n            v_y = Math.tan(p.x / this.radius_g_1) * hypot(1.0, v_z);\n        } else {\n            v_y = Math.tan(p.x / this.radius_g_1);\n            v_z = Math.tan(p.y / this.radius_g_1) * hypot(1.0, v_y);\n        }\n\n        var v_zp = v_z / this.radius_p;\n        a = v_y * v_y + v_zp * v_zp + v_x * v_x;\n        b = 2 * this.radius_g * v_x;\n        det = (b * b) - 4 * a * this.C;\n\n        if (det < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\n        v_x = this.radius_g + k * v_x;\n        v_y *= k;\n        v_z *= k;\n\n        p.x = Math.atan2(v_y, v_x);\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n        p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));\n    } else if (this.shape === 'sphere') {\n        if (this.flip_axis) {\n            v_z = Math.tan(p.y / this.radius_g_1);\n            v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1.0 + v_z * v_z);\n        } else {\n            v_y = Math.tan(p.x / this.radius_g_1);\n            v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1.0 + v_y * v_y);\n        }\n\n        a = v_y * v_y + v_z * v_z + v_x * v_x;\n        b = 2 * this.radius_g * v_x;\n        det = (b * b) - 4 * a * this.C;\n        if (det < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\n        v_x = this.radius_g + k * v_x;\n        v_y *= k;\n        v_z *= k;\n\n        p.x = Math.atan2(v_y, v_x);\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n    }\n    p.x = p.x + this.long0;\n    return p;\n}\n\nexport var names = [\"Geostationary Satellite View\", \"Geostationary_Satellite\", \"geos\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names,\n};\n\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\n/*\n  reference:\n    Wolfram Mathworld \"Gnomonic Projection\"\n    http://mathworld.wolfram.com/GnomonicProjection.html\n    Accessed: 12th November 2009\n  */\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n  // Approximation for projecting points to the horizon (infinity)\n  this.infinity_dist = 1000 * this.a;\n  this.rc = 1;\n}\n\n/* Gnomonic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g;\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n  }\n  else {\n\n    // Point is in the opposing hemisphere and is unprojectable\n    // We still need to return a reasonable point, so we project\n    // to infinity, on a bearing\n    // equivalent to the northern hemisphere equivalent\n    // This is a reasonable approximation for short shapes and lines that\n    // straddle the horizon.\n\n    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* Rho */\n  var sinc, cosc;\n  var c;\n  var lon, lat;\n\n  /* Inverse equations\n      -----------------*/\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n\n  if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    c = Math.atan2(rh, this.rc);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n\n    lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\n    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n    lon = adjust_lon(this.long0 + lon);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gnom\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  this.a = 6377397.155;\n  this.es = 0.006674372230614;\n  this.e = Math.sqrt(this.es);\n  if (!this.lat0) {\n    this.lat0 = 0.863937979737193;\n  }\n  if (!this.long0) {\n    this.long0 = 0.7417649320975901 - 0.308341501185665;\n  }\n  /* if scale not set default to 0.9999 */\n  if (!this.k0) {\n    this.k0 = 0.9999;\n  }\n  this.s45 = 0.785398163397448; /* 45 */\n  this.s90 = 2 * this.s45;\n  this.fi0 = this.lat0;\n  this.e2 = this.es;\n  this.e = Math.sqrt(this.e2);\n  this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\n  this.uq = 1.04216856380474;\n  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n  this.k1 = this.k0;\n  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n  this.s0 = 1.37008346281555;\n  this.n = Math.sin(this.s0);\n  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n  this.ad = this.s90 - this.uq;\n}\n\n/* ellipsoid */\n/* calculate xy from lat/lon */\n/* Constants, identical to inverse transform function */\nexport function forward(p) {\n  var gfi, u, deltav, s, d, eps, ro;\n  var lon = p.x;\n  var lat = p.y;\n  var delta_lon = adjust_lon(lon - this.long0);\n  /* Transformation */\n  gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\n  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n  deltav = -delta_lon * this.alfa;\n  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n  eps = this.n * d;\n  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n  p.y = ro * Math.cos(eps) / 1;\n  p.x = ro * Math.sin(eps) / 1;\n\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  return (p);\n}\n\n/* calculate lat/lon from xy */\nexport function inverse(p) {\n  var u, deltav, s, d, eps, ro, fi1;\n  var ok;\n\n  /* Transformation */\n  /* revert y, x*/\n  var tmp = p.x;\n  p.x = p.y;\n  p.y = tmp;\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  ro = Math.sqrt(p.x * p.x + p.y * p.y);\n  eps = Math.atan2(p.y, p.x);\n  d = eps / Math.sin(this.s0);\n  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n  p.x = this.long0 - deltav / this.alfa;\n  fi1 = u;\n  ok = 0;\n  var iter = 0;\n  do {\n    p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n    if (Math.abs(fi1 - p.y) < 0.0000000001) {\n      ok = 1;\n    }\n    fi1 = p.y;\n    iter += 1;\n  } while (ok === 0 && iter < 15);\n  if (iter >= 15) {\n    return null;\n  }\n\n  return (p);\n}\n\nexport var names = [\"Krovak\", \"krovak\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","\nimport {HALF_PI, EPSLN, FORTPI} from '../constants/values';\n\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\nexport var S_POLE = 1;\n\nexport var N_POLE = 2;\nexport var EQUIT = 3;\nexport var OBLIQ = 4;\n\n/* Initialize the Lambert Azimuthal Equal Area projection\n  ------------------------------------------------------*/\nexport function init() {\n  var t = Math.abs(this.lat0);\n  if (Math.abs(t - HALF_PI) < EPSLN) {\n    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n  }\n  else if (Math.abs(t) < EPSLN) {\n    this.mode = this.EQUIT;\n  }\n  else {\n    this.mode = this.OBLIQ;\n  }\n  if (this.es > 0) {\n    var sinphi;\n\n    this.qp = qsfnz(this.e, 1);\n    this.mmf = 0.5 / (1 - this.es);\n    this.apa = authset(this.es);\n    switch (this.mode) {\n    case this.N_POLE:\n      this.dd = 1;\n      break;\n    case this.S_POLE:\n      this.dd = 1;\n      break;\n    case this.EQUIT:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      this.dd = 1 / this.rq;\n      this.xmf = 1;\n      this.ymf = 0.5 * this.qp;\n      break;\n    case this.OBLIQ:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      sinphi = Math.sin(this.lat0);\n      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n      this.ymf = (this.xmf = this.rq) / this.dd;\n      this.xmf *= this.dd;\n      break;\n    }\n  }\n  else {\n    if (this.mode === this.OBLIQ) {\n      this.sinph0 = Math.sin(this.lat0);\n      this.cosph0 = Math.cos(this.lat0);\n    }\n  }\n}\n\n/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n  var lam = p.x;\n  var phi = p.y;\n\n  lam = adjust_lon(lam - this.long0);\n  if (this.sphere) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    coslam = Math.cos(lam);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      if (y <= EPSLN) {\n        return null;\n      }\n      y = Math.sqrt(2 / y);\n      x = y * cosphi * Math.sin(lam);\n      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        coslam = -coslam;\n      }\n      if (Math.abs(phi + this.lat0) < EPSLN) {\n        return null;\n      }\n      y = FORTPI - phi * 0.5;\n      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n      x = y * Math.sin(lam);\n      y *= coslam;\n    }\n  }\n  else {\n    sinb = 0;\n    cosb = 0;\n    b = 0;\n    coslam = Math.cos(lam);\n    sinlam = Math.sin(lam);\n    sinphi = Math.sin(phi);\n    q = qsfnz(this.e, sinphi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinb = q / this.qp;\n      cosb = Math.sqrt(1 - sinb * sinb);\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n      break;\n    case this.EQUIT:\n      b = 1 + cosb * coslam;\n      break;\n    case this.N_POLE:\n      b = HALF_PI + phi;\n      q = this.qp - q;\n      break;\n    case this.S_POLE:\n      b = phi - HALF_PI;\n      q = this.qp + q;\n      break;\n    }\n    if (Math.abs(b) < EPSLN) {\n      return null;\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n    case this.EQUIT:\n      b = Math.sqrt(2 / b);\n      if (this.mode === this.OBLIQ) {\n        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n      }\n      else {\n        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n      }\n      x = this.xmf * b * cosb * sinlam;\n      break;\n    case this.N_POLE:\n    case this.S_POLE:\n      if (q >= 0) {\n        x = (b = Math.sqrt(q)) * sinlam;\n        y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n      }\n      else {\n        x = y = 0;\n      }\n      break;\n    }\n  }\n\n  p.x = this.a * x + this.x0;\n  p.y = this.a * y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var lam, phi, cCe, sCe, q, rho, ab;\n  if (this.sphere) {\n    var cosz = 0,\n      rh, sinz = 0;\n\n    rh = Math.sqrt(x * x + y * y);\n    phi = rh * 0.5;\n    if (phi > 1) {\n      return null;\n    }\n    phi = 2 * Math.asin(phi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinz = Math.sin(phi);\n      cosz = Math.cos(phi);\n    }\n    switch (this.mode) {\n    case this.EQUIT:\n      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n      x *= sinz;\n      y = cosz * rh;\n      break;\n    case this.OBLIQ:\n      phi = (Math.abs(rh) <= EPSLN) ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n      x *= sinz * this.cosph0;\n      y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n      break;\n    case this.N_POLE:\n      y = -y;\n      phi = HALF_PI - phi;\n      break;\n    case this.S_POLE:\n      phi -= HALF_PI;\n      break;\n    }\n    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n  }\n  else {\n    ab = 0;\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      x /= this.dd;\n      y *= this.dd;\n      rho = Math.sqrt(x * x + y * y);\n      if (rho < EPSLN) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      sCe = 2 * Math.asin(0.5 * rho / this.rq);\n      cCe = Math.cos(sCe);\n      x *= (sCe = Math.sin(sCe));\n      if (this.mode === this.OBLIQ) {\n        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n        q = this.qp * ab;\n        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n      }\n      else {\n        ab = y * sCe / rho;\n        q = this.qp * ab;\n        y = rho * cCe;\n      }\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        y = -y;\n      }\n      q = (x * x + y * y);\n      if (!q) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      ab = 1 - q / this.qp;\n      if (this.mode === this.S_POLE) {\n        ab = -ab;\n      }\n    }\n    lam = Math.atan2(x, y);\n    phi = authlat(Math.asin(ab), this.apa);\n  }\n\n  p.x = adjust_lon(this.long0 + lam);\n  p.y = phi;\n  return p;\n}\n\n/* determine latitude from authalic latitude */\nvar P00 = 0.33333333333333333333;\n\nvar P01 = 0.17222222222222222222;\nvar P02 = 0.10257936507936507936;\nvar P10 = 0.06388888888888888888;\nvar P11 = 0.06640211640211640211;\nvar P20 = 0.01641501294219154443;\n\nfunction authset(es) {\n  var t;\n  var APA = [];\n  APA[0] = es * P00;\n  t = es * es;\n  APA[0] += t * P01;\n  APA[1] = t * P10;\n  t *= es;\n  APA[0] += t * P02;\n  APA[1] += t * P11;\n  APA[2] = t * P20;\n  return APA;\n}\n\nfunction authlat(beta, APA) {\n  var t = beta + beta;\n  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n}\n\nexport var names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  S_POLE: S_POLE,\n  N_POLE: N_POLE,\n  EQUIT: EQUIT,\n  OBLIQ: OBLIQ\n};\n","import msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport sign from '../common/sign';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {HALF_PI, EPSLN} from '../constants/values';\nexport function init() {\n  \n  //double lat0;                    /* the reference latitude               */\n  //double long0;                   /* the reference longitude              */\n  //double lat1;                    /* first standard parallel              */\n  //double lat2;                    /* second standard parallel             */\n  //double r_maj;                   /* major axis                           */\n  //double r_min;                   /* minor axis                           */\n  //double false_east;              /* x offset in meters                   */\n  //double false_north;             /* y offset in meters                   */\n  \n  //the above value can be set with proj4.defs\n  //example: proj4.defs(\"EPSG:2154\",\"+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\");\n\n  if (!this.lat2) {\n    this.lat2 = this.lat1;\n  } //if lat2 is not defined\n  if (!this.k0) {\n    this.k0 = 1;\n  }\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  var temp = this.b / this.a;\n  this.e = Math.sqrt(1 - temp * temp);\n\n  var sin1 = Math.sin(this.lat1);\n  var cos1 = Math.cos(this.lat1);\n  var ms1 = msfnz(this.e, sin1, cos1);\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n  var sin2 = Math.sin(this.lat2);\n  var cos2 = Math.cos(this.lat2);\n  var ms2 = msfnz(this.e, sin2, cos2);\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n  }\n  else {\n    this.ns = sin1;\n  }\n  if (isNaN(this.ns)) {\n    this.ns = sin1;\n  }\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n  if (!this.title) {\n    this.title = \"Lambert Conformal Conic\";\n  }\n}\n\n// Lambert Conformal conic forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  // singular cases :\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n  }\n\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\n  var ts, rh1;\n  if (con > EPSLN) {\n    ts = tsfnz(this.e, lat, Math.sin(lat));\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n  }\n  else {\n    con = lat * this.ns;\n    if (con <= 0) {\n      return null;\n    }\n    rh1 = 0;\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n  return p;\n}\n\n// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var rh1, con, ts;\n  var lat, lon;\n  var x = (p.x - this.x0) / this.k0;\n  var y = (this.rh - (p.y - this.y0) / this.k0);\n  if (this.ns > 0) {\n    rh1 = Math.sqrt(x * x + y * y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(x * x + y * y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2((con * x), (con * y));\n  }\n  if ((rh1 !== 0) || (this.ns > 0)) {\n    con = 1 / this.ns;\n    ts = Math.pow((rh1 / (this.a * this.f0)), con);\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  else {\n    lat = -HALF_PI;\n  }\n  lon = adjust_lon(theta / this.ns + this.long0);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\n  \"Lambert Tangential Conformal Conic Projection\",\n  \"Lambert_Conformal_Conic\",\n  \"Lambert_Conformal_Conic_1SP\",\n  \"Lambert_Conformal_Conic_2SP\",\n  \"lcc\",\n  \"Lambert Conic Conformal (1SP)\",\n  \"Lambert Conic Conformal (2SP)\"\n];\n\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export function init() {\n  //no-op for longlat\n}\n\nfunction identity(pt) {\n  return pt;\n}\nexport {identity as forward};\nexport {identity as inverse};\nexport var names = [\"longlat\", \"identity\"];\nexport default {\n  init: init,\n  forward: identity,\n  inverse: identity,\n  names: names\n};\n","import msfnz from '../common/msfnz';\n\nimport adjust_lon from '../common/adjust_lon';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport {FORTPI, R2D, EPSLN, HALF_PI} from '../constants/values';\nexport function init() {\n  var con = this.b / this.a;\n  this.es = 1 - con * con;\n  if(!('x0' in this)){\n    this.x0 = 0;\n  }\n  if(!('y0' in this)){\n    this.y0 = 0;\n  }\n  this.e = Math.sqrt(this.es);\n  if (this.lat_ts) {\n    if (this.sphere) {\n      this.k0 = Math.cos(this.lat_ts);\n    }\n    else {\n      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n    }\n  }\n  else {\n    if (!this.k0) {\n      if (this.k) {\n        this.k0 = this.k;\n      }\n      else {\n        this.k0 = 1;\n      }\n    }\n  }\n}\n\n/* Mercator forward equations--mapping lat,long to x,y\n  --------------------------------------------------*/\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  // convert to radians\n  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n    return null;\n  }\n\n  var x, y;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    return null;\n  }\n  else {\n    if (this.sphere) {\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n    }\n    else {\n      var sinphi = Math.sin(lat);\n      var ts = tsfnz(this.e, lat, sinphi);\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 - this.a * this.k0 * Math.log(ts);\n    }\n    p.x = x;\n    p.y = y;\n    return p;\n  }\n}\n\n/* Mercator inverse equations--mapping x,y to lat/long\n  --------------------------------------------------*/\nexport function inverse(p) {\n\n  var x = p.x - this.x0;\n  var y = p.y - this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n  }\n  else {\n    var ts = Math.exp(-y / (this.a * this.k0));\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\n\n/* Initialize the Miller Cylindrical projection\n  -------------------------------------------*/\nexport function init() {\n  //no-op\n}\n\n/* Miller Cylindrical forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x = this.x0 + this.a * dlon;\n  var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Miller Cylindrical inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n\n  var lon = adjust_lon(this.long0 + p.x / this.a);\n  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Miller_Cylindrical\", \"mill\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nexport function init() {}\nimport {EPSLN} from '../constants/values';\n/* Mollweide forward equations--mapping lat,long to x,y\n    ----------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var theta = lat;\n  var con = Math.PI * Math.sin(lat);\n\n  /* Iterate using the Newton-Raphson method to find theta\n      -----------------------------------------------------*/\n  while (true) {\n    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n    theta += delta_theta;\n    if (Math.abs(delta_theta) < EPSLN) {\n      break;\n    }\n  }\n  theta /= 2;\n\n  /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n       this is done here because of precision problems with \"cos(theta)\"\n       --------------------------------------------------------------------------*/\n  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n    delta_lon = 0;\n  }\n  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var theta;\n  var arg;\n\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  arg = p.y / (1.4142135623731 * this.a);\n\n  /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n       a number very close to one is used instead.\n       -------------------------------------------------------------------*/\n  if (Math.abs(arg) > 0.999999999999) {\n    arg = 0.999999999999;\n  }\n  theta = Math.asin(arg);\n  var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\n  if (lon < (-Math.PI)) {\n    lon = -Math.PI;\n  }\n  if (lon > Math.PI) {\n    lon = Math.PI;\n  }\n  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n  if (Math.abs(arg) > 1) {\n    arg = 1;\n  }\n  var lat = Math.asin(arg);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mollweide\", \"moll\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {SEC_TO_RAD} from '../constants/values';\n\n/*\n  reference\n    Department of Land and Survey Technical Circular 1973/32\n      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n    OSG Technical Report 4.1\n      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n  */\n\n/**\n * iterations: Number of iterations to refine inverse transform.\n *     0 -> km accuracy\n *     1 -> m accuracy -- suitable for most mapping applications\n *     2 -> mm accuracy\n */\nexport var iterations = 1;\n\nexport function init() {\n  this.A = [];\n  this.A[1] = 0.6399175073;\n  this.A[2] = -0.1358797613;\n  this.A[3] = 0.063294409;\n  this.A[4] = -0.02526853;\n  this.A[5] = 0.0117879;\n  this.A[6] = -0.0055161;\n  this.A[7] = 0.0026906;\n  this.A[8] = -0.001333;\n  this.A[9] = 0.00067;\n  this.A[10] = -0.00034;\n\n  this.B_re = [];\n  this.B_im = [];\n  this.B_re[1] = 0.7557853228;\n  this.B_im[1] = 0;\n  this.B_re[2] = 0.249204646;\n  this.B_im[2] = 0.003371507;\n  this.B_re[3] = -0.001541739;\n  this.B_im[3] = 0.041058560;\n  this.B_re[4] = -0.10162907;\n  this.B_im[4] = 0.01727609;\n  this.B_re[5] = -0.26623489;\n  this.B_im[5] = -0.36249218;\n  this.B_re[6] = -0.6870983;\n  this.B_im[6] = -1.1651967;\n\n  this.C_re = [];\n  this.C_im = [];\n  this.C_re[1] = 1.3231270439;\n  this.C_im[1] = 0;\n  this.C_re[2] = -0.577245789;\n  this.C_im[2] = -0.007809598;\n  this.C_re[3] = 0.508307513;\n  this.C_im[3] = -0.112208952;\n  this.C_re[4] = -0.15094762;\n  this.C_im[4] = 0.18200602;\n  this.C_re[5] = 1.01418179;\n  this.C_im[5] = 1.64497696;\n  this.C_re[6] = 1.9660549;\n  this.C_im[6] = 2.5127645;\n\n  this.D = [];\n  this.D[1] = 1.5627014243;\n  this.D[2] = 0.5185406398;\n  this.D[3] = -0.03333098;\n  this.D[4] = -0.1052906;\n  this.D[5] = -0.0368594;\n  this.D[6] = 0.007317;\n  this.D[7] = 0.01220;\n  this.D[8] = 0.00394;\n  this.D[9] = -0.0013;\n}\n\n/**\n    New Zealand Map Grid Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var n;\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lat = lat - this.lat0;\n  var delta_lon = lon - this.long0;\n\n  // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n  // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n  var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n  var d_lambda = delta_lon;\n  var d_phi_n = 1; // d_phi^0\n\n  var d_psi = 0;\n  for (n = 1; n <= 10; n++) {\n    d_phi_n = d_phi_n * d_phi;\n    d_psi = d_psi + this.A[n] * d_phi_n;\n  }\n\n  // 2. Calculate theta\n  var th_re = d_psi;\n  var th_im = d_lambda;\n\n  // 3. Calculate z\n  var th_n_re = 1;\n  var th_n_im = 0; // theta^0\n  var th_n_re1;\n  var th_n_im1;\n\n  var z_re = 0;\n  var z_im = 0;\n  for (n = 1; n <= 6; n++) {\n    th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n    th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n    th_n_re = th_n_re1;\n    th_n_im = th_n_im1;\n    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n  }\n\n  // 4. Calculate easting and northing\n  p.x = (z_im * this.a) + this.x0;\n  p.y = (z_re * this.a) + this.y0;\n\n  return p;\n}\n\n/**\n    New Zealand Map Grid Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var n;\n  var x = p.x;\n  var y = p.y;\n\n  var delta_x = x - this.x0;\n  var delta_y = y - this.y0;\n\n  // 1. Calculate z\n  var z_re = delta_y / this.a;\n  var z_im = delta_x / this.a;\n\n  // 2a. Calculate theta - first approximation gives km accuracy\n  var z_n_re = 1;\n  var z_n_im = 0; // z^0\n  var z_n_re1;\n  var z_n_im1;\n\n  var th_re = 0;\n  var th_im = 0;\n  for (n = 1; n <= 6; n++) {\n    z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n    z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n    z_n_re = z_n_re1;\n    z_n_im = z_n_im1;\n    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n  }\n\n  // 2b. Iterate to refine the accuracy of the calculation\n  //        0 iterations gives km accuracy\n  //        1 iteration gives m accuracy -- good enough for most mapping applications\n  //        2 iterations bives mm accuracy\n  for (var i = 0; i < this.iterations; i++) {\n    var th_n_re = th_re;\n    var th_n_im = th_im;\n    var th_n_re1;\n    var th_n_im1;\n\n    var num_re = z_re;\n    var num_im = z_im;\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    th_n_re = 1;\n    th_n_im = 0;\n    var den_re = this.B_re[1];\n    var den_im = this.B_im[1];\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    // Complex division\n    var den2 = den_re * den_re + den_im * den_im;\n    th_re = (num_re * den_re + num_im * den_im) / den2;\n    th_im = (num_im * den_re - num_re * den_im) / den2;\n  }\n\n  // 3. Calculate d_phi              ...                                    // and d_lambda\n  var d_psi = th_re;\n  var d_lambda = th_im;\n  var d_psi_n = 1; // d_psi^0\n\n  var d_phi = 0;\n  for (n = 1; n <= 9; n++) {\n    d_psi_n = d_psi_n * d_psi;\n    d_phi = d_phi + this.D[n] * d_psi_n;\n  }\n\n  // 4. Calculate latitude and longitude\n  // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n  var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\n  var lon = this.long0 + d_lambda;\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"New_Zealand_Map_Grid\", \"nzmg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import tsfnz from '../common/tsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport { D2R, EPSLN, HALF_PI, TWO_PI, FORTPI } from '../constants/values';\n\nvar TOL = 1e-7;\n\nfunction isTypeA(P) {\n  var typeAProjections = ['Hotine_Oblique_Mercator','Hotine_Oblique_Mercator_Azimuth_Natural_Origin'];\n  var projectionName = typeof P.PROJECTION === \"object\" ? Object.keys(P.PROJECTION)[0] : P.PROJECTION;\n  \n  return 'no_uoff' in P || 'no_off' in P || typeAProjections.indexOf(projectionName) !== -1;\n}\n\n\n/* Initialize the Oblique Mercator  projection\n    ------------------------------------------*/\nexport function init() {  \n  var con, com, cosph0, D, F, H, L, sinph0, p, J, gamma = 0,\n    gamma0, lamc = 0, lam1 = 0, lam2 = 0, phi1 = 0, phi2 = 0, alpha_c = 0, AB;\n  \n  // only Type A uses the no_off or no_uoff property\n  // https://github.com/OSGeo/proj.4/issues/104\n  this.no_off = isTypeA(this);\n  this.no_rot = 'no_rot' in this;\n  \n  var alp = false;\n  if (\"alpha\" in this) {\n    alp = true;\n  }\n\n  var gam = false;\n  if (\"rectified_grid_angle\" in this) {\n    gam = true;\n  }\n\n  if (alp) {\n    alpha_c = this.alpha;\n  }\n  \n  if (gam) {\n    gamma = (this.rectified_grid_angle * D2R);\n  }\n  \n  if (alp || gam) {\n    lamc = this.longc;\n  } else {\n    lam1 = this.long1;\n    phi1 = this.lat1;\n    lam2 = this.long2;\n    phi2 = this.lat2;\n    \n    if (Math.abs(phi1 - phi2) <= TOL || (con = Math.abs(phi1)) <= TOL ||\n        Math.abs(con - HALF_PI) <= TOL || Math.abs(Math.abs(this.lat0) - HALF_PI) <= TOL ||\n        Math.abs(Math.abs(phi2) - HALF_PI) <= TOL) {\n      throw new Error();\n    }\n  }\n  \n  var one_es = 1.0 - this.es;\n  com = Math.sqrt(one_es);\n  \n  if (Math.abs(this.lat0) > EPSLN) {\n    sinph0 = Math.sin(this.lat0);\n    cosph0 = Math.cos(this.lat0);\n    con = 1 - this.es * sinph0 * sinph0;\n    this.B = cosph0 * cosph0;\n    this.B = Math.sqrt(1 + this.es * this.B * this.B / one_es);\n    this.A = this.B * this.k0 * com / con;\n    D = this.B * com / (cosph0 * Math.sqrt(con));\n    F = D * D -1;\n    \n    if (F <= 0) {\n      F = 0;\n    } else {\n      F = Math.sqrt(F);\n      if (this.lat0 < 0) {\n        F = -F;\n      }\n    }\n    \n    this.E = F += D;\n    this.E *= Math.pow(tsfnz(this.e, this.lat0, sinph0), this.B);\n  } else {\n    this.B = 1 / com;\n    this.A = this.k0;\n    this.E = D = F = 1;\n  }\n  \n  if (alp || gam) {\n    if (alp) {\n      gamma0 = Math.asin(Math.sin(alpha_c) / D);\n      if (!gam) {\n        gamma = alpha_c;\n      }\n    } else {\n      gamma0 = gamma;\n      alpha_c = Math.asin(D * Math.sin(gamma0));\n    }\n    this.lam0 = lamc - Math.asin(0.5 * (F - 1 / F) * Math.tan(gamma0)) / this.B;\n  } else {\n    H = Math.pow(tsfnz(this.e, phi1, Math.sin(phi1)), this.B);\n    L = Math.pow(tsfnz(this.e, phi2, Math.sin(phi2)), this.B);\n    F = this.E / H;\n    p = (L - H) / (L + H);\n    J = this.E * this.E;\n    J = (J - L * H) / (J + L * H);\n    con = lam1 - lam2;\n    \n    if (con < -Math.pi) {\n      lam2 -=TWO_PI;\n    } else if (con > Math.pi) {\n      lam2 += TWO_PI;\n    }\n    \n    this.lam0 = adjust_lon(0.5 * (lam1 + lam2) - Math.atan(J * Math.tan(0.5 * this.B * (lam1 - lam2)) / p) / this.B);\n    gamma0 = Math.atan(2 * Math.sin(this.B * adjust_lon(lam1 - this.lam0)) / (F - 1 / F));\n    gamma = alpha_c = Math.asin(D * Math.sin(gamma0));\n  }\n  \n  this.singam = Math.sin(gamma0);\n  this.cosgam = Math.cos(gamma0);\n  this.sinrot = Math.sin(gamma);\n  this.cosrot = Math.cos(gamma);\n  \n  this.rB = 1 / this.B;\n  this.ArB = this.A * this.rB;\n  this.BrA = 1 / this.ArB;\n  AB = this.A * this.B;\n  \n  if (this.no_off) {\n    this.u_0 = 0;\n  } else {\n    this.u_0 = Math.abs(this.ArB * Math.atan(Math.sqrt(D * D - 1) / Math.cos(alpha_c)));\n    \n    if (this.lat0 < 0) {\n      this.u_0 = - this.u_0;\n    }  \n  }\n    \n  F = 0.5 * gamma0;\n  this.v_pole_n = this.ArB * Math.log(Math.tan(FORTPI - F));\n  this.v_pole_s = this.ArB * Math.log(Math.tan(FORTPI + F));\n}\n\n\n/* Oblique Mercator forward equations--mapping lat,long to x,y\n    ----------------------------------------------------------*/\nexport function forward(p) {\n  var coords = {};\n  var S, T, U, V, W, temp, u, v;\n  p.x = p.x - this.lam0;\n  \n  if (Math.abs(Math.abs(p.y) - HALF_PI) > EPSLN) {\n    W = this.E / Math.pow(tsfnz(this.e, p.y, Math.sin(p.y)), this.B);\n    \n    temp = 1 / W;\n    S = 0.5 * (W - temp);\n    T = 0.5 * (W + temp);\n    V = Math.sin(this.B * p.x);\n    U = (S * this.singam - V * this.cosgam) / T;\n        \n    if (Math.abs(Math.abs(U) - 1.0) < EPSLN) {\n      throw new Error();\n    }\n    \n    v = 0.5 * this.ArB * Math.log((1 - U)/(1 + U));\n    temp = Math.cos(this.B * p.x);\n    \n    if (Math.abs(temp) < TOL) {\n      u = this.A * p.x;\n    } else {\n      u = this.ArB * Math.atan2((S * this.cosgam + V * this.singam), temp);\n    }    \n  } else {\n    v = p.y > 0 ? this.v_pole_n : this.v_pole_s;\n    u = this.ArB * p.y;\n  }\n     \n  if (this.no_rot) {\n    coords.x = u;\n    coords.y = v;\n  } else {\n    u -= this.u_0;\n    coords.x = v * this.cosrot + u * this.sinrot;\n    coords.y = u * this.cosrot - v * this.sinrot;\n  }\n  \n  coords.x = (this.a * coords.x + this.x0);\n  coords.y = (this.a * coords.y + this.y0);\n  \n  return coords;\n}\n\nexport function inverse(p) {\n  var u, v, Qp, Sp, Tp, Vp, Up;\n  var coords = {};\n  \n  p.x = (p.x - this.x0) * (1.0 / this.a);\n  p.y = (p.y - this.y0) * (1.0 / this.a);\n\n  if (this.no_rot) {\n    v = p.y;\n    u = p.x;\n  } else {\n    v = p.x * this.cosrot - p.y * this.sinrot;\n    u = p.y * this.cosrot + p.x * this.sinrot + this.u_0;\n  }\n  \n  Qp = Math.exp(-this.BrA * v);\n  Sp = 0.5 * (Qp - 1 / Qp);\n  Tp = 0.5 * (Qp + 1 / Qp);\n  Vp = Math.sin(this.BrA * u);\n  Up = (Vp * this.cosgam + Sp * this.singam) / Tp;\n  \n  if (Math.abs(Math.abs(Up) - 1) < EPSLN) {\n    coords.x = 0;\n    coords.y = Up < 0 ? -HALF_PI : HALF_PI;\n  } else {\n    coords.y = this.E / Math.sqrt((1 + Up) / (1 - Up));\n    coords.y = phi2z(this.e, Math.pow(coords.y, 1 / this.B));\n    \n    if (coords.y === Infinity) {\n      throw new Error();\n    }\n        \n    coords.x = -this.rB * Math.atan2((Sp * this.cosgam - Vp * this.singam), Math.cos(this.BrA * u));\n  }\n  \n  coords.x += this.lam0;\n  \n  return coords;\n}\n\nexport var names = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Two_Point_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"Oblique_Mercator\", \"omerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nexport function init() {\n  //double temp;      /* temporary variable    */\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n}\n\n/* Orthographic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g, x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.a * ksp * cosphi * Math.sin(dlon);\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* height above ellipsoid      */\n  var z; /* angle          */\n  var sinz, cosz; /* sin of z and cos of z      */\n  var con;\n  var lon, lat;\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  z = asinz(rh / this.a);\n\n  sinz = Math.sin(z);\n  cosz = Math.cos(z);\n\n  lon = this.long0;\n  if (Math.abs(rh) <= EPSLN) {\n    lat = this.lat0;\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n  con = Math.abs(this.lat0) - HALF_PI;\n  if (Math.abs(con) <= EPSLN) {\n    if (this.lat0 >= 0) {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n    }\n    else {\n      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"ortho\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport mlfn from '../common/mlfn';\nimport {EPSLN} from '../constants/values';\n\nimport gN from '../common/gN';\nvar MAX_ITER = 20;\n\nexport function init() {\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n}\n\n/* Polyconic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y, el;\n  var dlon = adjust_lon(lon - this.long0);\n  el = dlon * Math.sin(lat);\n  if (this.sphere) {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.a * this.lat0;\n    }\n    else {\n      x = this.a * Math.sin(el) / Math.tan(lat);\n      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n    }\n  }\n  else {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.ml0;\n    }\n    else {\n      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n      x = nl * Math.sin(el);\n      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n    }\n\n  }\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  var lon, lat, x, y, i;\n  var al, bl;\n  var phi, dphi;\n  x = p.x - this.x0;\n  y = p.y - this.y0;\n\n  if (this.sphere) {\n    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n      lon = adjust_lon(x / this.a + this.long0);\n      lat = 0;\n    }\n    else {\n      al = this.lat0 + y / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var tanphi;\n      for (i = MAX_ITER; i; --i) {\n        tanphi = Math.tan(phi);\n        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n        phi += dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n    }\n  }\n  else {\n    if (Math.abs(y + this.ml0) <= EPSLN) {\n      lat = 0;\n      lon = adjust_lon(this.long0 + x / this.a);\n    }\n    else {\n\n      al = (this.ml0 + y) / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var cl, mln, mlnp, ma;\n      var con;\n      for (i = MAX_ITER; i; --i) {\n        con = this.e * Math.sin(phi);\n        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n        ma = mln / this.a;\n        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n        phi -= dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n\n      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Polyconic\", \"poly\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","// QSC projection rewritten from the original PROJ4\n// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\n\nimport {EPSLN, TWO_PI, SPI, HALF_PI, FORTPI} from '../constants/values';\n\n/* constants */\nvar FACE_ENUM = {\n    FRONT: 1,\n    RIGHT: 2,\n    BACK: 3,\n    LEFT: 4,\n    TOP: 5,\n    BOTTOM: 6\n};\n\nvar AREA_ENUM = {\n    AREA_0: 1,\n    AREA_1: 2,\n    AREA_2: 3,\n    AREA_3: 4\n};\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Quadrilateralized Spherical Cube\";\n\n  /* Determine the cube face from the center of projection. */\n  if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\n    this.face = FACE_ENUM.TOP;\n  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\n    this.face = FACE_ENUM.BOTTOM;\n  } else if (Math.abs(this.long0) <= FORTPI) {\n    this.face = FACE_ENUM.FRONT;\n  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\n    this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\n  } else {\n    this.face = FACE_ENUM.BACK;\n  }\n\n  /* Fill in useful values for the ellipsoid <-> sphere shift\n   * described in [LK12]. */\n  if (this.es !== 0) {\n    this.one_minus_f = 1 - (this.a - this.b) / this.a;\n    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\n  }\n}\n\n// QSC forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n  var xy = {x: 0, y: 0};\n  var lat, lon;\n  var theta, phi;\n  var t, mu;\n  /* nu; */\n  var area = {value: 0};\n\n  // move lon according to projection's lon\n  p.x -= this.long0;\n\n  /* Convert the geodetic latitude to a geocentric latitude.\n   * This corresponds to the shift from the ellipsoid to the sphere\n   * described in [LK12]. */\n  if (this.es !== 0) {//if (P->es != 0) {\n    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\n  } else {\n    lat = p.y;\n  }\n\n  /* Convert the input lat, lon into theta, phi as used by QSC.\n   * This depends on the cube face and the area on it.\n   * For the top and bottom face, we can compute theta and phi\n   * directly from phi, lam. For the other faces, we must use\n   * unit sphere cartesian coordinates as an intermediate step. */\n  lon = p.x; //lon = lp.lam;\n  if (this.face === FACE_ENUM.TOP) {\n    phi = HALF_PI - lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = lon - HALF_PI;\n    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = (lon > 0.0 ? lon - SPI : lon + SPI);\n    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = lon + HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = lon;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = HALF_PI + lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = -lon + HALF_PI;\n    } else if (lon < FORTPI && lon >= -FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = -lon;\n    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = -lon - HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\n    }\n  } else {\n    var q, r, s;\n    var sinlat, coslat;\n    var sinlon, coslon;\n\n    if (this.face === FACE_ENUM.RIGHT) {\n      lon = qsc_shift_lon_origin(lon, +HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lon = qsc_shift_lon_origin(lon, +SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lon = qsc_shift_lon_origin(lon, -HALF_PI);\n    }\n    sinlat = Math.sin(lat);\n    coslat = Math.cos(lat);\n    sinlon = Math.sin(lon);\n    coslon = Math.cos(lon);\n    q = coslat * coslon;\n    r = coslat * sinlon;\n    s = sinlat;\n\n    if (this.face === FACE_ENUM.FRONT) {\n      phi = Math.acos(q);\n      theta = qsc_fwd_equat_face_theta(phi, s, r, area);\n    } else if (this.face === FACE_ENUM.RIGHT) {\n      phi = Math.acos(r);\n      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\n    } else if (this.face === FACE_ENUM.BACK) {\n      phi = Math.acos(-q);\n      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      phi = Math.acos(-r);\n      theta = qsc_fwd_equat_face_theta(phi, s, q, area);\n    } else {\n      /* Impossible */\n      phi = theta = 0;\n      area.value = AREA_ENUM.AREA_0;\n    }\n  }\n\n  /* Compute mu and nu for the area of definition.\n   * For mu, see Eq. (3-21) in [OL76], but note the typos:\n   * compare with Eq. (3-14). For nu, see Eq. (3-38). */\n  mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\n  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\n\n  /* Apply the result to the real area. */\n  if (area.value === AREA_ENUM.AREA_1) {\n    mu += HALF_PI;\n  } else if (area.value === AREA_ENUM.AREA_2) {\n    mu += SPI;\n  } else if (area.value === AREA_ENUM.AREA_3) {\n    mu += 1.5 * SPI;\n  }\n\n  /* Now compute x, y from mu and nu */\n  xy.x = t * Math.cos(mu);\n  xy.y = t * Math.sin(mu);\n  xy.x = xy.x * this.a + this.x0;\n  xy.y = xy.y * this.a + this.y0;\n\n  p.x = xy.x;\n  p.y = xy.y;\n  return p;\n}\n\n// QSC inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n  var lp = {lam: 0, phi: 0};\n  var mu, nu, cosmu, tannu;\n  var tantheta, theta, cosphi, phi;\n  var t;\n  var area = {value: 0};\n\n  /* de-offset */\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  /* Convert the input x, y to the mu and nu angles as used by QSC.\n   * This depends on the area of the cube face. */\n  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\n  mu = Math.atan2(p.y, p.x);\n  if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_0;\n  } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\n    area.value = AREA_ENUM.AREA_1;\n    mu -= HALF_PI;\n  } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_2;\n    mu = (mu < 0.0 ? mu + SPI : mu - SPI);\n  } else {\n    area.value = AREA_ENUM.AREA_3;\n    mu += HALF_PI;\n  }\n\n  /* Compute phi and theta for the area of definition.\n   * The inverse projection is not described in the original paper, but some\n   * good hints can be found here (as of 2011-12-14):\n   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\n   * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\n  t = (SPI / 12) * Math.tan(mu);\n  tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\n  theta = Math.atan(tantheta);\n  cosmu = Math.cos(mu);\n  tannu = Math.tan(nu);\n  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\n  if (cosphi < -1) {\n    cosphi = -1;\n  } else if (cosphi > +1) {\n    cosphi = +1;\n  }\n\n  /* Apply the result to the real area on the cube face.\n   * For the top and bottom face, we can compute phi and lam directly.\n   * For the other faces, we must use unit sphere cartesian coordinates\n   * as an intermediate step. */\n  if (this.face === FACE_ENUM.TOP) {\n    phi = Math.acos(cosphi);\n    lp.phi = HALF_PI - phi;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = theta;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = Math.acos(cosphi);\n    lp.phi = phi - HALF_PI;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = -theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = -theta;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = -theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\n    }\n  } else {\n    /* Compute phi and lam via cartesian unit sphere coordinates. */\n    var q, r, s;\n    q = cosphi;\n    t = q * q;\n    if (t >= 1) {\n      s = 0;\n    } else {\n      s = Math.sqrt(1 - t) * Math.sin(theta);\n    }\n    t += s * s;\n    if (t >= 1) {\n      r = 0;\n    } else {\n      r = Math.sqrt(1 - t);\n    }\n    /* Rotate q,r,s into the correct area. */\n    if (area.value === AREA_ENUM.AREA_1) {\n      t = r;\n      r = -s;\n      s = t;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      r = -r;\n      s = -s;\n    } else if (area.value === AREA_ENUM.AREA_3) {\n      t = r;\n      r = s;\n      s = -t;\n    }\n    /* Rotate q,r,s into the correct cube face. */\n    if (this.face === FACE_ENUM.RIGHT) {\n      t = q;\n      q = -r;\n      r = t;\n    } else if (this.face === FACE_ENUM.BACK) {\n      q = -q;\n      r = -r;\n    } else if (this.face === FACE_ENUM.LEFT) {\n      t = q;\n      q = r;\n      r = -t;\n    }\n    /* Now compute phi and lam from the unit sphere coordinates. */\n    lp.phi = Math.acos(-s) - HALF_PI;\n    lp.lam = Math.atan2(r, q);\n    if (this.face === FACE_ENUM.RIGHT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\n    }\n  }\n\n  /* Apply the shift from the sphere to the ellipsoid as described\n   * in [LK12]. */\n  if (this.es !== 0) {\n    var invert_sign;\n    var tanphi, xa;\n    invert_sign = (lp.phi < 0 ? 1 : 0);\n    tanphi = Math.tan(lp.phi);\n    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\n    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\n    if (invert_sign) {\n      lp.phi = -lp.phi;\n    }\n  }\n\n  lp.lam += this.long0;\n  p.x = lp.lam;\n  p.y = lp.phi;\n  return p;\n}\n\n/* Helper function for forward projection: compute the theta angle\n * and determine the area number. */\nfunction qsc_fwd_equat_face_theta(phi, y, x, area) {\n  var theta;\n  if (phi < EPSLN) {\n    area.value = AREA_ENUM.AREA_0;\n    theta = 0.0;\n  } else {\n    theta = Math.atan2(y, x);\n    if (Math.abs(theta) <= FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta -= HALF_PI;\n    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta += HALF_PI;\n    }\n  }\n  return theta;\n}\n\n/* Helper function: shift the longitude. */\nfunction qsc_shift_lon_origin(lon, offset) {\n  var slon = lon + offset;\n  if (slon < -SPI) {\n    slon += TWO_PI;\n  } else if (slon > +SPI) {\n    slon -= TWO_PI;\n  }\n  return slon;\n}\n\nexport var names = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n\n","// Robinson projection\n// Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c\n// Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039\n\nimport {HALF_PI, D2R, R2D, EPSLN} from '../constants/values';\nimport adjust_lon from '../common/adjust_lon';\n\nvar COEFS_X = [\n    [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],\n    [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],\n    [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],\n    [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],\n    [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],\n    [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],\n    [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],\n    [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],\n    [0.9216, -0.00467746, -0.00010457, 4.81243e-06],\n    [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],\n    [0.8679, -0.00609363, -0.000113898, 3.32484e-06],\n    [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],\n    [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],\n    [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],\n    [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],\n    [0.6732, -0.00986209, -0.000199569, 1.91974e-05],\n    [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],\n    [0.5722, -0.00906601, 0.000182, 6.24051e-06],\n    [0.5322, -0.00677797, 0.000275608, 6.24051e-06]\n];\n\nvar COEFS_Y = [\n    [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],\n    [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],\n    [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],\n    [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],\n    [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],\n    [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],\n    [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],\n    [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],\n    [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],\n    [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],\n    [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],\n    [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],\n    [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],\n    [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],\n    [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],\n    [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],\n    [0.9394, 0.00840947, -0.000192841, -4.2106e-06],\n    [0.9761, 0.00616527, -0.000256, -4.2106e-06],\n    [1.0000, 0.00328947, -0.000319159, -4.2106e-06]\n];\n\nvar FXC = 0.8487;\nvar FYC = 1.3523;\nvar C1 = R2D/5; // rad to 5-degree interval\nvar RC1 = 1/C1;\nvar NODES = 18;\n\nvar poly3_val = function(coefs, x) {\n    return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));\n};\n\nvar poly3_der = function(coefs, x) {\n    return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);\n};\n\nfunction newton_rapshon(f_df, start, max_err, iters) {\n    var x = start;\n    for (; iters; --iters) {\n        var upd = f_df(x);\n        x -= upd;\n        if (Math.abs(upd) < max_err) {\n            break;\n        }\n    }\n    return x;\n}\n\nexport function init() {\n    this.x0 = this.x0 || 0;\n    this.y0 = this.y0 || 0;\n    this.long0 = this.long0 || 0;\n    this.es = 0;\n    this.title = this.title || \"Robinson\";\n}\n\nexport function forward(ll) {\n    var lon = adjust_lon(ll.x - this.long0);\n\n    var dphi = Math.abs(ll.y);\n    var i = Math.floor(dphi * C1);\n    if (i < 0) {\n        i = 0;\n    } else if (i >= NODES) {\n        i = NODES - 1;\n    }\n    dphi = R2D * (dphi - RC1 * i);\n    var xy = {\n        x: poly3_val(COEFS_X[i], dphi) * lon,\n        y: poly3_val(COEFS_Y[i], dphi)\n    };\n    if (ll.y < 0) {\n        xy.y = -xy.y;\n    }\n\n    xy.x = xy.x * this.a * FXC + this.x0;\n    xy.y = xy.y * this.a * FYC + this.y0;\n    return xy;\n}\n\nexport function inverse(xy) {\n    var ll = {\n        x: (xy.x - this.x0) / (this.a * FXC),\n        y: Math.abs(xy.y - this.y0) / (this.a * FYC)\n    };\n\n    if (ll.y >= 1) { // pathologic case\n        ll.x /= COEFS_X[NODES][0];\n        ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;\n    } else {\n        // find table interval\n        var i = Math.floor(ll.y * NODES);\n        if (i < 0) {\n            i = 0;\n        } else if (i >= NODES) {\n            i = NODES - 1;\n        }\n        for (;;) {\n            if (COEFS_Y[i][0] > ll.y) {\n                --i;\n            } else if (COEFS_Y[i+1][0] <= ll.y) {\n                ++i;\n            } else {\n                break;\n            }\n        }\n        // linear interpolation in 5 degree interval\n        var coefs = COEFS_Y[i];\n        var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);\n        // find t so that poly3_val(coefs, t) = ll.y\n        t = newton_rapshon(function(x) {\n            return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);\n        }, t, EPSLN, 100);\n\n        ll.x /= poly3_val(COEFS_X[i], t);\n        ll.y = (5 * i + t) * D2R;\n        if (xy.y < 0) {\n            ll.y = -ll.y;\n        }\n    }\n\n    ll.x = adjust_lon(ll.x + this.long0);\n    return ll;\n}\n\nexport var names = [\"Robinson\", \"robin\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport pj_enfn from '../common/pj_enfn';\nvar MAX_ITER = 20;\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n\nexport function init() {\n  /* Place parameters in static storage for common use\n    -------------------------------------------------*/\n\n\n  if (!this.sphere) {\n    this.en = pj_enfn(this.es);\n  }\n  else {\n    this.n = 1;\n    this.m = 0;\n    this.es = 0;\n    this.C_y = Math.sqrt((this.m + 1) / this.n);\n    this.C_x = this.C_y / (this.m + 1);\n  }\n\n}\n\n/* Sinusoidal forward equations--mapping lat,long to x,y\n  -----------------------------------------------------*/\nexport function forward(p) {\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n    -----------------*/\n  lon = adjust_lon(lon - this.long0);\n\n  if (this.sphere) {\n    if (!this.m) {\n      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n    }\n    else {\n      var k = this.n * Math.sin(lat);\n      for (var i = MAX_ITER; i; --i) {\n        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n        lat -= V;\n        if (Math.abs(V) < EPSLN) {\n          break;\n        }\n      }\n    }\n    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n    y = this.a * this.C_y * lat;\n\n  }\n  else {\n\n    var s = Math.sin(lat);\n    var c = Math.cos(lat);\n    y = this.a * pj_mlfn(lat, s, c, this.en);\n    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var lat, temp, lon, s;\n\n  p.x -= this.x0;\n  lon = p.x / this.a;\n  p.y -= this.y0;\n  lat = p.y / this.a;\n\n  if (this.sphere) {\n    lat /= this.C_y;\n    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n    if (this.m) {\n      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n    }\n    else if (this.n !== 1) {\n      lat = asinz(Math.sin(lat) / this.n);\n    }\n    lon = adjust_lon(lon + this.long0);\n    lat = adjust_lat(lat);\n  }\n  else {\n    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n    s = Math.abs(lat);\n    if (s < HALF_PI) {\n      s = Math.sin(lat);\n      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n      lon = adjust_lon(temp);\n    }\n    else if ((s - EPSLN) < HALF_PI) {\n      lon = this.long0;\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Sinusoidal\", \"sinu\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","/*\n  references:\n    Formules et constantes pour le Calcul pour la\n    projection cylindrique conforme à axe oblique et pour la transformation entre\n    des systèmes de référence.\n    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n  */\n\nexport function init() {\n  var phy0 = this.lat0;\n  this.lambda0 = this.long0;\n  var sinPhy0 = Math.sin(phy0);\n  var semiMajorAxis = this.a;\n  var invF = this.rf;\n  var flattening = 1 / invF;\n  var e2 = 2 * flattening - Math.pow(flattening, 2);\n  var e = this.e = Math.sqrt(e2);\n  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n  this.b0 = Math.asin(sinPhy0 / this.alpha);\n  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n}\n\nexport function forward(p) {\n  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n  var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n  // spheric latitude\n  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n  // spheric longitude\n  var I = this.alpha * (p.x - this.lambda0);\n\n  // psoeudo equatorial rotation\n  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n  p.x = this.R * rotI + this.x0;\n  return p;\n}\n\nexport function inverse(p) {\n  var Y = p.x - this.x0;\n  var X = p.y - this.y0;\n\n  var rotI = Y / this.R;\n  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n  var lambda = this.lambda0 + I / this.alpha;\n\n  var S = 0;\n  var phy = b;\n  var prevPhy = -1000;\n  var iteration = 0;\n  while (Math.abs(phy - prevPhy) > 0.0000001) {\n    if (++iteration > 20) {\n      //...reportError(\"omercFwdInfinity\");\n      return;\n    }\n    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n    prevPhy = phy;\n    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n  }\n\n  p.x = lambda;\n  p.y = phy;\n  return p;\n}\n\nexport var names = [\"somerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {EPSLN, HALF_PI} from '../constants/values';\n\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n}\n\nexport function init() {\n\n  // setting default parameters\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      }\n      else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN && Math.abs(Math.cos(this.lat_ts)) > EPSLN) {\n      // When k0 is 1 (default value) and lat_ts is a vaild number and lat0 is at a pole and lat_ts is not at a pole\n      // Recalculate k0 using formula 21-35 from p161 of Snyder, 1987\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  }\n  else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    }\n    else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    }\n    else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    }\n    else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n    }\n    else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      }\n      else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n\n}\n\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\", \"Polar_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};\n","import gauss from './gauss';\nimport adjust_lon from '../common/adjust_lon';\nimport hypot from '../common/hypot';\n\nexport function init() {\n  gauss.init.apply(this);\n  if (!this.rc) {\n    return;\n  }\n  this.sinc0 = Math.sin(this.phic0);\n  this.cosc0 = Math.cos(this.phic0);\n  this.R2 = 2 * this.rc;\n  if (!this.title) {\n    this.title = \"Oblique Stereographic Alternative\";\n  }\n}\n\nexport function forward(p) {\n  var sinc, cosc, cosl, k;\n  p.x = adjust_lon(p.x - this.long0);\n  gauss.forward.apply(this, [p]);\n  sinc = Math.sin(p.y);\n  cosc = Math.cos(p.y);\n  cosl = Math.cos(p.x);\n  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n  p.x = k * cosc * Math.sin(p.x);\n  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  var sinc, cosc, lon, lat, rho;\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n  if ((rho = hypot(p.x, p.y))) {\n    var c = 2 * Math.atan2(rho, this.R2);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  gauss.inverse.apply(this, [p]);\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","// Heavily based on this tmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\nimport pj_enfn from '../common/pj_enfn';\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport adjust_lon from '../common/adjust_lon';\n\nimport {EPSLN, HALF_PI} from '../constants/values';\nimport sign from '../common/sign';\n\nexport function init() {\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n  }\n}\n\n/**\n    Transverse Mercator Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var con;\n  var x, y;\n  var sin_phi = Math.sin(lat);\n  var cos_phi = Math.cos(lat);\n\n  if (!this.es) {\n    var b = cos_phi * Math.sin(delta_lon);\n\n    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n      return (93);\n    }\n    else {\n      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n      b = Math.abs(y);\n\n      if (b >= 1) {\n        if ((b - 1) > EPSLN) {\n          return (93);\n        }\n        else {\n          y = 0;\n        }\n      }\n      else {\n        y = Math.acos(y);\n      }\n\n      if (lat < 0) {\n        y = -y;\n      }\n\n      y = this.a * this.k0 * (y - this.lat0) + this.y0;\n    }\n  }\n  else {\n    var al = cos_phi * delta_lon;\n    var als = Math.pow(al, 2);\n    var c = this.ep2 * Math.pow(cos_phi, 2);\n    var cs = Math.pow(c, 2);\n    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n    var t = Math.pow(tq, 2);\n    var ts = Math.pow(t, 2);\n    con = 1 - this.es * Math.pow(sin_phi, 2);\n    al = al / Math.sqrt(con);\n    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n    x = this.a * (this.k0 * al * (1 +\n      als / 6 * (1 - t + c +\n      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n      this.x0;\n\n    y = this.a * (this.k0 * (ml - this.ml0 +\n      sin_phi * delta_lon * al / 2 * (1 +\n      als / 12 * (5 - t + 9 * c + 4 * cs +\n      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n      this.y0;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\n/**\n    Transverse Mercator Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var con, phi;\n  var lat, lon;\n  var x = (p.x - this.x0) * (1 / this.a);\n  var y = (p.y - this.y0) * (1 / this.a);\n\n  if (!this.es) {\n    var f = Math.exp(x / this.k0);\n    var g = 0.5 * (f - 1 / f);\n    var temp = this.lat0 + y / this.k0;\n    var h = Math.cos(temp);\n    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n    lat = Math.asin(con);\n\n    if (y < 0) {\n      lat = -lat;\n    }\n\n    if ((g === 0) && (h === 0)) {\n      lon = 0;\n    }\n    else {\n      lon = adjust_lon(Math.atan2(g, h) + this.long0);\n    }\n  }\n  else { // ellipsoidal form\n    con = this.ml0 + y / this.k0;\n    phi = pj_inv_mlfn(con, this.es, this.en);\n\n    if (Math.abs(phi) < HALF_PI) {\n      var sin_phi = Math.sin(phi);\n      var cos_phi = Math.cos(phi);\n      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n      var c = this.ep2 * Math.pow(cos_phi, 2);\n      var cs = Math.pow(c, 2);\n      var t = Math.pow(tan_phi, 2);\n      var ts = Math.pow(t, 2);\n      con = 1 - this.es * Math.pow(sin_phi, 2);\n      var d = x * Math.sqrt(con) / this.k0;\n      var ds = Math.pow(d, 2);\n      con = con * tan_phi;\n\n      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n      lon = adjust_lon(this.long0 + (d * (1 -\n        ds / 6 * (1 + 2 * t + c -\n        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n    }\n    else {\n      lat = HALF_PI * sign(y);\n      lon = 0;\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Fast_Transverse_Mercator\", \"Fast Transverse Mercator\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","\nvar mode = {\n  N_POLE: 0,\n  S_POLE: 1,\n  EQUIT: 2,\n  OBLIQ: 3\n};\n\nimport { D2R, HALF_PI, EPSLN } from \"../constants/values\";\nimport hypot from \"../common/hypot\";\n\nvar params = {\n  h:     { def: 100000, num: true },           // default is Karman line, no default in PROJ.7\n  azi:   { def: 0, num: true, degrees: true }, // default is North\n  tilt:  { def: 0, num: true, degrees: true }, // default is Nadir\n  long0: { def: 0, num: true },                // default is Greenwich, conversion to rad is automatic\n  lat0:  { def: 0, num: true }                 // default is Equator, conversion to rad is automatic\n};\n\nexport function init() {\n  Object.keys(params).forEach(function (p) {\n    if (typeof this[p] === \"undefined\") {\n      this[p] = params[p].def;\n    } else if (params[p].num && isNaN(this[p])) {\n      throw new Error(\"Invalid parameter value, must be numeric \" + p + \" = \" + this[p]);\n    } else if (params[p].num) {\n      this[p] = parseFloat(this[p]);\n    }\n    if (params[p].degrees) {\n      this[p] = this[p] * D2R;\n    }\n  }.bind(this));\n\n  if (Math.abs((Math.abs(this.lat0) - HALF_PI)) < EPSLN) {\n    this.mode = this.lat0 < 0 ? mode.S_POLE : mode.N_POLE;\n  } else if (Math.abs(this.lat0) < EPSLN) {\n    this.mode = mode.EQUIT;\n  } else {\n    this.mode = mode.OBLIQ;\n    this.sinph0 = Math.sin(this.lat0);\n    this.cosph0 = Math.cos(this.lat0);\n  }\n\n  this.pn1 = this.h / this.a;  // Normalize relative to the Earth's radius\n\n  if (this.pn1 <= 0 || this.pn1 > 1e10) {\n    throw new Error(\"Invalid height\");\n  }\n  \n  this.p = 1 + this.pn1;\n  this.rp = 1 / this.p;\n  this.h1 = 1 / this.pn1;\n  this.pfact = (this.p + 1) * this.h1;\n  this.es = 0;\n\n  var omega = this.tilt;\n  var gamma = this.azi;\n  this.cg = Math.cos(gamma);\n  this.sg = Math.sin(gamma);\n  this.cw = Math.cos(omega);\n  this.sw = Math.sin(omega);\n}\n\nexport function forward(p) {\n  p.x -= this.long0;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var coslam = Math.cos(p.x);\n  var x, y;\n  switch (this.mode) {\n    case mode.OBLIQ:\n      y = this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      break;\n    case mode.EQUIT:\n      y = cosphi * coslam;\n      break;\n    case mode.S_POLE:\n      y = -sinphi;\n      break;\n    case mode.N_POLE:\n      y = sinphi;\n      break;\n  }\n  y = this.pn1 / (this.p - y);\n  x = y * cosphi * Math.sin(p.x);\n\n  switch (this.mode) {\n    case mode.OBLIQ:\n      y *= this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n      break;\n    case mode.EQUIT:\n      y *= sinphi;\n      break;\n    case mode.N_POLE:\n      y *= -(cosphi * coslam);\n      break;\n    case mode.S_POLE:\n      y *= cosphi * coslam;\n      break;\n  }\n\n  // Tilt \n  var yt, ba;\n  yt = y * this.cg + x * this.sg;\n  ba = 1 / (yt * this.sw * this.h1 + this.cw);\n  x = (x * this.cg - y * this.sg) * this.cw * ba;\n  y = yt * ba;\n\n  p.x = x * this.a;\n  p.y = y * this.a;\n  return p;\n}\n\nexport function inverse(p) {\n  p.x /= this.a;\n  p.y /= this.a;\n  var r = { x: p.x, y: p.y };\n\n  // Un-Tilt\n  var bm, bq, yt;\n  yt = 1 / (this.pn1 - p.y * this.sw);\n  bm = this.pn1 * p.x * yt;\n  bq = this.pn1 * p.y * this.cw * yt;\n  p.x = bm * this.cg + bq * this.sg;\n  p.y = bq * this.cg - bm * this.sg;\n\n  var rh = hypot(p.x, p.y);\n  if (Math.abs(rh) < EPSLN) {\n    r.x = 0;\n    r.y = p.y;\n  } else {\n    var cosz, sinz;\n    sinz = 1 - rh * rh * this.pfact;\n    sinz = (this.p - Math.sqrt(sinz)) / (this.pn1 / rh + rh / this.pn1);\n    cosz = Math.sqrt(1 - sinz * sinz);\n    switch (this.mode) {\n      case mode.OBLIQ:\n        r.y = Math.asin(cosz * this.sinph0 + p.y * sinz * this.cosph0 / rh);\n        p.y = (cosz - this.sinph0 * Math.sin(r.y)) * rh;\n        p.x *= sinz * this.cosph0;\n        break;\n      case mode.EQUIT:\n        r.y = Math.asin(p.y * sinz / rh);\n        p.y = cosz * rh;\n        p.x *= sinz;\n        break;\n      case mode.N_POLE:\n        r.y = Math.asin(cosz);\n        p.y = -p.y;\n        break;\n      case mode.S_POLE:\n        r.y = -Math.asin(cosz);\n        break;\n    }\n    r.x = Math.atan2(p.x, p.y);\n  }\n\n  p.x = r.x + this.long0;\n  p.y = r.y;\n  return p;\n}\n\nexport var names = [\"Tilted_Perspective\", \"tpers\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_zone from '../common/adjust_zone';\nimport etmerc from './etmerc';\nexport var dependsOn = 'etmerc';\nimport {D2R} from '../constants/values';\n\n\nexport function init() {\n  var zone = adjust_zone(this.zone, this.long0);\n  if (zone === undefined) {\n    throw new Error('unknown utm zone');\n  }\n  this.lat0 = 0;\n  this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\n  this.x0 = 500000;\n  this.y0 = this.utmSouth ? 10000000 : 0;\n  this.k0 = 0.9996;\n\n  etmerc.init.apply(this);\n  this.forward = etmerc.forward;\n  this.inverse = etmerc.inverse;\n}\n\nexport var names = [\"Universal Transverse Mercator System\", \"utm\"];\nexport default {\n  init: init,\n  names: names,\n  dependsOn: dependsOn\n};\n","import adjust_lon from '../common/adjust_lon';\n\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n/* Initialize the Van Der Grinten projection\n  ----------------------------------------*/\nexport function init() {\n  //this.R = 6370997; //Radius of earth\n  this.R = this.a;\n}\n\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  /* Forward equations\n    -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x, y;\n\n  if (Math.abs(lat) <= EPSLN) {\n    x = this.x0 + this.R * dlon;\n    y = this.y0;\n  }\n  var theta = asinz(2 * Math.abs(lat / Math.PI));\n  if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\n    x = this.x0;\n    if (lat >= 0) {\n      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n    }\n    else {\n      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n    }\n    //  return(OK);\n  }\n  var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\n  var asq = al * al;\n  var sinth = Math.sin(theta);\n  var costh = Math.cos(theta);\n\n  var g = costh / (sinth + costh - 1);\n  var gsq = g * g;\n  var m = g * (2 / sinth - 1);\n  var msq = m * m;\n  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n  if (dlon < 0) {\n    con = -con;\n  }\n  x = this.x0 + con;\n  //con = Math.abs(con / (Math.PI * this.R));\n  var q = asq + g;\n  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n  if (lat >= 0) {\n    //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 + con;\n  }\n  else {\n    //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 - con;\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Van Der Grinten inverse equations--mapping x,y to lat/long\n  ---------------------------------------------------------*/\nexport function inverse(p) {\n  var lon, lat;\n  var xx, yy, xys, c1, c2, c3;\n  var a1;\n  var m1;\n  var con;\n  var th1;\n  var d;\n\n  /* inverse equations\n    -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  con = Math.PI * this.R;\n  xx = p.x / con;\n  yy = p.y / con;\n  xys = xx * xx + yy * yy;\n  c1 = -Math.abs(yy) * (1 + xys);\n  c2 = c1 - 2 * yy * yy + xx * xx;\n  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n  a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n  m1 = 2 * Math.sqrt(-a1 / 3);\n  con = ((3 * d) / a1) / m1;\n  if (Math.abs(con) > 1) {\n    if (con >= 0) {\n      con = 1;\n    }\n    else {\n      con = -1;\n    }\n  }\n  th1 = Math.acos(con) / 3;\n  if (p.y >= 0) {\n    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n  else {\n    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n\n  if (Math.abs(xx) < EPSLN) {\n    lon = this.long0;\n  }\n  else {\n    lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {D2R, R2D, PJD_3PARAM, PJD_7PARAM, PJD_GRIDSHIFT} from './constants/values';\nimport datum_transform from './datum_transform';\nimport adjust_axis from './adjust_axis';\nimport proj from './Proj';\nimport toPoint from './common/toPoint';\nimport checkSanity from './checkSanity';\n\nfunction checkNotWGS(source, dest) {\n  return (\n    (source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM || source.datum.datum_type === PJD_GRIDSHIFT) && dest.datumCode !== 'WGS84') ||\n    ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM || dest.datum.datum_type === PJD_GRIDSHIFT) && source.datumCode !== 'WGS84');\n}\n\nexport default function transform(source, dest, point, enforceAxis) {\n  var wgs84;\n  if (Array.isArray(point)) {\n    point = toPoint(point);\n  } else {\n    // Clone the point object so inputs don't get modified\n    point = {\n      x: point.x,\n      y: point.y,\n      z: point.z,\n      m: point.m\n    };\n  }\n  var hasZ = point.z !== undefined;\n  checkSanity(point);\n  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n  if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n    wgs84 = new proj('WGS84');\n    point = transform(source, wgs84, point, enforceAxis);\n    source = wgs84;\n  }\n  // DGR, 2010/11/12\n  if (enforceAxis && source.axis !== 'enu') {\n    point = adjust_axis(source, false, point);\n  }\n  // Transform source points to long/lat, if they aren't already.\n  if (source.projName === 'longlat') {\n    point = {\n      x: point.x * D2R,\n      y: point.y * D2R,\n      z: point.z || 0\n    };\n  } else {\n    if (source.to_meter) {\n      point = {\n        x: point.x * source.to_meter,\n        y: point.y * source.to_meter,\n        z: point.z || 0\n      };\n    }\n    point = source.inverse(point); // Convert Cartesian to longlat\n    if (!point) {\n      return;\n    }\n  }\n  // Adjust for the prime meridian if necessary\n  if (source.from_greenwich) {\n    point.x += source.from_greenwich;\n  }\n\n  // Convert datums if needed, and if possible.\n  point = datum_transform(source.datum, dest.datum, point);\n  if (!point) {\n    return;\n  }\n\n  // Adjust for the prime meridian if necessary\n  if (dest.from_greenwich) {\n    point = {\n      x: point.x - dest.from_greenwich,\n      y: point.y,\n      z: point.z || 0\n    };\n  }\n\n  if (dest.projName === 'longlat') {\n    // convert radians to decimal degrees\n    point = {\n      x: point.x * R2D,\n      y: point.y * R2D,\n      z: point.z || 0\n    };\n  } else { // else project\n    point = dest.forward(point);\n    if (dest.to_meter) {\n      point = {\n        x: point.x / dest.to_meter,\n        y: point.y / dest.to_meter,\n        z: point.z || 0\n      };\n    }\n  }\n\n  // DGR, 2010/11/12\n  if (enforceAxis && dest.axis !== 'enu') {\n    return adjust_axis(dest, true, point);\n  }\n\n  if (point && !hasZ) {\n    delete point.z;\n  }\n  return point;\n}\n","import tmerc from './lib/projections/tmerc';\nimport etmerc from './lib/projections/etmerc';\nimport utm from './lib/projections/utm';\nimport sterea from './lib/projections/sterea';\nimport stere from './lib/projections/stere';\nimport somerc from './lib/projections/somerc';\nimport omerc from './lib/projections/omerc';\nimport lcc from './lib/projections/lcc';\nimport krovak from './lib/projections/krovak';\nimport cass from './lib/projections/cass';\nimport laea from './lib/projections/laea';\nimport aea from './lib/projections/aea';\nimport gnom from './lib/projections/gnom';\nimport cea from './lib/projections/cea';\nimport eqc from './lib/projections/eqc';\nimport poly from './lib/projections/poly';\nimport nzmg from './lib/projections/nzmg';\nimport mill from './lib/projections/mill';\nimport sinu from './lib/projections/sinu';\nimport moll from './lib/projections/moll';\nimport eqdc from './lib/projections/eqdc';\nimport vandg from './lib/projections/vandg';\nimport aeqd from './lib/projections/aeqd';\nimport ortho from './lib/projections/ortho';\nimport qsc from './lib/projections/qsc';\nimport robin from './lib/projections/robin';\nimport geocent from './lib/projections/geocent';\nimport tpers from './lib/projections/tpers';\nimport geos from './lib/projections/geos';\nimport eqearth from './lib/projections/eqearth';\nimport bonne from './lib/projections/bonne';\nexport default function(proj4){\n  proj4.Proj.projections.add(tmerc);\n  proj4.Proj.projections.add(etmerc);\n  proj4.Proj.projections.add(utm);\n  proj4.Proj.projections.add(sterea);\n  proj4.Proj.projections.add(stere);\n  proj4.Proj.projections.add(somerc);\n  proj4.Proj.projections.add(omerc);\n  proj4.Proj.projections.add(lcc);\n  proj4.Proj.projections.add(krovak);\n  proj4.Proj.projections.add(cass);\n  proj4.Proj.projections.add(laea);\n  proj4.Proj.projections.add(aea);\n  proj4.Proj.projections.add(gnom);\n  proj4.Proj.projections.add(cea);\n  proj4.Proj.projections.add(eqc);\n  proj4.Proj.projections.add(poly);\n  proj4.Proj.projections.add(nzmg);\n  proj4.Proj.projections.add(mill);\n  proj4.Proj.projections.add(sinu);\n  proj4.Proj.projections.add(moll);\n  proj4.Proj.projections.add(eqdc);\n  proj4.Proj.projections.add(vandg);\n  proj4.Proj.projections.add(aeqd);\n  proj4.Proj.projections.add(ortho);\n  proj4.Proj.projections.add(qsc);\n  proj4.Proj.projections.add(robin);\n  proj4.Proj.projections.add(geocent);\n  proj4.Proj.projections.add(tpers);\n  proj4.Proj.projections.add(geos);\n  proj4.Proj.projections.add(eqearth);\n  proj4.Proj.projections.add(bonne);\n}","var D2R = 0.01745329251994329577;\nimport parser from './parser';\nimport {sExpr} from './process';\n\nvar knownTypes = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS', 'GEOCCS', 'PROJCS', 'LOCAL_CS', 'GEODCRS',\n  'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\n\nfunction rename(obj, params) {\n  var outName = params[0];\n  var inName = params[1];\n  if (!(outName in obj) && (inName in obj)) {\n    obj[outName] = obj[inName];\n    if (params.length === 3) {\n      obj[outName] = params[2](obj[outName]);\n    }\n  }\n}\n\nfunction d2r(input) {\n  return input * D2R;\n}\n\nfunction cleanWKT(wkt) {\n  var keys = Object.keys(wkt);\n  for (var i = 0, ii = keys.length; i <ii; ++i) {\n    var key = keys[i];\n    // the followings are the crs defined in\n    // https://github.com/proj4js/proj4js/blob/1da4ed0b865d0fcb51c136090569210cdcc9019e/lib/parseCode.js#L11\n    if (knownTypes.indexOf(key) !== -1) {\n      setPropertiesFromWkt(wkt[key]);\n    }\n    if (typeof wkt[key] === 'object') {\n      cleanWKT(wkt[key]);\n    }\n  }\n}\n\nfunction setPropertiesFromWkt(wkt) {\n  if (wkt.AUTHORITY) {\n    var authority = Object.keys(wkt.AUTHORITY)[0];\n    if (authority && authority in wkt.AUTHORITY) {\n      wkt.title = authority + ':' + wkt.AUTHORITY[authority];\n    }\n  }\n  if (wkt.type === 'GEOGCS') {\n    wkt.projName = 'longlat';\n  } else if (wkt.type === 'LOCAL_CS') {\n    wkt.projName = 'identity';\n    wkt.local = true;\n  } else {\n    if (typeof wkt.PROJECTION === 'object') {\n      wkt.projName = Object.keys(wkt.PROJECTION)[0];\n    } else {\n      wkt.projName = wkt.PROJECTION;\n    }\n  }\n  if (wkt.AXIS) {\n    var axisOrder = '';\n    for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {\n      var axis = [wkt.AXIS[i][0].toLowerCase(), wkt.AXIS[i][1].toLowerCase()];\n      if (axis[0].indexOf('north') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'north')) {\n        axisOrder += 'n';\n      } else if (axis[0].indexOf('south') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'south')) {\n        axisOrder += 's';\n      } else if (axis[0].indexOf('east') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'east')) {\n        axisOrder += 'e';\n      } else if (axis[0].indexOf('west') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'west')) {\n        axisOrder += 'w';\n      }\n    }\n    if (axisOrder.length === 2) {\n      axisOrder += 'u';\n    }\n    if (axisOrder.length === 3) {\n      wkt.axis = axisOrder;\n    }\n  }\n  if (wkt.UNIT) {\n    wkt.units = wkt.UNIT.name.toLowerCase();\n    if (wkt.units === 'metre') {\n      wkt.units = 'meter';\n    }\n    if (wkt.UNIT.convert) {\n      if (wkt.type === 'GEOGCS') {\n        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\n        }\n      } else {\n        wkt.to_meter = wkt.UNIT.convert;\n      }\n    }\n  }\n  var geogcs = wkt.GEOGCS;\n  if (wkt.type === 'GEOGCS') {\n    geogcs = wkt;\n  }\n  if (geogcs) {\n    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n    //}\n    if (geogcs.DATUM) {\n      wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n    } else {\n      wkt.datumCode = geogcs.name.toLowerCase();\n    }\n    if (wkt.datumCode.slice(0, 2) === 'd_') {\n      wkt.datumCode = wkt.datumCode.slice(2);\n    }\n    if (wkt.datumCode === 'new_zealand_1949') {\n      wkt.datumCode = 'nzgd49';\n    }\n    if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {\n      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n        wkt.sphere = true;\n      }\n      wkt.datumCode = 'wgs84';\n    }\n    if (wkt.datumCode === 'belge_1972') {\n      wkt.datumCode = 'rnb72';\n    }\n    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n        wkt.ellps = 'intl';\n      }\n\n      wkt.a = geogcs.DATUM.SPHEROID.a;\n      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n    }\n\n    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\n      wkt.datum_params = geogcs.DATUM.TOWGS84;\n    }\n    if (~wkt.datumCode.indexOf('osgb_1936')) {\n      wkt.datumCode = 'osgb36';\n    }\n    if (~wkt.datumCode.indexOf('osni_1952')) {\n      wkt.datumCode = 'osni52';\n    }\n    if (~wkt.datumCode.indexOf('tm65')\n      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n      wkt.datumCode = 'ire65';\n    }\n    if (wkt.datumCode === 'ch1903+') {\n      wkt.datumCode = 'ch1903';\n    }\n    if (~wkt.datumCode.indexOf('israel')) {\n      wkt.datumCode = 'isr93';\n    }\n  }\n  if (wkt.b && !isFinite(wkt.b)) {\n    wkt.b = wkt.a;\n  }\n\n  function toMeter(input) {\n    var ratio = wkt.to_meter || 1;\n    return input * ratio;\n  }\n  var renamer = function(a) {\n    return rename(wkt, a);\n  };\n  var list = [\n    ['standard_parallel_1', 'Standard_Parallel_1'],\n    ['standard_parallel_1', 'Latitude of 1st standard parallel'],\n    ['standard_parallel_2', 'Standard_Parallel_2'],\n    ['standard_parallel_2', 'Latitude of 2nd standard parallel'],\n    ['false_easting', 'False_Easting'],\n    ['false_easting', 'False easting'],\n    ['false-easting', 'Easting at false origin'],\n    ['false_northing', 'False_Northing'],\n    ['false_northing', 'False northing'],\n    ['false_northing', 'Northing at false origin'],\n    ['central_meridian', 'Central_Meridian'],\n    ['central_meridian', 'Longitude of natural origin'],\n    ['central_meridian', 'Longitude of false origin'],\n    ['latitude_of_origin', 'Latitude_Of_Origin'],\n    ['latitude_of_origin', 'Central_Parallel'],\n    ['latitude_of_origin', 'Latitude of natural origin'],\n    ['latitude_of_origin', 'Latitude of false origin'],\n    ['scale_factor', 'Scale_Factor'],\n    ['k0', 'scale_factor'],\n    ['latitude_of_center', 'Latitude_Of_Center'],\n    ['latitude_of_center', 'Latitude_of_center'],\n    ['lat0', 'latitude_of_center', d2r],\n    ['longitude_of_center', 'Longitude_Of_Center'],\n    ['longitude_of_center', 'Longitude_of_center'],\n    ['longc', 'longitude_of_center', d2r],\n    ['x0', 'false_easting', toMeter],\n    ['y0', 'false_northing', toMeter],\n    ['long0', 'central_meridian', d2r],\n    ['lat0', 'latitude_of_origin', d2r],\n    ['lat0', 'standard_parallel_1', d2r],\n    ['lat1', 'standard_parallel_1', d2r],\n    ['lat2', 'standard_parallel_2', d2r],\n    ['azimuth', 'Azimuth'],\n    ['alpha', 'azimuth', d2r],\n    ['srsCode', 'name']\n  ];\n  list.forEach(renamer);\n  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n    wkt.long0 = wkt.longc;\n  }\n  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n    wkt.lat_ts = wkt.lat1;\n  } else if (!wkt.lat_ts && wkt.lat0 && wkt.projName === 'Polar_Stereographic') {\n    wkt.lat_ts = wkt.lat0;\n    wkt.lat0 = d2r(wkt.lat0 > 0 ? 90 : -90);\n  }\n}\nexport default function(wkt) {\n  var lisp = parser(wkt);\n  var type = lisp[0];\n  var obj = {};\n  sExpr(lisp, obj);\n  cleanWKT(obj);\n  return obj[type];\n}\n","export default parseString;\n\nvar NEUTRAL = 1;\nvar KEYWORD = 2;\nvar NUMBER = 3;\nvar QUOTED = 4;\nvar AFTERQUOTE = 5;\nvar ENDED = -1;\nvar whitespace = /\\s/;\nvar latin = /[A-Za-z]/;\nvar keyword = /[A-Za-z84_]/;\nvar endThings = /[,\\]]/;\nvar digets = /[\\d\\.E\\-\\+]/;\n// const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nfunction Parser(text) {\n  if (typeof text !== 'string') {\n    throw new Error('not a string');\n  }\n  this.text = text.trim();\n  this.level = 0;\n  this.place = 0;\n  this.root = null;\n  this.stack = [];\n  this.currentObject = null;\n  this.state = NEUTRAL;\n}\nParser.prototype.readCharicter = function() {\n  var char = this.text[this.place++];\n  if (this.state !== QUOTED) {\n    while (whitespace.test(char)) {\n      if (this.place >= this.text.length) {\n        return;\n      }\n      char = this.text[this.place++];\n    }\n  }\n  switch (this.state) {\n    case NEUTRAL:\n      return this.neutral(char);\n    case KEYWORD:\n      return this.keyword(char)\n    case QUOTED:\n      return this.quoted(char);\n    case AFTERQUOTE:\n      return this.afterquote(char);\n    case NUMBER:\n      return this.number(char);\n    case ENDED:\n      return;\n  }\n};\nParser.prototype.afterquote = function(char) {\n  if (char === '\"') {\n    this.word += '\"';\n    this.state = QUOTED;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = this.word.trim();\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\n};\nParser.prototype.afterItem = function(char) {\n  if (char === ',') {\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n    }\n    this.word = null;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (char === ']') {\n    this.level--;\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n      this.word = null;\n    }\n    this.state = NEUTRAL;\n    this.currentObject = this.stack.pop();\n    if (!this.currentObject) {\n      this.state = ENDED;\n    }\n\n    return;\n  }\n};\nParser.prototype.number = function(char) {\n  if (digets.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = parseFloat(this.word);\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\n};\nParser.prototype.quoted = function(char) {\n  if (char === '\"') {\n    this.state = AFTERQUOTE;\n    return;\n  }\n  this.word += char;\n  return;\n};\nParser.prototype.keyword = function(char) {\n  if (keyword.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (char === '[') {\n    var newObjects = [];\n    newObjects.push(this.word);\n    this.level++;\n    if (this.root === null) {\n      this.root = newObjects;\n    } else {\n      this.currentObject.push(newObjects);\n    }\n    this.stack.push(this.currentObject);\n    this.currentObject = newObjects;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\n};\nParser.prototype.neutral = function(char) {\n  if (latin.test(char)) {\n    this.word = char;\n    this.state = KEYWORD;\n    return;\n  }\n  if (char === '\"') {\n    this.word = '';\n    this.state = QUOTED;\n    return;\n  }\n  if (digets.test(char)) {\n    this.word = char;\n    this.state = NUMBER;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\n};\nParser.prototype.output = function() {\n  while (this.place < this.text.length) {\n    this.readCharicter();\n  }\n  if (this.state === ENDED) {\n    return this.root;\n  }\n  throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\n};\n\nfunction parseString(txt) {\n  var parser = new Parser(txt);\n  return parser.output();\n}\n","\n\nfunction mapit(obj, key, value) {\n  if (Array.isArray(key)) {\n    value.unshift(key);\n    key = null;\n  }\n  var thing = key ? {} : obj;\n\n  var out = value.reduce(function(newObj, item) {\n    sExpr(item, newObj);\n    return newObj\n  }, thing);\n  if (key) {\n    obj[key] = out;\n  }\n}\n\nexport function sExpr(v, obj) {\n  if (!Array.isArray(v)) {\n    obj[v] = true;\n    return;\n  }\n  var key = v.shift();\n  if (key === 'PARAMETER') {\n    key = v.shift();\n  }\n  if (v.length === 1) {\n    if (Array.isArray(v[0])) {\n      obj[key] = {};\n      sExpr(v[0], obj[key]);\n      return;\n    }\n    obj[key] = v[0];\n    return;\n  }\n  if (!v.length) {\n    obj[key] = true;\n    return;\n  }\n  if (key === 'TOWGS84') {\n    obj[key] = v;\n    return;\n  }\n  if (key === 'AXIS') {\n    if (!(key in obj)) {\n      obj[key] = [];\n    }\n    obj[key].push(v);\n    return;\n  }\n  if (!Array.isArray(key)) {\n    obj[key] = {};\n  }\n\n  var i;\n  switch (key) {\n    case 'UNIT':\n    case 'PRIMEM':\n    case 'VERT_DATUM':\n      obj[key] = {\n        name: v[0].toLowerCase(),\n        convert: v[1]\n      };\n      if (v.length === 3) {\n        sExpr(v[2], obj[key]);\n      }\n      return;\n    case 'SPHEROID':\n    case 'ELLIPSOID':\n      obj[key] = {\n        name: v[0],\n        a: v[1],\n        rf: v[2]\n      };\n      if (v.length === 4) {\n        sExpr(v[3], obj[key]);\n      }\n      return;\n    case 'EDATUM':\n    case 'ENGINEERINGDATUM':\n    case 'LOCAL_DATUM':\n    case 'DATUM':\n    case 'VERT_CS':\n    case 'VERTCRS':\n    case 'VERTICALCRS':\n      v[0] = ['name', v[0]];\n      mapit(obj, key, v);\n      return;\n    case 'COMPD_CS':\n    case 'COMPOUNDCRS':\n    case 'FITTED_CS':\n    // the followings are the crs defined in\n    // https://github.com/proj4js/proj4js/blob/1da4ed0b865d0fcb51c136090569210cdcc9019e/lib/parseCode.js#L11\n    case 'PROJECTEDCRS':\n    case 'PROJCRS':\n    case 'GEOGCS':\n    case 'GEOCCS':\n    case 'PROJCS':\n    case 'LOCAL_CS':\n    case 'GEODCRS':\n    case 'GEODETICCRS':\n    case 'GEODETICDATUM':\n    case 'ENGCRS':\n    case 'ENGINEERINGCRS':\n      v[0] = ['name', v[0]];\n      mapit(obj, key, v);\n      obj[key].type = key;\n      return;\n    default:\n      i = -1;\n      while (++i < v.length) {\n        if (!Array.isArray(v[i])) {\n          return sExpr(v, obj[key]);\n        }\n      }\n      return mapit(obj, key, v);\n  }\n}\n","function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _classCallCheck as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nexport { _createClass as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    const pendingListeners = new Map();\n    ep.addEventListener(\"message\", function handleMessage(ev) {\n        const { data } = ev;\n        if (!data || !data.id) {\n            return;\n        }\n        const resolver = pendingListeners.get(data.id);\n        if (!resolver) {\n            return;\n        }\n        try {\n            resolver(data);\n        }\n        finally {\n            pendingListeners.delete(data.id);\n        }\n    });\n    return createProxy(ep, pendingListeners, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, new Map(), {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, pendingListeners, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    pendingListeners.clear();\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, pendingListeners, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, pendingListeners, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, pendingListeners, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, pendingListeners, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, pendingListeners, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        pendingListeners.set(id, resolve);\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","/**\n * @module ol/coordinate\n */\nimport {getWidth} from './extent.js';\nimport {modulo, toFixed} from './math.js';\nimport {padNumber} from './string.js';\n\n/**\n * An array of numbers representing an `xy`, `xyz` or `xyzm` coordinate.\n * Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */\n\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\nexport function add(coordinate, delta) {\n  coordinate[0] += +delta[0];\n  coordinate[1] += +delta[1];\n  return coordinate;\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */\nexport function closestOnCircle(coordinate, circle) {\n  const r = circle.getRadius();\n  const center = circle.getCenter();\n  const x0 = center[0];\n  const y0 = center[1];\n  const x1 = coordinate[0];\n  const y1 = coordinate[1];\n\n  let dx = x1 - x0;\n  const dy = y1 - y0;\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n  const d = Math.sqrt(dx * dx + dy * dy);\n\n  const x = x0 + (r * dx) / d;\n  const y = y0 + (r * dy) / d;\n\n  return [x, y];\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\nexport function closestOnSegment(coordinate, segment) {\n  const x0 = coordinate[0];\n  const y0 = coordinate[1];\n  const start = segment[0];\n  const end = segment[1];\n  const x1 = start[0];\n  const y1 = start[1];\n  const x2 = end[0];\n  const y2 = end[1];\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const along =\n    dx === 0 && dy === 0\n      ? 0\n      : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n  let x, y;\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n  return [x, y];\n}\n\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY();\n *     const out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY(2);\n *     const out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */\nexport function createStringXY(fractionDigits) {\n  return (\n    /**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n      return toStringXY(coordinate, fractionDigits);\n    }\n  );\n}\n\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\nexport function degreesToStringHDMS(hemispheres, degrees, fractionDigits) {\n  const normalizedDegrees = modulo(degrees + 180, 360) - 180;\n  const x = Math.abs(3600 * normalizedDegrees);\n  const decimals = fractionDigits || 0;\n\n  let deg = Math.floor(x / 3600);\n  let min = Math.floor((x - deg * 3600) / 60);\n  let sec = toFixed(x - deg * 3600 - min * 60, decimals);\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  let hdms = deg + '\\u00b0';\n  if (min !== 0 || sec !== 0) {\n    hdms += ' ' + padNumber(min, 2) + '\\u2032';\n  }\n  if (sec !== 0) {\n    hdms += ' ' + padNumber(sec, 2, decimals) + '\\u2033';\n  }\n  if (normalizedDegrees !== 0) {\n    hdms += ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\n  }\n\n  return hdms;\n}\n\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\nexport function format(coordinate, template, fractionDigits) {\n  if (coordinate) {\n    return template\n      .replace('{x}', coordinate[0].toFixed(fractionDigits))\n      .replace('{y}', coordinate[1].toFixed(fractionDigits));\n  }\n  return '';\n}\n\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\nexport function equals(coordinate1, coordinate2) {\n  let equals = true;\n  for (let i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n  return equals;\n}\n\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */\nexport function rotate(coordinate, angle) {\n  const cosAngle = Math.cos(angle);\n  const sinAngle = Math.sin(angle);\n  const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n}\n\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */\nexport function scale(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\nexport function squaredDistance(coord1, coord2) {\n  const dx = coord1[0] - coord2[0];\n  const dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\nexport function distance(coord1, coord2) {\n  return Math.sqrt(squaredDistance(coord1, coord2));\n}\n\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\nexport function squaredDistanceToSegment(coordinate, segment) {\n  return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\nexport function toStringHDMS(coordinate, fractionDigits) {\n  if (coordinate) {\n    return (\n      degreesToStringHDMS('NS', coordinate[1], fractionDigits) +\n      ' ' +\n      degreesToStringHDMS('EW', coordinate[0], fractionDigits)\n    );\n  }\n  return '';\n}\n\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\nexport function toStringXY(coordinate, fractionDigits) {\n  return format(coordinate, '{x}, {y}', fractionDigits);\n}\n\n/**\n * Modifies the provided coordinate in-place to be within the real world\n * extent. The lower projection extent boundary is inclusive, the upper one\n * exclusive.\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {Coordinate} The coordinate within the real world extent.\n */\nexport function wrapX(coordinate, projection) {\n  if (projection.canWrapX()) {\n    const worldWidth = getWidth(projection.getExtent());\n    const worldsAway = getWorldsAway(coordinate, projection, worldWidth);\n    if (worldsAway) {\n      coordinate[0] -= worldsAway * worldWidth;\n    }\n  }\n  return coordinate;\n}\n/**\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {number} [sourceExtentWidth] Width of the source extent.\n * @return {number} Offset in world widths.\n */\nexport function getWorldsAway(coordinate, projection, sourceExtentWidth) {\n  const projectionExtent = projection.getExtent();\n  let worldsAway = 0;\n  if (\n    projection.canWrapX() &&\n    (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])\n  ) {\n    sourceExtentWidth = sourceExtentWidth || getWidth(projectionExtent);\n    worldsAway = Math.floor(\n      (coordinate[0] - projectionExtent[0]) / sourceExtentWidth,\n    );\n  }\n  return worldsAway;\n}\n","/**\n * @module ol/extent\n */\nimport Relationship from './extent/Relationship.js';\n\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n\n/**\n * Extent corner.\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n  const extent = createEmpty();\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [dest] Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, dest) {\n  const minX = Math.min.apply(null, xs);\n  const minY = Math.min.apply(null, ys);\n  const maxX = Math.max.apply(null, xs);\n  const maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, dest);\n}\n\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, dest) {\n  if (dest) {\n    dest[0] = extent[0] - value;\n    dest[1] = extent[1] - value;\n    dest[2] = extent[2] + value;\n    dest[3] = extent[3] + value;\n    return dest;\n  }\n  return [\n    extent[0] - value,\n    extent[1] - value,\n    extent[2] + value,\n    extent[3] + value,\n  ];\n}\n\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [dest] Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent.slice();\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n  let dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[0] &&\n    extent2[2] <= extent1[2] &&\n    extent1[1] <= extent2[1] &&\n    extent2[3] <= extent1[3]\n  );\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const x = coordinate[0];\n  const y = coordinate[1];\n  let relationship = Relationship.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n  return relationship;\n}\n\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, dest) {\n  if (dest) {\n    dest[0] = minX;\n    dest[1] = minY;\n    dest[2] = maxX;\n    dest[3] = maxY;\n    return dest;\n  }\n  return [minX, minY, maxX, maxY];\n}\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(dest) {\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, dest);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, dest) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  return createOrUpdate(x, y, x, y, dest);\n}\n\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendCoordinates(extent, coordinates);\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  dest,\n) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendRings(extent, rings);\n}\n\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n  return (\n    extent1[0] == extent2[0] &&\n    extent1[2] == extent2[2] &&\n    extent1[1] == extent2[1] &&\n    extent1[3] == extent2[3]\n  );\n}\n\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n  return (\n    Math.abs(extent1[0] - extent2[0]) < tolerance &&\n    Math.abs(extent1[2] - extent2[2]) < tolerance &&\n    Math.abs(extent1[1] - extent2[1]) < tolerance &&\n    Math.abs(extent1[3] - extent2[3]) < tolerance\n  );\n}\n\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(\n  extent,\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\nexport function forEachCorner(extent, callback) {\n  let val;\n  val = callback(getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n}\n\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n  let area = 0;\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n  return area;\n}\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {Corner} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n  let coordinate;\n  if (corner === 'bottom-left') {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === 'bottom-right') {\n    coordinate = getBottomRight(extent);\n  } else if (corner === 'top-left') {\n    coordinate = getTopLeft(extent);\n  } else if (corner === 'top-right') {\n    coordinate = getTopRight(extent);\n  } else {\n    throw new Error('Invalid corner');\n  }\n  return coordinate;\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n  const minX = Math.min(extent1[0], extent2[0]);\n  const minY = Math.min(extent1[1], extent2[1]);\n  const maxX = Math.max(extent1[2], extent2[2]);\n  const maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, dest) {\n  const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(\n    center,\n    resolution,\n    rotation,\n    size,\n  );\n  return createOrUpdate(\n    Math.min(x0, x1, x2, x3),\n    Math.min(y0, y1, y2, y3),\n    Math.max(x0, x1, x2, x3),\n    Math.max(y0, y1, y2, y3),\n    dest,\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @return {Array<number>} Linear ring representing the viewport.\n */\nexport function getRotatedViewport(center, resolution, rotation, size) {\n  const dx = (resolution * size[0]) / 2;\n  const dy = (resolution * size[1]) / 2;\n  const cosRotation = Math.cos(rotation);\n  const sinRotation = Math.sin(rotation);\n  const xCos = dx * cosRotation;\n  const xSin = dx * sinRotation;\n  const yCos = dy * cosRotation;\n  const ySin = dy * sinRotation;\n  const x = center[0];\n  const y = center[1];\n  return [\n    x - xCos + ySin,\n    y - xSin - yCos,\n    x - xCos - ySin,\n    y - xSin + yCos,\n    x + xCos - ySin,\n    y + xSin + yCos,\n    x + xCos + ySin,\n    y + xSin - yCos,\n    x - xCos + ySin,\n    y - xSin - yCos,\n  ];\n}\n\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n  const intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [dest] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, dest) {\n  const intersection = dest ? dest : createEmpty();\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n  return intersection;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[2] &&\n    extent1[2] >= extent2[0] &&\n    extent1[1] <= extent2[3] &&\n    extent1[3] >= extent2[1]\n  );\n}\n\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n  let intersects = false;\n  const startRel = coordinateRelationship(extent, start);\n  const endRel = coordinateRelationship(extent, end);\n  if (\n    startRel === Relationship.INTERSECTING ||\n    endRel === Relationship.INTERSECTING\n  ) {\n    intersects = true;\n  } else {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const startX = start[0];\n    const startY = start[1];\n    const endX = end[0];\n    const endY = end[1];\n    const slope = (endY - startY) / (endX - startX);\n    let x, y;\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.RIGHT) &&\n      !(startRel & Relationship.RIGHT)\n    ) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.BELOW) &&\n      !(startRel & Relationship.BELOW)\n    ) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.LEFT) &&\n      !(startRel & Relationship.LEFT)\n    ) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n  return intersects;\n}\n\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [dest] Destination extent.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, dest, stops) {\n  if (isEmpty(extent)) {\n    return createOrUpdateEmpty(dest);\n  }\n  let coordinates = [];\n  if (stops > 1) {\n    const width = extent[2] - extent[0];\n    const height = extent[3] - extent[1];\n    for (let i = 0; i < stops; ++i) {\n      coordinates.push(\n        extent[0] + (width * i) / stops,\n        extent[1],\n        extent[2],\n        extent[1] + (height * i) / stops,\n        extent[2] - (width * i) / stops,\n        extent[3],\n        extent[0],\n        extent[3] - (height * i) / stops,\n      );\n    }\n  } else {\n    coordinates = [\n      extent[0],\n      extent[1],\n      extent[2],\n      extent[1],\n      extent[2],\n      extent[3],\n      extent[0],\n      extent[3],\n    ];\n  }\n  transformFn(coordinates, coordinates, 2);\n  const xs = [];\n  const ys = [];\n  for (let i = 0, l = coordinates.length; i < l; i += 2) {\n    xs.push(coordinates[i]);\n    ys.push(coordinates[i + 1]);\n  }\n  return _boundingExtentXYs(xs, ys, dest);\n}\n\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\nexport function wrapX(extent, projection) {\n  const projectionExtent = projection.getExtent();\n  const center = getCenter(extent);\n  if (\n    projection.canWrapX() &&\n    (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])\n  ) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.floor(\n      (center[0] - projectionExtent[0]) / worldWidth,\n    );\n    const offset = worldsAway * worldWidth;\n    extent[0] -= offset;\n    extent[2] -= offset;\n  }\n  return extent;\n}\n\n/**\n * Fits the extent to the real world\n *\n * If the extent does not cross the anti meridian, this will return the extent in an array\n * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the\n * real world\n *\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @param {boolean} [multiWorld] Return all worlds\n * @return {Array<Extent>} The extent within the real world extent.\n */\nexport function wrapAndSliceX(extent, projection, multiWorld) {\n  if (projection.canWrapX()) {\n    const projectionExtent = projection.getExtent();\n\n    if (!isFinite(extent[0]) || !isFinite(extent[2])) {\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n\n    wrapX(extent, projection);\n    const worldWidth = getWidth(projectionExtent);\n\n    if (getWidth(extent) > worldWidth && !multiWorld) {\n      // the extent wraps around on itself\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n    if (extent[0] < projectionExtent[0]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2], extent[3]],\n      ];\n    }\n    if (extent[2] > projectionExtent[2]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0], extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]],\n      ];\n    }\n  }\n\n  return [extent];\n}\n","/**\n * @module ol/math\n */\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>|null} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n  const n = mat.length;\n\n  for (let i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    let maxRow = i;\n    let maxEl = Math.abs(mat[i][i]);\n    for (let r = i + 1; r < n; r++) {\n      const absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    const tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (let j = i + 1; j < n; j++) {\n      const coef = -mat[j][i] / mat[i][i];\n      for (let k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  const x = new Array(n);\n  for (let l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (let m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n  return (angleInRadians * 180) / Math.PI;\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n  return (angleInDegrees * Math.PI) / 180;\n}\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n  const r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n\n/**\n * Returns a number with a limited number of decimal digits.\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The input number with a limited number of decimal digits.\n */\nexport function toFixed(n, decimals) {\n  const factor = Math.pow(10, decimals);\n  return Math.round(n * factor) / factor;\n}\n\n/**\n * Rounds a number to the nearest integer value considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The nearest integer.\n */\nexport function round(n, decimals) {\n  return Math.round(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next smaller integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next smaller integer.\n */\nexport function floor(n, decimals) {\n  return Math.floor(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next bigger integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next bigger integer.\n */\nexport function ceil(n, decimals) {\n  return Math.ceil(toFixed(n, decimals));\n}\n\n/**\n * Wraps a number between some minimum and maximum values.\n * @param {number} n The number to wrap.\n * @param {number} min The minimum of the range (inclusive).\n * @param {number} max The maximum of the range (exclusive).\n * @return {number} The wrapped number.\n */\nexport function wrap(n, min, max) {\n  if (n >= min && n < max) {\n    return n;\n  }\n  const range = max - min;\n  return ((((n - min) % range) + range) % range) + min;\n}\n","/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * @const\n * @type {number}\n */\nexport const HALF_SIZE = Math.PI * RADIUS;\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\n\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nclass EPSG3857Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   */\n  constructor(code) {\n    super({\n      code: code,\n      units: 'm',\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / Math.cosh(point[1] / RADIUS);\n      },\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG3857Projection('EPSG:3857'),\n  new EPSG3857Projection('EPSG:102100'),\n  new EPSG3857Projection('EPSG:102113'),\n  new EPSG3857Projection('EPSG:900913'),\n  new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\n];\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @param {number} [stride] Stride (default is `dimension`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, output, dimension, stride) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  stride = stride ?? dimension;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += stride) {\n    output[i] = (HALF_SIZE * input[i]) / 180;\n    let y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @param {number} [stride] Stride (default is `dimension`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, output, dimension, stride) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  stride = stride ?? dimension;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += stride) {\n    output[i] = (180 * input[i]) / HALF_SIZE;\n    output[i + 1] =\n      (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\n  }\n  return output;\n}\n","/**\n * @module ol/proj/epsg4326\n */\nimport Projection from './Projection.js';\n\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-180, -90, 180, 90];\n\n/**\n * @const\n * @type {number}\n */\nexport const METERS_PER_UNIT = (Math.PI * RADIUS) / 180;\n\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */\nclass EPSG4326Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   * @param {string} [axisOrientation] Axis orientation.\n   */\n  constructor(code, axisOrientation) {\n    super({\n      code: code,\n      units: 'degrees',\n      extent: EXTENT,\n      axisOrientation: axisOrientation,\n      global: true,\n      metersPerUnit: METERS_PER_UNIT,\n      worldExtent: EXTENT,\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG4326Projection('CRS:84'),\n  new EPSG4326Projection('EPSG:4326', 'neu'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\n  new EPSG4326Projection('http://www.opengis.net/def/crs/OGC/1.3/CRS84'),\n  new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\n  new EPSG4326Projection('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu'),\n];\n","/**\n * @module ol/proj/utm\n */\n\n/**\n * Adapted from https://github.com/Turbo87/utm\n * Copyright (c) 2012-2017 Tobias Bieniek\n *\n * The functions here provide approximate transforms to and from UTM.\n * They are not appropriate for use beyond the validity extend of a UTM\n * zone, and the accuracy of the transform decreases toward the zone\n * edges.\n */\n\nimport Projection from './Projection.js';\nimport {toDegrees, toRadians, wrap} from '../math.js';\n\n/**\n * @typedef {Object} UTMZone\n * @property {number} number The zone number (1 - 60).\n * @property {boolean} north The northern hemisphere.\n */\n\nconst K0 = 0.9996;\n\nconst E = 0.00669438;\nconst E2 = E * E;\nconst E3 = E2 * E;\nconst E_P2 = E / (1 - E);\n\nconst SQRT_E = Math.sqrt(1 - E);\nconst _E = (1 - SQRT_E) / (1 + SQRT_E);\nconst _E2 = _E * _E;\nconst _E3 = _E2 * _E;\nconst _E4 = _E3 * _E;\nconst _E5 = _E4 * _E;\n\nconst M1 = 1 - E / 4 - (3 * E2) / 64 - (5 * E3) / 256;\nconst M2 = (3 * E) / 8 + (3 * E2) / 32 + (45 * E3) / 1024;\nconst M3 = (15 * E2) / 256 + (45 * E3) / 1024;\nconst M4 = (35 * E3) / 3072;\n\nconst P2 = (3 / 2) * _E - (27 / 32) * _E3 + (269 / 512) * _E5;\nconst P3 = (21 / 16) * _E2 - (55 / 32) * _E4;\nconst P4 = (151 / 96) * _E3 - (417 / 128) * _E5;\nconst P5 = (1097 / 512) * _E4;\n\nconst R = 6378137;\n\n/**\n * @param {number} easting Easting value of coordinate.\n * @param {number} northing Northing value of coordinate.\n * @param {UTMZone} zone The UTM zone.\n * @return {import(\"../coordinate.js\").Coordinate} The transformed coordinate.\n */\nfunction toLonLat(easting, northing, zone) {\n  const x = easting - 500000;\n  const y = zone.north ? northing : northing - 10000000;\n\n  const m = y / K0;\n  const mu = m / (R * M1);\n\n  const pRad =\n    mu +\n    P2 * Math.sin(2 * mu) +\n    P3 * Math.sin(4 * mu) +\n    P4 * Math.sin(6 * mu) +\n    P5 * Math.sin(8 * mu);\n\n  const pSin = Math.sin(pRad);\n  const pSin2 = pSin * pSin;\n\n  const pCos = Math.cos(pRad);\n\n  const pTan = pSin / pCos;\n  const pTan2 = pTan * pTan;\n  const pTan4 = pTan2 * pTan2;\n\n  const epSin = 1 - E * pSin2;\n  const epSinSqrt = Math.sqrt(1 - E * pSin2);\n\n  const n = R / epSinSqrt;\n  const r = (1 - E) / epSin;\n\n  const c = E_P2 * pCos ** 2;\n  const c2 = c * c;\n\n  const d = x / (n * K0);\n  const d2 = d * d;\n  const d3 = d2 * d;\n  const d4 = d3 * d;\n  const d5 = d4 * d;\n  const d6 = d5 * d;\n\n  const latitude =\n    pRad -\n    (pTan / r) *\n      (d2 / 2 - (d4 / 24) * (5 + 3 * pTan2 + 10 * c - 4 * c2 - 9 * E_P2)) +\n    (d6 / 720) * (61 + 90 * pTan2 + 298 * c + 45 * pTan4 - 252 * E_P2 - 3 * c2);\n\n  let longitude =\n    (d -\n      (d3 / 6) * (1 + 2 * pTan2 + c) +\n      (d5 / 120) * (5 - 2 * c + 28 * pTan2 - 3 * c2 + 8 * E_P2 + 24 * pTan4)) /\n    pCos;\n\n  longitude = wrap(\n    longitude + toRadians(zoneToCentralLongitude(zone.number)),\n    -Math.PI,\n    Math.PI,\n  );\n\n  return [toDegrees(longitude), toDegrees(latitude)];\n}\n\nconst MIN_LATITUDE = -80;\nconst MAX_LATITUDE = 84;\nconst MIN_LONGITUDE = -180;\nconst MAX_LONGITUDE = 180;\n\n/**\n * @param {number} longitude The longitude.\n * @param {number} latitude The latitude.\n * @param {UTMZone} zone The UTM zone.\n * @return {import('../coordinate.js').Coordinate} The UTM coordinate.\n */\nfunction fromLonLat(longitude, latitude, zone) {\n  longitude = wrap(longitude, MIN_LONGITUDE, MAX_LONGITUDE);\n\n  if (latitude < MIN_LATITUDE) {\n    latitude = MIN_LATITUDE;\n  } else if (latitude > MAX_LATITUDE) {\n    latitude = MAX_LATITUDE;\n  }\n\n  const latRad = toRadians(latitude);\n  const latSin = Math.sin(latRad);\n  const latCos = Math.cos(latRad);\n\n  const latTan = latSin / latCos;\n  const latTan2 = latTan * latTan;\n  const latTan4 = latTan2 * latTan2;\n\n  const lonRad = toRadians(longitude);\n  const centralLon = zoneToCentralLongitude(zone.number);\n  const centralLonRad = toRadians(centralLon);\n\n  const n = R / Math.sqrt(1 - E * latSin ** 2);\n  const c = E_P2 * latCos ** 2;\n\n  const a = latCos * wrap(lonRad - centralLonRad, -Math.PI, Math.PI);\n  const a2 = a * a;\n  const a3 = a2 * a;\n  const a4 = a3 * a;\n  const a5 = a4 * a;\n  const a6 = a5 * a;\n\n  const m =\n    R *\n    (M1 * latRad -\n      M2 * Math.sin(2 * latRad) +\n      M3 * Math.sin(4 * latRad) -\n      M4 * Math.sin(6 * latRad));\n\n  const easting =\n    K0 *\n      n *\n      (a +\n        (a3 / 6) * (1 - latTan2 + c) +\n        (a5 / 120) * (5 - 18 * latTan2 + latTan4 + 72 * c - 58 * E_P2)) +\n    500000;\n\n  let northing =\n    K0 *\n    (m +\n      n *\n        latTan *\n        (a2 / 2 +\n          (a4 / 24) * (5 - latTan2 + 9 * c + 4 * c ** 2) +\n          (a6 / 720) * (61 - 58 * latTan2 + latTan4 + 600 * c - 330 * E_P2)));\n\n  if (!zone.north) {\n    northing += 10000000;\n  }\n\n  return [easting, northing];\n}\n\n/**\n * @param {number} zone The zone number.\n * @return {number} The central longitude in degrees.\n */\nfunction zoneToCentralLongitude(zone) {\n  return (zone - 1) * 6 - 180 + 3;\n}\n\n/**\n * @type {Array<RegExp>}\n */\nconst epsgRegExes = [\n  /^EPSG:(\\d+)$/,\n  /^urn:ogc:def:crs:EPSG::(\\d+)$/,\n  /^http:\\/\\/www\\.opengis\\.net\\/def\\/crs\\/EPSG\\/0\\/(\\d+)$/,\n];\n\n/**\n * @param {string} code The projection code.\n * @return {UTMZone|null} The UTM zone info (or null if not UTM).\n */\nexport function zoneFromCode(code) {\n  let epsgId = 0;\n  for (const re of epsgRegExes) {\n    const match = code.match(re);\n    if (match) {\n      epsgId = parseInt(match[1]);\n      break;\n    }\n  }\n  if (!epsgId) {\n    return null;\n  }\n\n  let number = 0;\n  let north = false;\n  if (epsgId > 32700 && epsgId < 32761) {\n    number = epsgId - 32700;\n  } else if (epsgId > 32600 && epsgId < 32661) {\n    north = true;\n    number = epsgId - 32600;\n  }\n  if (!number) {\n    return null;\n  }\n\n  return {number, north};\n}\n\n/**\n * @param {function(number, number, UTMZone): import('../coordinate.js').Coordinate} transformer The transformer.\n * @param {UTMZone} zone The UTM zone.\n * @return {import('../proj.js').TransformFunction} The transform function.\n */\nfunction makeTransformFunction(transformer, zone) {\n  return function (input, output, dimension, stride) {\n    const length = input.length;\n    dimension = dimension > 1 ? dimension : 2;\n    stride = stride ?? dimension;\n    if (!output) {\n      if (dimension > 2) {\n        output = input.slice();\n      } else {\n        output = new Array(length);\n      }\n    }\n    for (let i = 0; i < length; i += stride) {\n      const x = input[i];\n      const y = input[i + 1];\n      const coord = transformer(x, y, zone);\n      output[i] = coord[0];\n      output[i + 1] = coord[1];\n    }\n    return output;\n  };\n}\n\n/**\n * @param {string} code The projection code.\n * @return {import('./Projection.js').default|null} A projection or null if unable to create one.\n */\nexport function makeProjection(code) {\n  const zone = zoneFromCode(code);\n  if (!zone) {\n    return null;\n  }\n  return new Projection({code, units: 'm'});\n}\n\n/**\n * @param {import('./Projection.js').default} projection The projection.\n * @return {import('../proj.js').Transforms|null} The transforms lookup or null if unable to handle projection.\n */\nexport function makeTransforms(projection) {\n  const zone = zoneFromCode(projection.getCode());\n  if (!zone) {\n    return null;\n  }\n\n  return {\n    forward: makeTransformFunction(fromLonLat, zone),\n    inverse: makeTransformFunction(toLonLat, zone),\n  };\n}\n","/**\n * @module ol/proj\n */\n\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection~Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport Projection from './proj/Projection.js';\nimport {\n  PROJECTIONS as EPSG3857_PROJECTIONS,\n  fromEPSG4326,\n  toEPSG4326,\n} from './proj/epsg3857.js';\nimport {PROJECTIONS as EPSG4326_PROJECTIONS} from './proj/epsg4326.js';\nimport {METERS_PER_UNIT} from './proj/Units.js';\nimport {\n  add as addProj,\n  clear as clearProj,\n  get as getProj,\n} from './proj/projections.js';\nimport {\n  add as addTransformFunc,\n  clear as clearTransformFuncs,\n  get as getTransformFunc,\n} from './proj/transforms.js';\nimport {applyTransform, getWidth} from './extent.js';\nimport {clamp, modulo} from './math.js';\nimport {equals, getWorldsAway} from './coordinate.js';\nimport {getDistance} from './sphere.js';\nimport {\n  makeProjection as makeUTMProjection,\n  makeTransforms as makeUTMTransforms,\n} from './proj/utm.js';\nimport {warn} from './console.js';\n\n/**\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n\n/**\n * @typedef {Object} Transforms\n * @property {TransformFunction} forward The forward transform (from geographic).\n * @property {TransformFunction} inverse The inverse transform (to geographic).\n */\n\n/**\n * @type {Array<function(Projection): Transforms|null>}\n */\nconst transformFactories = [makeUTMTransforms];\n\n/**\n * @type {Array<function(string): Projection|null>}\n */\nconst projectionFactories = [makeUTMProjection];\n\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @callback TransformFunction\n * @param {Array<number>} input\n * @param {Array<number>} [output]\n * @param {number} [dimension]\n * @param {number} [stride]\n * @return {Array<number>}\n *\n * @api\n */\n\nexport {METERS_PER_UNIT};\n\nexport {Projection};\n\nlet showCoordinateWarning = true;\n\n/**\n * @param {boolean} [disable = true] Disable console info about `useGeographic()`\n */\nexport function disableCoordinateWarning(disable) {\n  const hide = disable === undefined ? true : disable;\n  showCoordinateWarning = !hide;\n}\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\nexport function cloneTransform(input, output) {\n  if (output !== undefined) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      output[i] = input[i];\n    }\n    output = output;\n  } else {\n    output = input.slice();\n  }\n  return output;\n}\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\nexport function identityTransform(input, output) {\n  if (output !== undefined && input !== output) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      output[i] = input[i];\n    }\n    input = output;\n  }\n  return input;\n}\n\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\nexport function addProjection(projection) {\n  addProj(projection.getCode(), projection);\n  addTransformFunc(projection, projection, cloneTransform);\n}\n\n/**\n * @param {Array<Projection>} projections Projections.\n */\nexport function addProjections(projections) {\n  projections.forEach(addProjection);\n}\n\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection|null} Projection object, or null if not in list.\n * @api\n */\nexport function get(projectionLike) {\n  if (!(typeof projectionLike === 'string')) {\n    return projectionLike;\n  }\n  const projection = getProj(projectionLike);\n  if (projection) {\n    return projection;\n  }\n  for (const makeProjection of projectionFactories) {\n    const projection = makeProjection(projectionLike);\n    if (projection) {\n      return projection;\n    }\n  }\n  return null;\n}\n\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the `point` pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {import(\"./proj/Units.js\").Units} [units] Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\nexport function getPointResolution(projection, resolution, point, units) {\n  projection = get(projection);\n  let pointResolution;\n  const getter = projection.getPointResolutionFunc();\n  if (getter) {\n    pointResolution = getter(resolution, point);\n    if (units && units !== projection.getUnits()) {\n      const metersPerUnit = projection.getMetersPerUnit();\n      if (metersPerUnit) {\n        pointResolution =\n          (pointResolution * metersPerUnit) / METERS_PER_UNIT[units];\n      }\n    }\n  } else {\n    const projUnits = projection.getUnits();\n    if ((projUnits == 'degrees' && !units) || units == 'degrees') {\n      pointResolution = resolution;\n    } else {\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\n      // measuring its width and height on the normal sphere, and taking the\n      // average of the width and height.\n      const toEPSG4326 = getTransformFromProjections(\n        projection,\n        get('EPSG:4326'),\n      );\n      if (!toEPSG4326 && projUnits !== 'degrees') {\n        // no transform is available\n        pointResolution = resolution * projection.getMetersPerUnit();\n      } else {\n        let vertices = [\n          point[0] - resolution / 2,\n          point[1],\n          point[0] + resolution / 2,\n          point[1],\n          point[0],\n          point[1] - resolution / 2,\n          point[0],\n          point[1] + resolution / 2,\n        ];\n        vertices = toEPSG4326(vertices, vertices, 2);\n        const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n        const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n        pointResolution = (width + height) / 2;\n      }\n      const metersPerUnit = units\n        ? METERS_PER_UNIT[units]\n        : projection.getMetersPerUnit();\n      if (metersPerUnit !== undefined) {\n        pointResolution /= metersPerUnit;\n      }\n    }\n  }\n  return pointResolution;\n}\n\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\nexport function addEquivalentProjections(projections) {\n  addProjections(projections);\n  projections.forEach(function (source) {\n    projections.forEach(function (destination) {\n      if (source !== destination) {\n        addTransformFunc(source, destination, cloneTransform);\n      }\n    });\n  });\n}\n\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\nexport function addEquivalentTransforms(\n  projections1,\n  projections2,\n  forwardTransform,\n  inverseTransform,\n) {\n  projections1.forEach(function (projection1) {\n    projections2.forEach(function (projection2) {\n      addTransformFunc(projection1, projection2, forwardTransform);\n      addTransformFunc(projection2, projection1, inverseTransform);\n    });\n  });\n}\n\n/**\n * Clear all cached projections and transforms.\n */\nexport function clearAllProjections() {\n  clearProj();\n  clearTransformFuncs();\n}\n\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\nexport function createProjection(projection, defaultCode) {\n  if (!projection) {\n    return get(defaultCode);\n  }\n  if (typeof projection === 'string') {\n    return get(projection);\n  }\n  return /** @type {Projection} */ (projection);\n}\n\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n  return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>} [output] Output.\n     * @param {number} [dimension] Dimensions that should be transformed.\n     * @param {number} [stride] Stride.\n     * @return {Array<number>} Output.\n     */\n    function (input, output, dimension, stride) {\n      const length = input.length;\n      dimension = dimension !== undefined ? dimension : 2;\n      stride = stride ?? dimension;\n      output = output !== undefined ? output : new Array(length);\n      for (let i = 0; i < length; i += stride) {\n        const point = coordTransform(input.slice(i, i + dimension));\n        const pointLength = point.length;\n        for (let j = 0, jj = stride; j < jj; ++j) {\n          output[i + j] = j >= pointLength ? input[i + j] : point[j];\n        }\n      }\n      return output;\n    }\n  );\n}\n\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only\n *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate\n *     with only the length it can transform. The other dimensions will be taken unchanged from the\n *     source.\n * @api\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n  const sourceProj = get(source);\n  const destProj = get(destination);\n  addTransformFunc(\n    sourceProj,\n    destProj,\n    createTransformFromCoordinateTransform(forward),\n  );\n  addTransformFunc(\n    destProj,\n    sourceProj,\n    createTransformFromCoordinateTransform(inverse),\n  );\n}\n\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike} [projection] Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\nexport function fromLonLat(coordinate, projection) {\n  disableCoordinateWarning();\n  return transform(\n    coordinate,\n    'EPSG:4326',\n    projection !== undefined ? projection : 'EPSG:3857',\n  );\n}\n\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike} [projection] Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\nexport function toLonLat(coordinate, projection) {\n  const lonLat = transform(\n    coordinate,\n    projection !== undefined ? projection : 'EPSG:3857',\n    'EPSG:4326',\n  );\n  const lon = lonLat[0];\n  if (lon < -180 || lon > 180) {\n    lonLat[0] = modulo(lon + 180, 360) - 180;\n  }\n  return lonLat;\n}\n\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\nexport function equivalent(projection1, projection2) {\n  if (projection1 === projection2) {\n    return true;\n  }\n  const equalUnits = projection1.getUnits() === projection2.getUnits();\n  if (projection1.getCode() === projection2.getCode()) {\n    return equalUnits;\n  }\n  const transformFunc = getTransformFromProjections(projection1, projection2);\n  return transformFunc === cloneTransform && equalUnits;\n}\n\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} source Source Projection object.\n * @param {Projection} destination Destination Projection\n *     object.\n * @return {TransformFunction|null} Transform function.\n */\nexport function getTransformFromProjections(source, destination) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  let transformFunc = getTransformFunc(sourceCode, destinationCode);\n  if (transformFunc) {\n    return transformFunc;\n  }\n\n  /**\n   * @type {Transforms|null}\n   */\n  let sourceTransforms = null;\n\n  /**\n   * @type {Transforms|null}\n   */\n  let destinationTransforms = null;\n\n  // lazily add projections if we have supported transforms\n  for (const makeTransforms of transformFactories) {\n    if (!sourceTransforms) {\n      sourceTransforms = makeTransforms(source);\n    }\n    if (!destinationTransforms) {\n      destinationTransforms = makeTransforms(destination);\n    }\n  }\n\n  if (!sourceTransforms && !destinationTransforms) {\n    return null;\n  }\n\n  const intermediateCode = 'EPSG:4326';\n  if (!destinationTransforms) {\n    const toDestination = getTransformFunc(intermediateCode, destinationCode);\n    if (toDestination) {\n      transformFunc = composeTransformFuncs(\n        sourceTransforms.inverse,\n        toDestination,\n      );\n    }\n  } else if (!sourceTransforms) {\n    const fromSource = getTransformFunc(sourceCode, intermediateCode);\n    if (fromSource) {\n      transformFunc = composeTransformFuncs(\n        fromSource,\n        destinationTransforms.forward,\n      );\n    }\n  } else {\n    transformFunc = composeTransformFuncs(\n      sourceTransforms.inverse,\n      destinationTransforms.forward,\n    );\n  }\n\n  if (transformFunc) {\n    addProjection(source);\n    addProjection(destination);\n    addTransformFunc(source, destination, transformFunc);\n  }\n\n  return transformFunc;\n}\n\n/**\n * @param {TransformFunction} t1 The first transform function.\n * @param {TransformFunction} t2 The second transform function.\n * @return {TransformFunction} The composed transform function.\n */\nfunction composeTransformFuncs(t1, t2) {\n  return function (input, output, dimensions, stride) {\n    output = t1(input, output, dimensions, stride);\n    return t2(output, output, dimensions, stride);\n  };\n}\n\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\nexport function getTransform(source, destination) {\n  const sourceProjection = get(source);\n  const destinationProjection = get(destination);\n  return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original). If there\n * is no available transform between the two projection, the function will throw\n * an error.\n *\n * See {@link module:ol/proj.transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\nexport function transform(coordinate, source, destination) {\n  const transformFunc = getTransform(source, destination);\n  if (!transformFunc) {\n    const sourceCode = get(source).getCode();\n    const destinationCode = get(destination).getCode();\n    throw new Error(\n      `No transform available between ${sourceCode} and ${destinationCode}`,\n    );\n  }\n  return transformFunc(coordinate, undefined, coordinate.length);\n}\n\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\nexport function transformExtent(extent, source, destination, stops) {\n  const transformFunc = getTransform(source, destination);\n  return applyTransform(extent, transformFunc, undefined, stops);\n}\n\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\nexport function transformWithProjections(\n  point,\n  sourceProjection,\n  destinationProjection,\n) {\n  const transformFunc = getTransformFromProjections(\n    sourceProjection,\n    destinationProjection,\n  );\n  return transformFunc(point);\n}\n\n/**\n * @type {Projection|null}\n */\nlet userProjection = null;\n\n/**\n * Set the projection for coordinates supplied from and returned by API methods.\n * This includes all API methods except for those interacting with tile grids,\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\n * @param {ProjectionLike} projection The user projection.\n * @api\n */\nexport function setUserProjection(projection) {\n  userProjection = get(projection);\n}\n\n/**\n * Clear the user projection if set.\n * @api\n */\nexport function clearUserProjection() {\n  userProjection = null;\n}\n\n/**\n * Get the projection for coordinates supplied from and returned by API methods.\n * @return {Projection|null} The user projection (or null if not set).\n * @api\n */\nexport function getUserProjection() {\n  return userProjection;\n}\n\n/**\n * Use geographic coordinates (WGS-84 datum) in API methods.\n * This includes all API methods except for those interacting with tile grids,\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\n * @api\n */\nexport function useGeographic() {\n  setUserProjection('EPSG:4326');\n}\n\n/**\n * Return a coordinate transformed into the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\n * @return {Array<number>} The input coordinate in the user projection.\n */\nexport function toUserCoordinate(coordinate, sourceProjection) {\n  if (!userProjection) {\n    return coordinate;\n  }\n  return transform(coordinate, sourceProjection, userProjection);\n}\n\n/**\n * Return a coordinate transformed from the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {Array<number>} The input coordinate transformed.\n */\nexport function fromUserCoordinate(coordinate, destProjection) {\n  if (!userProjection) {\n    if (\n      showCoordinateWarning &&\n      !equals(coordinate, [0, 0]) &&\n      coordinate[0] >= -180 &&\n      coordinate[0] <= 180 &&\n      coordinate[1] >= -90 &&\n      coordinate[1] <= 90\n    ) {\n      showCoordinateWarning = false;\n      warn(\n        'Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.',\n      );\n    }\n    return coordinate;\n  }\n  return transform(coordinate, userProjection, destProjection);\n}\n\n/**\n * Return an extent transformed into the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} sourceProjection The input extent projection.\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\n */\nexport function toUserExtent(extent, sourceProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, sourceProjection, userProjection);\n}\n\n/**\n * Return an extent transformed from the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\n */\nexport function fromUserExtent(extent, destProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, userProjection, destProjection);\n}\n\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in input projection units per pixel.\n * @param {ProjectionLike} sourceProjection The input projection.\n * @return {number} Resolution in user projection units per pixel.\n */\nexport function toUserResolution(resolution, sourceProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  const sourceMetersPerUnit = get(sourceProjection).getMetersPerUnit();\n  const userMetersPerUnit = userProjection.getMetersPerUnit();\n  return sourceMetersPerUnit && userMetersPerUnit\n    ? (resolution * sourceMetersPerUnit) / userMetersPerUnit\n    : resolution;\n}\n\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in user projection units per pixel.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {number} Resolution in destination projection units per pixel.\n */\nexport function fromUserResolution(resolution, destProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  const destMetersPerUnit = get(destProjection).getMetersPerUnit();\n  const userMetersPerUnit = userProjection.getMetersPerUnit();\n  return destMetersPerUnit && userMetersPerUnit\n    ? (resolution * userMetersPerUnit) / destMetersPerUnit\n    : resolution;\n}\n\n/**\n * Creates a safe coordinate transform function from a coordinate transform function.\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\n * and that coordinates exceeding the source projection validity extent's range will be\n * clamped to the validity range.\n * @param {Projection} sourceProj Source projection.\n * @param {Projection} destProj Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destination).\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destination).\n */\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\n  return function (coord) {\n    let transformed, worldsAway;\n    if (sourceProj.canWrapX()) {\n      const sourceExtent = sourceProj.getExtent();\n      const sourceExtentWidth = getWidth(sourceExtent);\n      coord = coord.slice(0);\n      worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\n      if (worldsAway) {\n        // Move x to the real world\n        coord[0] = coord[0] - worldsAway * sourceExtentWidth;\n      }\n      coord[0] = clamp(coord[0], sourceExtent[0], sourceExtent[2]);\n      coord[1] = clamp(coord[1], sourceExtent[1], sourceExtent[3]);\n      transformed = transform(coord);\n    } else {\n      transformed = transform(coord);\n    }\n    if (worldsAway && destProj.canWrapX()) {\n      // Move transformed coordinate back to the offset world\n      transformed[0] += worldsAway * getWidth(destProj.getExtent());\n    }\n    return transformed;\n  };\n}\n\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\nexport function addCommon() {\n  // Add transformations that don't alter coordinates to convert within set of\n  // projections with equal meaning.\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n  // coordinates and back.\n  addEquivalentTransforms(\n    EPSG4326_PROJECTIONS,\n    EPSG3857_PROJECTIONS,\n    fromEPSG4326,\n    toEPSG4326,\n  );\n}\n\naddCommon();\n","/**\n * @module ol/proj/Projection\n */\nimport {METERS_PER_UNIT} from './Units.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").Units} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj.getPointResolution} function will be used.\n */\n\n/**\n * @classdesc\n * In most cases, you should not need to create instances of this class.\n * Instead, where projection information is required, you can use a string\n * projection code or identifier (e.g. `EPSG:4326`) instead of a projection\n * instance.\n *\n * The library includes support for transforming coordinates between the following\n * projections:\n *\n *  * WGS 84 / Geographic - Using codes `EPSG:4326`, `CRS:84`, `urn:ogc:def:crs:EPSG:6.6:4326`,\n *    `urn:ogc:def:crs:OGC:1.3:CRS84`, `urn:ogc:def:crs:OGC:2:84`, `http://www.opengis.net/gml/srs/epsg.xml#4326`,\n *    or `urn:x-ogc:def:crs:EPSG:4326`\n *  * WGS 84 / Spherical Mercator - Using codes `EPSG:3857`, `EPSG:102100`, `EPSG:102113`, `EPSG:900913`,\n *    `urn:ogc:def:crs:EPSG:6.18:3:3857`, or `http://www.opengis.net/gml/srs/epsg.xml#3857`\n *  * WGS 84 / UTM zones - Using codes `EPSG:32601` through `EPSG:32660` for northern zones\n *    and `EPSG:32701` through `EPSG:32760` for southern zones. Note that the built-in UTM transforms\n *    are lower accuracy (with errors on the order of 0.1 m) than those that you might get in a\n *    library like [proj4js](https://github.com/proj4js/proj4js).\n *\n * For additional projection support, or to use higher accuracy transforms than the built-in ones, you can use\n * the [proj4js](https://github.com/proj4js/proj4js) library. With `proj4js`, after adding any new projection\n * definitions, call the {@link module:ol/proj/proj4.register} function.\n *\n * You can use the {@link module:ol/proj.get} function to retrieve a projection instance\n * for one of the registered projections.\n *\n * @api\n */\nclass Projection {\n  /**\n   * @param {Options} options Projection options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     * @type {string}\n     */\n    this.code_ = options.code;\n\n    /**\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\n     * tile.\n     * @private\n     * @type {import(\"./Units.js\").Units}\n     */\n    this.units_ = /** @type {import(\"./Units.js\").Units} */ (options.units);\n\n    /**\n     * Validity extent of the projection in projected coordinates. For projections\n     * with `TILE_PIXELS` units, this is the extent of the tile in\n     * tile pixel space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = options.extent !== undefined ? options.extent : null;\n\n    /**\n     * Extent of the world in EPSG:4326. For projections with\n     * `TILE_PIXELS` units, this is the extent of the tile in\n     * projected coordinate space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.worldExtent_ =\n      options.worldExtent !== undefined ? options.worldExtent : null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.axisOrientation_ =\n      options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.global_ = options.global !== undefined ? options.global : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.canWrapX_ = !!(this.global_ && this.extent_);\n\n    /**\n     * @private\n     * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n     */\n    this.getPointResolutionFunc_ = options.getPointResolution;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.defaultTileGrid_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.metersPerUnit_ = options.metersPerUnit;\n  }\n\n  /**\n   * @return {boolean} The projection is suitable for wrapping the x-axis\n   */\n  canWrapX() {\n    return this.canWrapX_;\n  }\n\n  /**\n   * Get the code for this projection, e.g. 'EPSG:4326'.\n   * @return {string} Code.\n   * @api\n   */\n  getCode() {\n    return this.code_;\n  }\n\n  /**\n   * Get the validity extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the units of this projection.\n   * @return {import(\"./Units.js\").Units} Units.\n   * @api\n   */\n  getUnits() {\n    return this.units_;\n  }\n\n  /**\n   * Get the amount of meters per unit of this projection.  If the projection is\n   * not configured with `metersPerUnit` or a units identifier, the return is\n   * `undefined`.\n   * @return {number|undefined} Meters.\n   * @api\n   */\n  getMetersPerUnit() {\n    return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\n  }\n\n  /**\n   * Get the world extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getWorldExtent() {\n    return this.worldExtent_;\n  }\n\n  /**\n   * Get the axis orientation of this projection.\n   * Example values are:\n   * enu - the default easting, northing, elevation.\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n   *     or south orientated transverse mercator.\n   * wnu - westing, northing, up - some planetary coordinate systems have\n   *     \"west positive\" coordinate systems\n   * @return {string} Axis orientation.\n   * @api\n   */\n  getAxisOrientation() {\n    return this.axisOrientation_;\n  }\n\n  /**\n   * Is this projection a global projection which spans the whole world?\n   * @return {boolean} Whether the projection is global.\n   * @api\n   */\n  isGlobal() {\n    return this.global_;\n  }\n\n  /**\n   * Set if the projection is a global projection which spans the whole world\n   * @param {boolean} global Whether the projection is global.\n   * @api\n   */\n  setGlobal(global) {\n    this.global_ = global;\n    this.canWrapX_ = !!(global && this.extent_);\n  }\n\n  /**\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n   */\n  getDefaultTileGrid() {\n    return this.defaultTileGrid_;\n  }\n\n  /**\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n   */\n  setDefaultTileGrid(tileGrid) {\n    this.defaultTileGrid_ = tileGrid;\n  }\n\n  /**\n   * Set the validity extent for this projection.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  setExtent(extent) {\n    this.extent_ = extent;\n    this.canWrapX_ = !!(this.global_ && extent);\n  }\n\n  /**\n   * Set the world extent for this projection.\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\n   *     [minlon, minlat, maxlon, maxlat].\n   * @api\n   */\n  setWorldExtent(worldExtent) {\n    this.worldExtent_ = worldExtent;\n  }\n\n  /**\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\n   * for this projection.\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n   * @api\n   */\n  setGetPointResolution(func) {\n    this.getPointResolutionFunc_ = func;\n  }\n\n  /**\n   * Get the custom point resolution function for this projection (if set).\n   * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n   * resolution function (if set).\n   */\n  getPointResolutionFunc() {\n    return this.getPointResolutionFunc_;\n  }\n}\n\nexport default Projection;\n","/**\n * @module ol/proj/Units\n */\n\n/**\n * @typedef {'radians' | 'degrees' | 'ft' | 'm' | 'pixels' | 'tile-pixels' | 'us-ft'} Units\n * Projection units.\n */\n\n/**\n * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt\n * @type {Object<number, Units>}\n */\nconst unitByCode = {\n  '9001': 'm',\n  '9002': 'ft',\n  '9003': 'us-ft',\n  '9101': 'radians',\n  '9102': 'degrees',\n};\n\n/**\n * @param {number} code Unit code.\n * @return {Units} Units.\n */\nexport function fromCode(code) {\n  return unitByCode[code];\n}\n\n/**\n * @typedef {Object} MetersPerUnitLookup\n * @property {number} radians Radians\n * @property {number} degrees Degrees\n * @property {number} ft  Feet\n * @property {number} m Meters\n * @property {number} us-ft US feet\n */\n\n/**\n * Meters per unit lookup table.\n * @const\n * @type {MetersPerUnitLookup}\n * @api\n */\nexport const METERS_PER_UNIT = {\n  // use the radius of the Normal sphere\n  'radians': 6370997 / (2 * Math.PI),\n  'degrees': (2 * Math.PI * 6370997) / 360,\n  'ft': 0.3048,\n  'm': 1,\n  'us-ft': 1200 / 3937,\n};\n","/**\n * @module ol/proj/proj4\n */\nimport Projection from './Projection.js';\nimport {\n  addCoordinateTransforms,\n  addEquivalentProjections,\n  addProjection,\n  createSafeCoordinateTransform,\n} from '../proj.js';\nimport {get as getCachedProjection} from './projections.js';\nimport {get as getTransform} from './transforms.js';\n\n/**\n * @type {import(\"proj4\")|null}\n */\nlet registered = null;\n\n/**\n * @return {boolean} Proj4 has been registered.\n */\nexport function isRegistered() {\n  return !!registered;\n}\n\n/**\n * Unsets the shared proj4 previously set with register.\n */\nexport function unregister() {\n  registered = null;\n}\n\n/**\n * Make projections defined in proj4 (with `proj4.defs()`) available in\n * OpenLayers. Requires proj4 >= 2.8.0.\n *\n * This function should be called whenever changes are made to the proj4\n * registry, e.g. after calling `proj4.defs()`. Existing transforms will not be\n * modified by this function.\n *\n * @param {import(\"proj4\")} proj4 Proj4.\n * @api\n */\nexport function register(proj4) {\n  registered = proj4;\n\n  const projCodes = Object.keys(proj4.defs);\n  const len = projCodes.length;\n  let i, j;\n  for (i = 0; i < len; ++i) {\n    const code = projCodes[i];\n    if (!getCachedProjection(code)) {\n      const def = proj4.defs(code);\n      let units = /** @type {import(\"./Units.js\").Units} */ (def.units);\n      if (!units && def.projName === 'longlat') {\n        units = 'degrees';\n      }\n      addProjection(\n        new Projection({\n          code: code,\n          axisOrientation: def.axis,\n          metersPerUnit: def.to_meter,\n          units,\n        }),\n      );\n    }\n  }\n  for (i = 0; i < len; ++i) {\n    const code1 = projCodes[i];\n    const proj1 = getCachedProjection(code1);\n    for (j = 0; j < len; ++j) {\n      const code2 = projCodes[j];\n      const proj2 = getCachedProjection(code2);\n      if (!getTransform(code1, code2)) {\n        if (proj4.defs[code1] === proj4.defs[code2]) {\n          addEquivalentProjections([proj1, proj2]);\n        } else {\n          const transform = proj4(code1, code2);\n          addCoordinateTransforms(\n            proj1,\n            proj2,\n            createSafeCoordinateTransform(proj1, proj2, transform.forward),\n            createSafeCoordinateTransform(proj2, proj1, transform.inverse),\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {number} code The EPSG code.\n * @return {Promise<string>} The proj4 definition.\n */\nlet epsgLookup = async function (code) {\n  const response = await fetch(`https://epsg.io/${code}.proj4`);\n  if (!response.ok) {\n    throw new Error(`Unexpected response from epsg.io: ${response.status}`);\n  }\n  return response.text();\n};\n\n/**\n * Set the lookup function for getting proj4 definitions given an EPSG code.\n * By default, the {@link module:ol/proj/proj4.fromEPSGCode} function uses the\n * epsg.io website for proj4 definitions.  This can be changed by providing a\n * different lookup function.\n *\n * @param {function(number):Promise<string>} func The lookup function.\n * @api\n */\nexport function setEPSGLookup(func) {\n  epsgLookup = func;\n}\n\n/**\n * Get the current EPSG lookup function.\n *\n * @return {function(number):Promise<string>} The EPSG lookup function.\n */\nexport function getEPSGLookup() {\n  return epsgLookup;\n}\n\n/**\n * Get a projection from an EPSG code.  This function fetches the projection\n * definition from the epsg.io website, registers this definition for use with\n * proj4, and returns a configured projection.  You must call import proj4 and\n * call {@link module:ol/proj/proj4.register} before using this function.\n *\n * If the projection definition is already registered with proj4, it will not\n * be fetched again (so it is ok to call this function multiple times with the\n * same code).\n *\n * @param {number|string} code The EPSG code (e.g. 4326 or 'EPSG:4326').\n * @return {Promise<Projection>} The projection.\n * @api\n */\nexport async function fromEPSGCode(code) {\n  if (typeof code === 'string') {\n    code = parseInt(code.split(':').pop(), 10);\n  }\n\n  const proj4 = registered;\n  if (!proj4) {\n    throw new Error('Proj4 must be registered first with register(proj4)');\n  }\n\n  const epsgCode = 'EPSG:' + code;\n  if (proj4.defs(epsgCode)) {\n    return getCachedProjection(epsgCode);\n  }\n\n  proj4.defs(epsgCode, await epsgLookup(code));\n  register(proj4);\n\n  return getCachedProjection(epsgCode);\n}\n\n/**\n * Generate an EPSG lookup function which uses the MapTiler Coordinates API to find projection\n * definitions which do not require proj4 to be configured to handle `+nadgrids` parameters.\n * Call {@link module:ol/proj/proj4.setEPSGLookup} use the function for lookups\n * `setEPSGLookup(epsgLookupMapTiler('{YOUR_MAPTILER_API_KEY_HERE}'))`.\n *\n * @param {string} key MapTiler API key.  Get your own API key at https://www.maptiler.com/cloud/.\n * @return {function(number):Promise<string>} The EPSG lookup function.\n * @api\n */\nexport function epsgLookupMapTiler(key) {\n  return async function (code) {\n    const response = await fetch(\n      `https://api.maptiler.com/coordinates/search/code:${code}.json?transformations=true&exports=true&key=${key}`,\n    );\n    if (!response.ok) {\n      throw new Error(\n        `Unexpected response from maptiler.com: ${response.status}`,\n      );\n    }\n    return response.json().then((json) => {\n      const results = json['results'];\n      if (results?.length > 0) {\n        const result = results.filter(\n          (r) =>\n            r['id']?.['authority'] === 'EPSG' && r['id']?.['code'] === code,\n        )[0];\n        if (result) {\n          const transforms = result['transformations'];\n          if (transforms?.length > 0) {\n            // use default transform if it does not require grids\n            const defaultTransform = result['default_transformation'];\n            if (\n              transforms.filter(\n                (t) =>\n                  t['id']?.['authority'] === defaultTransform?.['authority'] &&\n                  t['id']?.['code'] === defaultTransform?.['code'] &&\n                  t['grids']?.length === 0,\n              ).length > 0\n            ) {\n              return result['exports']?.['proj4'];\n            }\n            // otherwise use most accurate alternative without grids\n            const transform = transforms\n              .filter(\n                (t) =>\n                  t['grids']?.length === 0 &&\n                  t['target_crs']?.['authority'] === 'EPSG' &&\n                  t['target_crs']?.['code'] === 4326 &&\n                  t['deprecated'] === false &&\n                  t['usable'] === true,\n              )\n              .sort((t1, t2) => t1['accuracy'] - t2['accuracy'])[0]?.[\n              'exports'\n            ]?.['proj4'];\n            if (transform) {\n              return transform;\n            }\n          }\n          // fallback to default\n          return result['exports']?.['proj4'];\n        }\n      }\n    });\n  };\n}\n","/**\n * @module ol/proj/projections\n */\n\n/**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */\nlet cache = {};\n\n/**\n * Clear the projections cache.\n */\nexport function clear() {\n  cache = {};\n}\n\n/**\n * Get a cached projection by code.\n * @param {string} code The code for the projection.\n * @return {import(\"./Projection.js\").default|null} The projection (if cached).\n */\nexport function get(code) {\n  return (\n    cache[code] ||\n    cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] ||\n    null\n  );\n}\n\n/**\n * Add a projection to the cache.\n * @param {string} code The projection code.\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\n */\nexport function add(code, projection) {\n  cache[code] = projection;\n}\n","/**\n * @module ol/proj/transforms\n */\nimport {isEmpty} from '../obj.js';\n\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nlet transforms = {};\n\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n  transforms = {};\n}\n\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  const transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n  return transform;\n}\n\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|null} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    return transforms[sourceCode][destinationCode];\n  }\n  return null;\n}\n"],"names":["NUM_100K_SETS","SET_ORIGIN_COLUMN_LETTERS","SET_ORIGIN_ROW_LETTERS","A","I","O","V","Z","forward","inverse","mgrs","bbox","UTMtoLL","decode","toUpperCase","lat","lon","left","bottom","right","top","toPoint","ll","accuracy","utm","seasting","easting","snorthing","northing","zoneNumber","zoneLetter","setParm","get100kSetForZone","setColumn","Math","floor","setRow","column","row","parm","index","colOrigin","charCodeAt","rowOrigin","colInt","rowInt","rollover","String","fromCharCode","substr","length","encode","eccPrimeSquared","N","T","C","M","LongOriginRad","ZoneNumber","Lat","Long","a","eccSquared","k0","LatRad","degToRad","LongRad","sqrt","sin","tan","cos","UTMEasting","UTMNorthing","round","getLetterDesignator","LLtoUTM","deg","PI","radToDeg","rad","N1","T1","C1","R1","D","LongOrigin","mu","phi1Rad","e1","x","y","pow","result","topRight","LetterDesignator","i","mgrsString","testChar","hunK","sb","test","charAt","parseInt","substring","set","east100k","e","curCol","eastingValue","rewindMarker","getEastingFromChar","north100k","n","curRow","northingValue","getNorthingFromChar","getMinNorthing","remainder","accuracyBonus","sepEastingString","sepNorthingString","sep","sepEasting","sepNorthing","parseFloat","Point","z","this","Array","isArray","coords","split","console","warn","fromMGRS","mgrsStr","prototype","toMGRS","Projection","srsCode","callback","error","json","ourProj","projections","get","projName","datumCode","datumDef","datum_params","towgs84","ellps","ellipse","datumName","axis","lat1","lat0","sphere_","b","rf","sphere","ecc","R_A","nadgrids","datumObj","datum","es","ep2","init","start","crs","denorm","point","v","t","xin","yin","zin","out","undefined","indexOf","checkCoord","num","Number","isFinite","TypeError","abs","zone","asin","pp","arg_r","hr","r","hr1","hr2","arg_i","hi2","sin_arg_r","cos_arg_r","sinh_arg_i","cosh_arg_i","j","hi1","hi","exp","sinphi","temp","B","h","cos_2B","h1","h2","max","min","ml","e0","e2","e3","phi","dphi","NaN","eccent","q","log","sin_phi","cos_phi","con","cosphi","ts","eccnth","atan","C00","C02","C04","C06","C08","C22","C44","C46","C48","C66","C68","C88","en","MAX_ITER","arg","k","s","sphi","cphi","esinp","array","m","com","datums","wgs84","ch1903","ggrs87","nad83","nad27","potsdam","carthage","hermannskogel","mgi","osni52","ire65","rassadiran","nzgd49","osgb36","s_jtsk","beduaram","gunung_segara","rnb72","key","exports","ellipseName","WGS84","to_meter","PJD_3PARAM","PJD_7PARAM","PJD_GRIDSHIFT","PJD_WGS84","PJD_NODATUM","SRS_WGS84_SEMIMAJOR","SRS_WGS84_SEMIMINOR","SRS_WGS84_ESQUARED","SEC_TO_RAD","HALF_PI","SIXTH","RA4","RA6","EPSLN","D2R","R2D","FORTPI","TWO_PI","SPI","transformer","from","to","enforceAxis","transformedArray","keys","name","concat","slice","Object","forEach","checkProj","item","oProj","fromProj","toProj","coord","obj","single","datum_type","map","grids","compareDatums","source","dest","geodeticToGeocentric","p","Rn","Sin_Lat","Sin2_Lat","Cos_Lat","Longitude","Latitude","Height","Infinity","geocentricToGeodetic","P","RR","CT","ST","RX","RK","RN","CPHI0","SPHI0","CPHI","SPHI","SDPHI","iter","genau","X","Y","atan2","geocentricToWgs84","Dx_BF","Dy_BF","Dz_BF","Rx_BF","Ry_BF","Rz_BF","M_BF","geocentricFromWgs84","x_tmp","y_tmp","z_tmp","checkParams","type","source_a","source_es","applyGridShift","dest_a","dest_b","dest_es","input","output","attemptedGrids","outer","grid","push","isNull","mandatory","subgrids","jj","subgrid","epsilon","del","minX","minY","maxX","lim","maxY","applySubgridShift","isNaN","pin","ct","val","tb","nadInterpolate","dif","inx","indx","frct","f00","cvs","f10","f11","f01","m11","m10","m00","m01","defs","that","arguments","def","apply","EPSG","ESRI","IAU2000","eccentricity","a2","b2","destination","value","property","GOOGLE","defaultDatum","Proj","nadgrid","transform","version","ignoredChar","match","testkey","lkey","toLowerCase","replace","loadedNadgrids","data","view","DataView","isLittleEndian","nFields","getInt32","detectLittleEndian","header","nSubgridFields","nSubgrids","shiftType","decodeString","trim","fromSemiMajorAxis","getFloat64","fromSemiMinorAxis","toSemiMajorAxis","toSemiMinorAxis","readHeader","gridOffset","subHeader","readGridHeader","nodes","readGridNodes","lngColumnCount","upperLongitude","lowerLongitude","longitudeInterval","latColumnCount","upperLatitude","lowerLatitude","latitudeInterval","secondsToRadians","count","gridNodeCount","mapNodes","readSubgrids","getNadgrids","parseNadgridString","optional","seconds","end","Uint8Array","buffer","longitudeShift","latitudeShift","offset","parent","gridHeader","nodesOffset","gridShiftRecords","record","getFloat32","latitudeAccuracy","longitudeAccuracy","codeWords","codes","code","testObj","testDef","some","word","testWKT","auth","checkMercator","maybeProjStr","ext","checkProjStr","testProj","defData","paramName","paramVal","paramOutname","self","paramObj","filter","reduce","params","proj","lat_0","lat_1","lat_2","lat2","lat_ts","lon_0","long0","lon_1","long1","lon_2","long2","alpha","gamma","rectified_grid_angle","lonc","longc","x_0","x0","y_0","y0","k_0","r_a","south","utmSouth","units","unit","from_greenwich","pm","legalAxis","approx","projs","names","projStore","add","len","sin_po","cos_po","t1","ms1","qs1","t2","ms2","qs2","t3","qs0","ns0","c","rh","qs","rh1","theta","phi1z","eccnts","sin_p12","cos_p12","Mlp","Ml","tanphi","Nl1","Nl","psi","Az","G","H","GH","Hs","kp","cos_c","s2","s3","s4","dlon","acos","sinz","cosz","cosAz","tmp","Ee","F","sinpsi","EPS10","e_fwd","E","lam","am1","m1","e_inv","Error","s_fwd","cphi1","phi1","s_inv","ml0","nl","tl","al","asq","cl","dd","ml1","nl1","rl1","tl1","dl","dsq","title","rc","dlat","ns","ml2","g","A1","A2","A3","A4","paramLat","paramLatSq","paramLatPow6","cgb","cbg","utg","gtu","f","np","Qn","Zb","Ce","Cn","sin_Cn","cos_Cn","sin_Ce","cos_Ce","phic0","ratexp","K","flip_axis","sweep","radius_g_1","radius_g","one_es","rone_es","radius_p","radius_p2","radius_p_inv2","shape","v_x","v_y","v_z","det","v_zp","sin_p14","cos_p14","infinity_dist","coslon","sinc","cosc","s45","s90","fi0","alfa","uq","u0","k1","n0","s0","ro0","ad","gfi","u","deltav","d","eps","ro","delta_lon","czech","fi1","ok","P00","P01","P02","P10","P11","P20","mode","S_POLE","N_POLE","EQUIT","OBLIQ","qp","mmf","apa","APA","authset","rq","xmf","ymf","sinb1","cosb1","sinph0","cosph0","coslam","sinlam","sinb","cosb","cCe","sCe","rho","ab","beta","sin1","cos1","ts1","sin2","cos2","ts2","ts0","f0","identity","pt","delta_theta","B_re","B_im","C_re","C_im","delta_lat","d_phi","d_lambda","d_phi_n","d_psi","th_n_im1","th_re","th_im","th_n_re","th_n_im","z_re","z_im","z_n_im1","delta_x","z_n_re","z_n_im","iterations","num_re","num_im","den_re","den_im","den2","d_psi_n","TOL","L","J","gamma0","projectionName","lamc","lam1","lam2","phi2","alpha_c","no_off","PROJECTION","no_rot","alp","gam","lam0","pi","singam","cosgam","sinrot","cosrot","rB","ArB","BrA","u_0","v_pole_n","v_pole_s","S","U","W","Qp","Sp","Tp","Vp","Up","el","bl","mln","mlnp","ma","FACE_ENUM","AREA_ENUM","qsc_fwd_equat_face_theta","area","qsc_shift_lon_origin","slon","face","one_minus_f","one_minus_f_squared","xy","sinlat","coslat","sinlon","nu","cosmu","tannu","tantheta","invert_sign","xa","lp","COEFS_X","COEFS_Y","FXC","FYC","RC1","NODES","poly3_val","coefs","f_df","max_err","iters","upd","newton_rapshon","poly3_der","C_y","C_x","phy0","lambda0","sinPhy0","semiMajorAxis","flattening","R","b0","k2","k3","Sa1","Sa2","rotI","rotB","lambda","phy","prevPhy","iteration","coslat0","sinlat0","cons","X0","ssfn_","cosX0","sinX0","sinX","cosX","ce","Chi","phit","eccen","sinc0","cosc0","R2","cosl","als","cs","tq","tan_phi","ds","azi","degrees","tilt","bind","pn1","rp","pfact","omega","cg","sg","cw","sw","yt","ba","bm","bq","dependsOn","sinth","costh","gsq","msq","xx","yy","xys","c1","c2","c3","a1","th1","hasZ","checkNotWGS","proj4","knownTypes","d2r","cleanWKT","wkt","ii","setPropertiesFromWkt","AUTHORITY","authority","local","AXIS","axisOrder","UNIT","convert","DATUM","SPHEROID","geogcs","GEOGCS","toMeter","TOWGS84","outName","inName","lisp","txt","Parser","NEUTRAL","whitespace","latin","keyword","endThings","digets","text","level","place","root","stack","currentObject","state","readCharicter","char","neutral","quoted","afterquote","number","afterItem","pop","newObjects","mapit","unshift","thing","newObj","sExpr","shift","_classCallCheck","_defineProperties","o","enumerable","configurable","writable","defineProperty","_createClass","toPropertyKey","Symbol","toPrimitive","call","_typeof","iterator","constructor","proxyMarker","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","proxyTransferHandler","canHandle","serialize","port1","port2","MessageChannel","expose","deserialize","port","ep","target","pendingListeners","Map","addEventListener","ev","id","resolver","delete","createProxy","wrap","transferHandlers","serialized","isError","message","assign","globalThis","allowedOrigins","origin","allowedOrigin","RegExp","isAllowedOrigin","path","argumentList","fromWireValue","returnValue","prop","rawValue","proxy","transfers","transferCache","transfer","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","endpoint","isMessagePort","close","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","isProxyReleased","Proxy","_target","unregister","unregisterProxy","clear","toString","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","arr","handler","serializedValue","msg","fill","random","MAX_SAFE_INTEGER","join","getWorldsAway","coordinate","projection","sourceExtentWidth","projectionExtent","getExtent","worldsAway","canWrapX","getWidth","extent","clamp","toDegrees","angleInRadians","toRadians","angleInDegrees","range","RADIUS","HALF_SIZE","EXTENT","WORLD_EXTENT","MAX_SAFE_Y","EPSG3857Projection","super","global","worldExtent","getPointResolution","resolution","cosh","PROJECTIONS","fromEPSG4326","dimension","stride","toEPSG4326","EPSG4326Projection","axisOrientation","metersPerUnit","epsgRegExes","zoneFromCode","epsgId","re","north","projectionFactories","cloneTransform","addProjection","getCode","projectionLike","makeProjection","addEquivalentProjections","addProjections","createTransformFromCoordinateTransform","coordTransform","pointLength","addCoordinateTransforms","sourceProj","destProj","createSafeCoordinateTransform","transformed","sourceExtent","projections2","forwardTransform","inverseTransform","projection1","projection2","options","code_","units_","extent_","worldExtent_","axisOrientation_","global_","canWrapX_","getPointResolutionFunc_","defaultTileGrid_","metersPerUnit_","getUnits","getMetersPerUnit","getWorldExtent","getAxisOrientation","isGlobal","setGlobal","getDefaultTileGrid","setDefaultTileGrid","tileGrid","setExtent","setWorldExtent","setGetPointResolution","func","getPointResolutionFunc","METERS_PER_UNIT","registered","projCodes","code1","proj1","code2","proj2","cache","transforms","transformFn","sourceCode","destinationCode"],"sourceRoot":""}