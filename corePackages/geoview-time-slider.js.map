{"version":3,"file":"corePackages/geoview-time-slider.js","mappings":"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","sources":["webpack://geoview-core/./src/api/plugin/footer-plugin.ts","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@mui+material@6.1.9_@emotion+react@11.13.5_@emotion+styled@11.13.5_@types+react@18.3.12_react-dom@18.3.1_react@18.3.1/node_modules/@mui/material/NativeSelect/NativeSelect.js","webpack://geoview-core/../geoview-time-slider/src/time-slider.tsx","webpack://geoview-core/../geoview-time-slider/src/time-slider-style.ts","webpack://geoview-core/../geoview-time-slider/src/time-slider-panel.tsx","webpack://geoview-core/../geoview-time-slider/src/index.tsx"],"sourcesContent":["import { TypeTabs } from '@/ui/tabs/tabs';\nimport { AbstractPlugin } from './abstract-plugin';\nimport { logger } from '@/core/utils/logger';\n\n/** ******************************************************************************************************************************\n * Footer Plugin abstract class.\n */\nexport abstract class FooterPlugin extends AbstractPlugin {\n  // Store index of tab\n  value?: number;\n\n  // Store the footer props\n  footerProps?: TypeTabs;\n\n  /**\n   * Overridable function to create footer props content\n   * @returns TypeTabs The footer props content\n   */\n  onCreateContentProps(): TypeTabs {\n    // Override this to create the footer props..\n\n    // Return dummy content\n    return {\n      id: 'some-id',\n      value: this.value!,\n      label: 'Some label',\n      content: `<div>Content for Footer plugin on map id ${this.pluginProps.mapId} goes here...</div>`,\n    };\n  }\n\n  /**\n   * Called when a footer plugin is being added\n   */\n  onAdd(): void {\n    // Log\n    // No need to log, parent class does it well already via added() function.\n\n    // Set value to length of tabs(?)\n    this.value = this.mapViewer().footerBarApi.tabs.length;\n\n    // Create props\n    this.footerProps = this.onCreateContentProps();\n\n    // Create tab with the props\n    this.mapViewer().footerBarApi.createTab(this.footerProps);\n  }\n\n  /**\n   * Called when a footer plugin is being removed\n   */\n  onRemove(): void {\n    // Log\n    // No need to log, parent class does it well already via removed() function.\n\n    // Remove the footer tab\n    if (this.value && this.mapViewer()?.footerBarApi) this.mapViewer().footerBarApi.removeTab(this.footerProps!.id);\n  }\n\n  /**\n   * Called when a footer plugin has been selected in the tabs\n   */\n  // Added eslint-disable here, because we do want to override this method in children and keep 'this'.\n  // eslint-disable-next-line @typescript-eslint/class-methods-use-this\n  onSelected(): void {\n    // Log\n    logger.logTraceCore('FOOTER-PLUGIN - onSelected');\n\n    // TODO: Refactor - Move 'onSelected' in AbstractPlugin class so that AppBar can eventually benefit as well?\n\n    // Nothing else here.. but inherited FooterPlugins might override this method to do stuff when they are selected!\n  }\n}\n","'use client';\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport composeClasses from '@mui/utils/composeClasses';\nimport NativeSelectInput from \"./NativeSelectInput.js\";\nimport formControlState from \"../FormControl/formControlState.js\";\nimport useFormControl from \"../FormControl/useFormControl.js\";\nimport ArrowDropDownIcon from \"../internal/svg-icons/ArrowDropDown.js\";\nimport Input from \"../Input/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getNativeSelectUtilityClasses } from \"./nativeSelectClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getNativeSelectUtilityClasses, classes);\n};\nconst defaultInput = /*#__PURE__*/_jsx(Input, {});\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */\nconst NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(inProps, ref) {\n  const props = useDefaultProps({\n    name: 'MuiNativeSelect',\n    props: inProps\n  });\n  const {\n    className,\n    children,\n    classes: classesProp = {},\n    IconComponent = ArrowDropDownIcon,\n    input = defaultInput,\n    inputProps,\n    variant,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const ownerState = {\n    ...props,\n    classes: classesProp\n  };\n  const classes = useUtilityClasses(ownerState);\n  const {\n    root,\n    ...otherClasses\n  } = classesProp;\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(input, {\n      // Most of the logic is implemented in `NativeSelectInput`.\n      // The `Select` component is a simple API wrapper to expose something better to play with.\n      inputComponent: NativeSelectInput,\n      inputProps: {\n        children,\n        classes: otherClasses,\n        IconComponent,\n        variant: fcs.variant,\n        type: undefined,\n        // We render a select. We can ignore the type provided by the `Input`.\n        ...inputProps,\n        ...(input ? input.props.inputProps : {})\n      },\n      ref,\n      ...other,\n      className: clsx(classes.root, input.props.className, className)\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? NativeSelect.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   * @default <Input />\n   */\n  input: PropTypes.element,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The `input` value. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nNativeSelect.muiName = 'Select';\nexport default NativeSelect;","import { useTheme } from '@mui/material/styles';\nimport { FormControl, InputLabel, NativeSelect } from '@mui/material';\nimport { Box } from 'geoview-core/src/ui';\nimport {\n  useTimeSliderLayers,\n  useTimeSliderStoreActions,\n} from 'geoview-core/src/core/stores/store-interface-and-intial-values/time-slider-state';\nimport { useLayerLegendLayers } from 'geoview-core/src/core/stores/store-interface-and-intial-values/layer-state';\nimport { LegendEventProcessor } from 'geoview-core/src/api/event-processors/event-processor-children/legend-event-processor';\nimport { getLocalizedMessage } from 'geoview-core/src/core/utils/utilities';\nimport { useAppDisplayLanguage } from 'geoview-core/src/core/stores/store-interface-and-intial-values/app-state';\nimport { logger } from 'geoview-core/src/core/utils/logger';\n\nimport { DateMgt } from 'geoview-core/src/core/utils/date-mgt';\nimport { getSxClasses } from './time-slider-style';\nimport { ConfigProps } from './time-slider-types';\n\ninterface TimeSliderProps {\n  config: ConfigProps;\n  mapId: string;\n  layerPath: string;\n}\n\n/**\n * Creates a panel with time sliders\n *\n * @param {TimeSliderProps} props - Time slider properties\n * @returns {JSX.Element} the slider panel\n */\nexport function TimeSlider(props: TimeSliderProps): JSX.Element {\n  // Log\n  logger.logTraceRender('geoview-time-slider/time-slider', props);\n\n  const { cgpv } = window;\n  const { config, layerPath, mapId } = props;\n  const { react, ui } = cgpv;\n  const { useState, useRef, useEffect, useCallback } = react;\n  const {\n    Grid,\n    Slider,\n    Typography,\n    Checkbox,\n    Tooltip,\n    IconButton,\n    LockIcon,\n    LockOpenIcon,\n    ArrowLeftIcon,\n    PlayArrowIcon,\n    PauseIcon,\n    ArrowRightIcon,\n    SwitchRightIcon,\n    SwitchLeftIcon,\n  } = ui.elements;\n\n  const theme = useTheme();\n  const sxClasses = getSxClasses(theme);\n\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const playIntervalRef = useRef<number>();\n\n  // References for play button\n  const sliderValueRef = useRef<number>();\n  const sliderDeltaRef = useRef<number>();\n\n  // Get actions and states from store\n  // TODO: evaluate best option to set value by layer path.... trough a getter?\n  const { setTitle, setDefaultValue, setDescription, setValues, setLocked, setReversed, setDelay, setStep, setFiltering } =\n    useTimeSliderStoreActions();\n  const displayLanguage = useAppDisplayLanguage();\n\n  // TODO: check performance as we should technically have one selector by constant\n  const {\n    title,\n    description,\n    defaultValue,\n    discreteValues,\n    step,\n    range,\n    minAndMax,\n    field,\n    fieldAlias,\n    filtering,\n    singleHandle,\n    values,\n    delay,\n    locked,\n    reversed,\n    displayPattern,\n  } = useTimeSliderLayers()[layerPath];\n\n  // Get name from legend layers\n  const legendLayers = useLayerLegendLayers();\n  const name = LegendEventProcessor.findLayerByPath(legendLayers, layerPath).layerName;\n\n  const timeStampRange = range.map((entry: string | number | Date) =>\n    typeof entry !== 'number' ? DateMgt.convertToMilliseconds(entry) : entry\n  );\n\n  let timeMarks: number[] = [];\n  if (range.length < 4 && discreteValues) {\n    const interval = (DateMgt.convertToMilliseconds(range[range.length - 1]) - DateMgt.convertToMilliseconds(range[0])) / 4;\n    timeMarks = [minAndMax[0], minAndMax[0] + interval, minAndMax[0] + interval * 2, minAndMax[0] + interval * 3, minAndMax[1]];\n  } else if (range.length < 6 || singleHandle) timeMarks = timeStampRange;\n  else {\n    timeMarks = [\n      minAndMax[0],\n      DateMgt.convertToMilliseconds(range[Math.round(range.length / 4)]),\n      DateMgt.convertToMilliseconds(range[Math.round(range.length / 2)]),\n      DateMgt.convertToMilliseconds(range[Math.round((3 * range.length) / 4)]),\n      minAndMax[1],\n    ];\n  }\n\n  const sliderMarks = [];\n  for (let i = 0; i < timeMarks.length; i++) {\n    sliderMarks.push({\n      value: timeMarks[i],\n      // If timeframe is a single day, use time. If it is a single year, drop year from dates.\n      label:\n        displayPattern[1] !== undefined\n          ? DateMgt.formatDatePattern(timeMarks[i], undefined, displayPattern[1])\n          : DateMgt.formatDatePattern(timeMarks[i], displayPattern[0], displayPattern[1]),\n    });\n  }\n\n  /**\n   * Moves the slider handles based on the specified direction.\n   * @param direction - The direction to move the slider ('back' or 'forward').\n   */\n  function moveSlider(direction: 'back' | 'forward'): void {\n    const isForward = direction === 'forward';\n    const stepMove = isForward ? 1 : -1;\n\n    // Handle single handle case with no discrete values\n    if (singleHandle && !discreteValues) {\n      const currentIndex = timeStampRange.indexOf(values[0]);\n      const newIndex =\n        // eslint-disable-next-line no-nested-ternary\n        currentIndex === (isForward ? timeStampRange.length - 1 : 0)\n          ? isForward\n            ? 0\n            : timeStampRange.length - 1\n          : currentIndex + stepMove;\n      setValues(layerPath, [timeStampRange[newIndex]]);\n      return;\n    }\n\n    // Handle single handle case with discrete values\n    if (singleHandle) {\n      const interval = step || (minAndMax[1] - minAndMax[0]) / 20;\n      const newPosition = values[0] + interval * stepMove;\n      // eslint-disable-next-line no-nested-ternary\n      setValues(layerPath, [newPosition > minAndMax[1] ? minAndMax[0] : newPosition < minAndMax[0] ? minAndMax[1] : newPosition]);\n      return;\n    }\n\n    // Handle multi-handle case\n    let [leftHandle, rightHandle] = values;\n\n    // If handles are at the extremes, reset the delta\n    if (rightHandle - leftHandle === minAndMax[1] - minAndMax[0]) {\n      sliderDeltaRef.current = (minAndMax[1] - minAndMax[0]) / 10;\n      setValues(\n        layerPath,\n        isForward ? [leftHandle, leftHandle + sliderDeltaRef.current] : [rightHandle - sliderDeltaRef.current, rightHandle]\n      );\n      return;\n    }\n\n    // Calculate the delta if not already set\n    if (!sliderDeltaRef.current) {\n      sliderDeltaRef.current = rightHandle - leftHandle;\n    }\n\n    const delta = sliderDeltaRef.current * stepMove;\n\n    // Handle locked and reversed case\n    if (locked && reversed) {\n      leftHandle += delta;\n      if ((isForward && leftHandle >= rightHandle) || (!isForward && leftHandle < minAndMax[0])) {\n        [leftHandle] = minAndMax;\n      }\n    }\n    // Handle locked case\n    else if (locked) {\n      if (isForward && rightHandle === minAndMax[1]) rightHandle = leftHandle;\n      rightHandle += delta;\n      if (rightHandle > minAndMax[1]) [, rightHandle] = minAndMax;\n      else if (!isForward && rightHandle < leftHandle) rightHandle = leftHandle;\n      if (!isForward && rightHandle === leftHandle) [, rightHandle] = minAndMax;\n    }\n    // Handle unlocked case\n    else if (isForward) {\n      if (leftHandle < sliderValueRef.current! && rightHandle === sliderValueRef.current) leftHandle = sliderValueRef.current;\n      else leftHandle += delta;\n      if (leftHandle >= minAndMax[1]) [leftHandle] = minAndMax;\n      rightHandle = leftHandle + sliderDeltaRef.current!;\n      if (rightHandle > minAndMax[1]) [, rightHandle] = minAndMax;\n      if (rightHandle > sliderValueRef.current! && leftHandle < sliderValueRef.current!) rightHandle = sliderValueRef.current as number;\n    } else {\n      if (rightHandle > sliderValueRef.current! && leftHandle === sliderValueRef.current) rightHandle = sliderValueRef.current;\n      else rightHandle += delta;\n      if (rightHandle <= minAndMax[0]) [, rightHandle] = minAndMax;\n      leftHandle = rightHandle - sliderDeltaRef.current!;\n      if (leftHandle < minAndMax[0]) [leftHandle] = minAndMax;\n      if (leftHandle < sliderValueRef.current! && rightHandle > sliderValueRef.current!) leftHandle = sliderValueRef.current as number;\n    }\n\n    setValues(layerPath, [leftHandle, rightHandle]);\n  }\n\n  function moveBack(): void {\n    moveSlider('back');\n  }\n\n  function moveForward(): void {\n    moveSlider('forward');\n  }\n\n  // #region USE EFFECT\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('TIME-SLIDER - mount');\n\n    // TODO: add mechanism to initialize these values during store onInitialize\n    const sliderConfig = config?.sliders?.find((o: { layerPaths: string[] }) => o.layerPaths.includes(layerPath));\n    if (title === undefined) setTitle(layerPath, sliderConfig?.title || '');\n    if (description === undefined) setDescription(layerPath, sliderConfig?.description || '');\n    if (locked === undefined) setLocked(layerPath, sliderConfig?.locked !== undefined ? sliderConfig?.locked : false);\n    if (reversed === undefined) setReversed(layerPath, sliderConfig?.reversed !== undefined ? sliderConfig?.reversed : false);\n    if (defaultValue === undefined) setDefaultValue(layerPath, sliderConfig?.defaultValue || '');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('TIME-SLIDER - config layerPath', config, layerPath);\n\n    const sliderConfig = config?.sliders?.find((o: { layerPaths: string[] }) => o.layerPaths.includes(layerPath));\n    if (sliderConfig?.defaultValue) {\n      // update values based on slider's default value\n      const defaultValueIsArray = Array.isArray(sliderConfig?.defaultValue);\n      if (defaultValueIsArray) {\n        setValues(layerPath, [\n          DateMgt.convertToMilliseconds(sliderConfig?.defaultValue[0]),\n          DateMgt.convertToMilliseconds(sliderConfig?.defaultValue[1]),\n        ]);\n      } else if (range.includes(sliderConfig?.defaultValue)) {\n        setValues(layerPath, [DateMgt.convertToMilliseconds(sliderConfig?.defaultValue)]);\n      } else {\n        setValues(layerPath, [DateMgt.convertToMilliseconds(range[0])]);\n      }\n    }\n  }, [config, layerPath, range, setFiltering, setValues]);\n\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('TIME-SLIDER - values filtering', values, filtering);\n\n    // If slider cycle is active, pause before advancing to next increment\n    if (isPlaying) {\n      if (reversed) playIntervalRef.current = window.setTimeout(() => moveBack(), delay);\n      else playIntervalRef.current = window.setTimeout(() => moveForward(), delay);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [values, filtering, reversed, locked]);\n\n  // When slider cycle is activated, advance to first increment without delay\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('TIME-SLIDER - isPlaying', isPlaying);\n\n    if (isPlaying) {\n      if (reversed) moveBack();\n      else moveForward();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPlaying]);\n  // #endregion\n\n  // #region HANDLE FUNCTIONS\n  function handleBack(): void {\n    sliderValueRef.current = reversed ? values[1] : values[0];\n    moveBack();\n  }\n\n  function handleForward(): void {\n    [sliderValueRef.current] = values;\n    moveForward();\n  }\n\n  function handleLock(): void {\n    clearTimeout(playIntervalRef.current);\n    setLocked(layerPath, !locked);\n  }\n\n  function handlePlay(): void {\n    clearTimeout(playIntervalRef.current);\n    sliderValueRef.current = reversed ? values[1] : values[0];\n    setIsPlaying(!isPlaying);\n  }\n\n  function handleReverse(): void {\n    clearTimeout(playIntervalRef.current);\n    setReversed(layerPath, !reversed);\n    if (isPlaying) {\n      if (reversed) moveBack();\n      else moveForward();\n    }\n  }\n\n  function handleTimeChange(event: React.ChangeEvent<HTMLSelectElement>): void {\n    setDelay(layerPath, event.target.value as unknown as number);\n  }\n\n  function handleStepChange(event: React.ChangeEvent<HTMLSelectElement>): void {\n    setStep(layerPath, Number(event.target.value));\n  }\n\n  function handleCheckbox(newValue: boolean): void {\n    setFiltering(layerPath, newValue);\n    if (!newValue) {\n      clearInterval(playIntervalRef.current);\n      setIsPlaying(false);\n    }\n  }\n\n  const handleSliderChange = useCallback(\n    (newValues: number | number[]): void => {\n      // Log\n      logger.logTraceUseCallback('TIME-SLIDER - handleSliderChange', layerPath);\n\n      clearTimeout(playIntervalRef.current);\n      setIsPlaying(false);\n      sliderDeltaRef.current = undefined;\n      setValues(layerPath, newValues as number[]);\n    },\n    [layerPath, setValues]\n  );\n\n  /**\n   * Create labels for values on slider\n   *\n   * @param {number} theValue - The value of the slider handle\n   * @returns {string} A formatted time string or ISO date string\n   */\n  const handleLabelFormat = useCallback(\n    (theValue: number): string => {\n      // Log\n      logger.logTraceUseCallback('TIME-SLIDER - handleLabelFormat', displayPattern);\n\n      // If timeframe is a single day, use time. If it is a single year, drop year from dates.\n      DateMgt.formatDatePattern(values[0], displayPattern[0], displayPattern[1]);\n\n      return DateMgt.formatDatePattern(theValue, displayPattern[0], displayPattern[1]);\n    },\n    [displayPattern, values]\n  );\n  // #endregion\n\n  function returnLockTooltip(): string {\n    if (reversed) {\n      const text = locked\n        ? getLocalizedMessage('timeSlider.slider.unlockRight', displayLanguage)\n        : getLocalizedMessage('timeSlider.slider.lockRight', displayLanguage);\n      return text;\n    }\n    const text = locked\n      ? getLocalizedMessage('timeSlider.slider.unlockLeft', displayLanguage)\n      : getLocalizedMessage('timeSlider.slider.lockLeft', displayLanguage);\n    return text;\n  }\n\n  return (\n    <Grid>\n      <Box sx={{ padding: '0px 10px' }}>\n        <Grid container sx={{ ...sxClasses.rightPanelBtnHolder, flexWrap: 'nowrap' }}>\n          <Grid item xs={9}>\n            <Typography component=\"div\" sx={{ ...sxClasses.panelHeaders, paddingLeft: '20px', paddingTop: '10px' }}>\n              {`${title || name}`}\n              {displayPattern[0] === undefined && ` (${DateMgt.formatDate(defaultValue, 'YYYY-MM-DD')})`}\n            </Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <Box sx={{ textAlign: 'right', marginRight: '25px' }}>\n              <Tooltip\n                title={\n                  filtering\n                    ? getLocalizedMessage('timeSlider.slider.disableFilter', displayLanguage)\n                    : getLocalizedMessage('timeSlider.slider.enableFilter', displayLanguage)\n                }\n                placement=\"top\"\n                enterDelay={1000}\n              >\n                <Checkbox checked={filtering} onChange={(event: never, child: boolean): void => handleCheckbox(child)} />\n              </Tooltip>\n            </Box>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Box sx={{ textAlign: 'center', paddingTop: '20px' }}>\n            <Slider\n              key={values[1] ? values[1] + values[0] : values[0]}\n              sliderId={layerPath}\n              mapId={mapId}\n              style={{ width: '80%', color: 'primary' }}\n              min={minAndMax[0]}\n              max={minAndMax[1]}\n              value={values}\n              marks={sliderMarks}\n              step={discreteValues ? step || 0.1 : null}\n              onChangeCommitted={handleSliderChange}\n              onValueLabelFormat={handleLabelFormat}\n            />\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          <Box sx={{ textAlign: 'center', paddingTop: '20px' }}>\n            {!singleHandle && (\n              <IconButton\n                className=\"buttonOutline\"\n                aria-label={returnLockTooltip()}\n                tooltip={returnLockTooltip()}\n                tooltipPlacement=\"top\"\n                onClick={() => handleLock()}\n              >\n                {locked ? <LockIcon /> : <LockOpenIcon />}\n              </IconButton>\n            )}\n\n            <IconButton\n              className=\"buttonOutline\"\n              aria-label={getLocalizedMessage('timeSlider.slider.back', displayLanguage) as string}\n              tooltip=\"timeSlider.slider.back\"\n              tooltipPlacement=\"top\"\n              disabled={isPlaying || !filtering}\n              onClick={() => handleBack()}\n            >\n              <ArrowLeftIcon />\n            </IconButton>\n\n            <IconButton\n              className=\"buttonOutline\"\n              aria-label={\n                isPlaying\n                  ? (getLocalizedMessage('timeSlider.slider.pauseAnimation', displayLanguage) as string)\n                  : (getLocalizedMessage('timeSlider.slider.playAnimation', displayLanguage) as string)\n              }\n              tooltip={isPlaying ? 'timeSlider.slider.pauseAnimation' : 'timeSlider.slider.playAnimation'}\n              tooltipPlacement=\"top\"\n              disabled={!filtering}\n              onClick={() => handlePlay()}\n            >\n              {!isPlaying ? <PlayArrowIcon /> : <PauseIcon />}\n            </IconButton>\n\n            <IconButton\n              className=\"buttonOutline\"\n              aria-label={getLocalizedMessage('timeSlider.slider.forward', displayLanguage) as string}\n              tooltip=\"timeSlider.slider.forward\"\n              tooltipPlacement=\"top\"\n              disabled={isPlaying || !filtering}\n              onClick={() => handleForward()}\n            >\n              <ArrowRightIcon />\n            </IconButton>\n\n            <IconButton\n              className=\"buttonOutline\"\n              aria-label={getLocalizedMessage('timeSlider.slider.changeDirection', displayLanguage) as string}\n              tooltip=\"timeSlider.slider.changeDirection\"\n              tooltipPlacement=\"top\"\n              onClick={() => handleReverse()}\n            >\n              {reversed ? <SwitchRightIcon /> : <SwitchLeftIcon />}\n            </IconButton>\n\n            <Box component=\"span\" sx={{ paddingLeft: '10px' }}>\n              <FormControl sx={{ width: '100px' }}>\n                <InputLabel variant=\"standard\">{getLocalizedMessage('timeSlider.slider.timeDelay', displayLanguage)}</InputLabel>\n                <NativeSelect\n                  defaultValue={delay}\n                  inputProps={{\n                    name: 'timeDelay',\n                    onChange: (event) => handleTimeChange(event),\n                  }}\n                >\n                  <option value={500}>0.5s</option>\n                  <option value={750}>0.75s</option>\n                  <option value={1000}>1.0s</option>\n                  <option value={1500}>1.5s</option>\n                  <option value={2000}>2.0s</option>\n                  <option value={3000}>3.0s</option>\n                  <option value={5000}>5.0s</option>\n                </NativeSelect>\n              </FormControl>\n            </Box>\n            {singleHandle && discreteValues && (\n              <Box component=\"span\" sx={{ paddingLeft: '10px' }}>\n                <FormControl sx={{ width: '100px' }}>\n                  <InputLabel variant=\"standard\">{getLocalizedMessage('timeSlider.slider.stepValue', displayLanguage)}</InputLabel>\n                  <NativeSelect\n                    defaultValue={step}\n                    inputProps={{\n                      name: 'timeStep',\n                      onChange: (event) => handleStepChange(event),\n                    }}\n                  >\n                    <option value={3600000}>{getLocalizedMessage('timeSlider.slider.hour', displayLanguage)}</option>\n                    <option value={86400000}>{getLocalizedMessage('timeSlider.slider.day', displayLanguage)}</option>\n                    <option value={604800000}>{getLocalizedMessage('timeSlider.slider.week', displayLanguage)}</option>\n                    <option value={2592000000}>{getLocalizedMessage('timeSlider.slider.month', displayLanguage)}</option>\n                    <option value={31536000000}>{getLocalizedMessage('timeSlider.slider.year', displayLanguage)}</option>\n                  </NativeSelect>\n                </FormControl>\n              </Box>\n            )}\n          </Box>\n        </Grid>\n        {description && (\n          <Grid item xs={12}>\n            <Typography component=\"div\" sx={{ px: '20px', py: '5px' }}>\n              {description}\n            </Typography>\n          </Grid>\n        )}\n        {fieldAlias && (\n          <Grid item xs={12}>\n            <Typography component=\"div\" sx={{ px: '20px', py: '5px' }}>\n              {`${getLocalizedMessage('timeSlider.slider.temporalField', displayLanguage)}${fieldAlias} (${field})`}\n            </Typography>\n          </Grid>\n        )}\n      </Box>\n    </Grid>\n  );\n}\n","import { Theme } from '@mui/material/styles';\n\n// ? I doubt we want to define an explicit type for style properties?\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const getSxClasses = (theme: Theme): any => ({\n  panelHeaders: {\n    fontSize: theme.palette.geoViewFontSize.lg,\n    fontWeight: '600',\n    marginBottom: '20px',\n  },\n  rightPanelBtnHolder: {\n    marginTop: '20px',\n    marginBottom: '9px',\n    boxShadow: '0px 12px 9px -13px #E0E0E0',\n  },\n});\n","import { TypeWindow } from 'geoview-core/src/core/types/global-types';\nimport { LayerListEntry, Layout } from 'geoview-core/src/core/components/common';\nimport {\n  TypeTimeSliderValues,\n  useTimeSliderLayers,\n  useTimeSliderSelectedLayerPath,\n  useTimeSliderStoreActions,\n} from 'geoview-core/src/core/stores/store-interface-and-intial-values/time-slider-state';\nimport { useMapVisibleLayers } from 'geoview-core/src/core/stores/store-interface-and-intial-values/map-state';\nimport { useLayerLegendLayers } from 'geoview-core/src/core/stores/store-interface-and-intial-values/layer-state';\nimport { LegendEventProcessor } from 'geoview-core/src/api/event-processors/event-processor-children/legend-event-processor';\nimport { Box } from 'geoview-core/src/ui';\nimport { logger } from 'geoview-core/src/core/utils/logger';\nimport { TABS } from 'geoview-core/src/core/utils/constant';\n\nimport { ReactNode } from 'react';\nimport { DateMgt } from 'geoview-core/src/core/utils/date-mgt';\nimport { TimeSlider } from './time-slider';\nimport { ConfigProps } from './time-slider-types';\n\ninterface TypeTimeSliderProps {\n  configObj: ConfigProps;\n  mapId: string;\n}\n\n/**\n * Time slider tab\n *\n * @param {TypeTimeSliderProps} props The properties passed to slider\n * @returns {JSX.Element} the time slider tab\n */\nexport function TimeSliderPanel(props: TypeTimeSliderProps): JSX.Element {\n  const { mapId, configObj } = props;\n  const { cgpv } = window as TypeWindow;\n  const { react } = cgpv;\n  const { useCallback, useMemo, useEffect } = react;\n\n  // get values from store\n  const visibleLayers = useMapVisibleLayers() as string[];\n  const timeSliderLayers = useTimeSliderLayers();\n  const selectedLayerPath = useTimeSliderSelectedLayerPath();\n  const { setSelectedLayerPath } = useTimeSliderStoreActions();\n  const legendLayers = useLayerLegendLayers();\n\n  /**\n   * handle Layer list when clicked on each layer.\n   * @param {LayerListEntry} layer layer clicked by the user.\n   */\n  const handleClickLayerList = useCallback(\n    (layer: LayerListEntry) => {\n      // Log\n      logger.logTraceUseCallback('TIME-SLIDER-PANEL - handleLayerList');\n\n      // Set the layer path\n      setSelectedLayerPath(layer.layerPath);\n    },\n    [setSelectedLayerPath]\n  );\n\n  /**\n   * Get dates for current filters\n   * @param {TypeTimeSliderValuesListEntry} timeSliderLayerInfo Time slider layer info.\n   */\n  const getFilterInfo = (timeSliderLayerInfo: TypeTimeSliderValues): string | null => {\n    if (timeSliderLayerInfo.filtering) {\n      const { values } = timeSliderLayerInfo;\n      const [datePattern, timePattern] = [...timeSliderLayerInfo.displayPattern];\n      return timeSliderLayerInfo.values.length === 1\n        ? DateMgt.formatDatePattern(values[0], 'day', timePattern)\n        : `${DateMgt.formatDatePattern(values[0], datePattern, timePattern)} / ${DateMgt.formatDatePattern(\n            values[1],\n            datePattern,\n            timePattern\n          )}`;\n    }\n\n    return null;\n  };\n\n  // Reacts when the array of layer data updates\n  const memoLayersList = useMemo(() => {\n    // Log\n    logger.logTraceUseMemo('TIME-SLIDER-PANEL - memoLayersList', timeSliderLayers);\n\n    /**\n     * Create layer tooltip\n     * @param {TypeTimeSliderValues} timeSliderLayerInfo Time slider layer info.\n     * @param {string} name Time slider layer name.\n     * @returns\n     */\n    const getLayerTooltip = (timeSliderLayerInfo: TypeTimeSliderValues, name: string): ReactNode => {\n      return (\n        <Box sx={{ display: 'flex', alignContent: 'center', '& svg ': { width: '0.75em', height: '0.75em' } }}>\n          {name}\n          {timeSliderLayerInfo.filtering && `: ${getFilterInfo(timeSliderLayerInfo)}`}\n        </Box>\n      );\n    };\n\n    // Return the layers\n    return visibleLayers\n      .map((layerPath) => {\n        return { layerPath, timeSliderLayerInfo: timeSliderLayers[layerPath!] };\n      })\n      .filter((layer) => layer && layer.timeSliderLayerInfo)\n      .map((layer) => {\n        return {\n          layerName: LegendEventProcessor.findLayerByPath(legendLayers, layer.layerPath).layerName,\n          layerPath: layer.layerPath,\n          layerFeatures: getFilterInfo(layer.timeSliderLayerInfo),\n          tooltip: getLayerTooltip(\n            layer.timeSliderLayerInfo,\n            LegendEventProcessor.findLayerByPath(legendLayers, layer.layerPath).layerName\n          ),\n          layerStatus: 'loaded',\n          queryStatus: 'processed',\n          layerUniqueId: `${mapId}-${TABS.TIME_SLIDER}-${layer.layerPath}`,\n        } as LayerListEntry;\n      });\n  }, [legendLayers, timeSliderLayers, visibleLayers, mapId]);\n\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('TIME-SLIDER-PANEL - memoLayersList', memoLayersList, selectedLayerPath);\n\n    // If the selected layer path isn't in the list of layers possible, clear it\n    if (selectedLayerPath && !memoLayersList.map((layer: { layerPath: string }) => layer.layerPath).includes(selectedLayerPath)) {\n      // Clear the selected layer path\n      setSelectedLayerPath('');\n    }\n  }, [memoLayersList, selectedLayerPath, setSelectedLayerPath]);\n\n  const handleGuideIsOpen = useCallback(\n    (guideIsOpen: boolean): void => {\n      if (guideIsOpen) {\n        setSelectedLayerPath('');\n      }\n    },\n    [setSelectedLayerPath]\n  );\n\n  /**\n   * Render the right panel content based on selected Layer path of time slider.\n   * NOTE: Here we return null, so that in responsive grid layout, it can be used as flag to render the guide for time slider.\n   * @returns {JSX.Element | null} JSX.Element | null\n   */\n  const renderContent = (): JSX.Element | null => {\n    if (selectedLayerPath) {\n      return <TimeSlider mapId={mapId} config={configObj} layerPath={selectedLayerPath} key={selectedLayerPath} />;\n    }\n\n    return null;\n  };\n\n  return (\n    <Layout\n      selectedLayerPath={selectedLayerPath}\n      onLayerListClicked={handleClickLayerList}\n      layerList={memoLayersList}\n      onGuideIsOpen={handleGuideIsOpen}\n      guideContentIds={['timeSlider']}\n    >\n      {renderContent()}\n    </Layout>\n  );\n}\n","import { TypeJsonObject, toJsonObject, Cast, AnySchemaObject } from 'geoview-core/src/core/types/global-types';\nimport { TimeDimension, DateMgt } from 'geoview-core/src/core/utils/date-mgt';\nimport { TypeTabs } from 'geoview-core/src/ui/tabs/tabs';\nimport { TimeSliderIcon } from 'geoview-core/src/ui';\nimport { FooterPlugin } from 'geoview-core/src/api/plugin/footer-plugin';\nimport { TimeSliderEventProcessor } from 'geoview-core/src/api/event-processors/event-processor-children/time-slider-event-processor';\n\nimport { TimeSliderPanel } from './time-slider-panel';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-time-slider-panel.json';\nimport { SliderProps } from './time-slider-types';\n\nexport interface SliderFilterProps {\n  title: string;\n  description: string;\n  range: string[];\n  defaultValue: string;\n  minAndMax: number[];\n  field: string;\n  singleHandle: boolean;\n  values: number[];\n  filtering: boolean;\n  delay: number;\n  locked: boolean;\n  reversed: boolean;\n}\n\n/**\n * Time slider plugin\n */\nclass TimeSliderPlugin extends FooterPlugin {\n  /**\n   * Return the schema that is defined for this package\n   *\n   * @returns {AnySchemaObject} returns the schema for this package\n   */\n  override schema(): AnySchemaObject {\n    return schema;\n  }\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  override defaultConfig(): TypeJsonObject {\n    return toJsonObject(defaultConfig);\n  }\n\n  /**\n   * Translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      timeSlider: {\n        title: 'Time Slider',\n        panel: {\n          noLayers: 'No layers with temporal data',\n        },\n        slider: {\n          unlockRight: 'Unlock right handle',\n          unlockLeft: 'Unlock left handle',\n          lockRight: 'Lock right handle',\n          lockLeft: 'Lock left handle',\n          disableFilter: 'Disable Filtering',\n          enableFilter: 'Enable Filtering',\n          pauseAnimation: 'Pause animation',\n          playAnimation: 'Play animation',\n          back: 'Back',\n          forward: 'Forward',\n          changeDirection: 'Change animation direction',\n          timeDelay: 'Animation delay',\n          stepValue: 'Step value',\n          hour: 'Hour',\n          day: 'Day',\n          week: 'Week',\n          month: 'Month',\n          year: 'Year',\n          temporalField: 'Temporal Field: ',\n        },\n      },\n    },\n    fr: {\n      timeSlider: {\n        title: 'Curseur Temporel',\n        panel: {\n          noLayers: 'Pas de couches avec des données temporelles',\n        },\n        slider: {\n          unlockRight: 'Déverrouiller la poignée droite',\n          unlockLeft: 'Déverrouiller la poignée gauche',\n          lockRight: 'Verrouiller la poignée droite',\n          lockLeft: 'Verrouiller la poignée gauche',\n          disableFilter: 'Désactiver le filtrage',\n          enableFilter: 'Activer le filtrage',\n          pauseAnimation: `Pause de l'animation`,\n          playAnimation: `Jouer l'animation`,\n          back: 'Retour',\n          forward: 'En avant',\n          changeDirection: `Changer la direction de l'animation`,\n          timeDelay: `Délai d'animation`,\n          stepValue: 'Valeur du saut',\n          hour: 'Heure',\n          day: 'Jour',\n          week: 'Semaine',\n          month: 'Mois',\n          year: 'Année',\n          temporalField: 'Champ temporel: ',\n        },\n      },\n    },\n  });\n\n  /**\n   * Overrides the creation of the content properties of this TimeSlider Footer Plugin.\n   * @returns {TypeTabs} The TypeTabs for the TimeSlider Footer Plugin\n   */\n  override onCreateContentProps(): TypeTabs {\n    // Set custom time dimension if applicable\n    this.configObj.sliders.forEach((obj: SliderProps) => {\n      if (obj.temporalDimension) {\n        const timeDimension: TimeDimension = {\n          field: obj.temporalDimension.field,\n          default: obj.temporalDimension.default,\n          unitSymbol: obj.temporalDimension.unitSymbol,\n          nearestValues: obj.temporalDimension.nearestValues,\n          range: DateMgt.createRangeOGC(obj.temporalDimension.range as unknown as string),\n          singleHandle: obj.temporalDimension.singleHandle,\n          displayPattern: obj.temporalDimension.displayPattern,\n        };\n\n        // TODO: Check concurrency between plugin creation and setting temporal dimensions\n        // TO.DOCONT: I doubt that this (and few lines below) is a good place to set the temporal dimension on layers that might be\n        // TO.DOCONT: loading their metadata (and setting their own temporal dimension) at the same time as the plugin gets created.\n        // TO.DOCONT: Whichever call comes last will be overriding the setTemporalDimension set by the other concurrent task.\n        // TO.DOCONT: Fortunately, the time-slider plugin gets initialized 'late' as it's currently part of a footer, so they, most of the time,\n        // TO.DOCONT: always overwrite the config from the layer metadata which is probably what we want here.\n        // TP.DOCONT: It's risky, because if the Plugin gets created before the layer metadata is fully fetched and read,\n        // TO.DOCONT: the later will override the plugin settings (can be tested by adding fake delays).\n        // TO.DOCONT: If this Plugin has temporal dimension settings, for various layers, those should be set in synch with the layers\n        // TO.DOCONT: using event listeners, not at Plugin creation.\n        this.mapViewer().layer.getGeoviewLayerHybrid(obj.layerPaths[0])?.setTemporalDimension(obj.layerPaths[0], timeDimension);\n      }\n\n      // Set override default value under time dimension if applicable\n      if (obj.defaultValue) {\n        const layerPath = obj.layerPaths[0];\n        const timeDimension = this.mapViewer().layer.getGeoviewLayerHybrid(layerPath)?.getTemporalDimension(layerPath);\n\n        if (timeDimension) {\n          this.mapViewer()\n            .layer.getGeoviewLayerHybrid(layerPath)\n            ?.setTemporalDimension(layerPath, {\n              ...timeDimension,\n              default: obj.defaultValue,\n            });\n        }\n      }\n    });\n\n    return {\n      id: 'time-slider',\n      value: this.value!,\n      label: 'timeSlider.title',\n      icon: <TimeSliderIcon />,\n      content: <TimeSliderPanel mapId={this.pluginProps.mapId} configObj={this.configObj} />,\n    };\n  }\n\n  /**\n   * Overrides the addition of the TimeSlider Footer Plugin to make sure to set the time slider configs in the store and apply filters.\n   */\n  override onAdd(): void {\n    // If map layers are all 'loaded' already\n    if (this.mapViewer().mapLayersLoaded) {\n      // Layers are already 'loaded', initialize the time slider plugin\n      this.initTimeSliderPlugin();\n    } else {\n      // Wait for the layers to be 'loaded' so that their 'layerTemporalDimension' information is set ('techhnically, it's 'processed', but putting 'loaded' to better support layers migration)\n      this.mapViewer().onMapLayersLoaded(() => {\n        // Initialize the time slider plugin once all layers are 'loaded'\n        this.initTimeSliderPlugin();\n      });\n    }\n\n    // Call parent\n    super.onAdd();\n  }\n\n  /**\n   * Initializes the Time Slider Plugin once the layers are all 'processed'.\n   */\n  initTimeSliderPlugin(): void {\n    // Now the layerTemporalDimension should be good on the layers\n    const orderedLayerPaths = this.mapViewer().layer.getLayerEntryConfigIds();\n    const initialTimeSliderLayerPaths = this.#filterTimeSliderLayers(orderedLayerPaths);\n    if (initialTimeSliderLayerPaths) {\n      initialTimeSliderLayerPaths.forEach((layerPath) => {\n        // Get the config\n        const layerConfig = this.mapViewer().layer.getLayerEntryConfig(layerPath);\n\n        // Check and add time slider layer when needed\n        TimeSliderEventProcessor.checkInitTimeSliderLayerAndApplyFilters(this.pluginProps.mapId, layerConfig);\n      });\n    }\n  }\n\n  /**\n   * Filters an array of legend layers to get usable time slider layer paths\n   *\n   * @param {string} mapId The id of the map\n   * @param {TypeLegendLayer[]} legendLayers Array of legend layers to filter\n   * @returns {string[]} A list of usable layer paths\n   * @private\n   */\n  #filterTimeSliderLayers(layerPaths: string[]): string[] {\n    const filteredLayerPaths = layerPaths.filter((layerPath) => {\n      // Return the temporal dimension for the layer if any\n      return this.mapViewer().layer.getGeoviewLayerHybrid(layerPath)?.getTemporalDimension(layerPath);\n    });\n    return filteredLayerPaths;\n  }\n}\n\nexport default TimeSliderPlugin;\n\n// Keep a reference to the Time Slider Plugin as part of the geoviewPlugins property stored in the window object\nwindow.geoviewPlugins = window.geoviewPlugins || {};\nwindow.geoviewPlugins['time-slider'] = Cast<TimeSliderPlugin>(TimeSliderPlugin);\n"],"names":["FooterPlugin","_AbstractPlugin","_this","_classCallCheck","_len","arguments","length","args","Array","_key","concat","_defineProperty","_inherits","_createClass","key","value","id","this","label","content","pluginProps","mapId","mapViewer","footerBarApi","tabs","footerProps","onCreateContentProps","createTab","_this$mapViewer","removeTab","logger","logTraceCore","AbstractPlugin","defaultInput","Input","NativeSelect","inProps","ref","props","name","className","children","classes","classesProp","IconComponent","ArrowDropDown","A","input","inputProps","variant","other","muiFormControl","useFormControl","fcs","formControlState","states","ownerState","composeClasses","root","useUtilityClasses","otherClasses","inputComponent","NativeSelectInput","type","undefined","clsx","muiName","TimeSlider","logTraceRender","cgpv","window","config","layerPath","react","ui","useState","useRef","useEffect","useCallback","_ui$elements","elements","Grid","Slider","Typography","Checkbox","Tooltip","IconButton","LockIcon","LockOpenIcon","ArrowLeftIcon","PlayArrowIcon","PauseIcon","ArrowRightIcon","SwitchRightIcon","SwitchLeftIcon","sxClasses","theme","panelHeaders","fontSize","palette","geoViewFontSize","lg","fontWeight","marginBottom","rightPanelBtnHolder","marginTop","boxShadow","getSxClasses","useTheme","_useState","_useState2","_slicedToArray","isPlaying","setIsPlaying","playIntervalRef","sliderValueRef","sliderDeltaRef","_useTimeSliderStoreAc","useTimeSliderStoreActions","setTitle","setDefaultValue","setDescription","setValues","setLocked","setReversed","setDelay","setStep","setFiltering","displayLanguage","useAppDisplayLanguage","_useTimeSliderLayers$","useTimeSliderLayers","title","description","defaultValue","discreteValues","step","range","minAndMax","field","fieldAlias","filtering","singleHandle","values","delay","locked","reversed","displayPattern","legendLayers","useLayerLegendLayers","LegendEventProcessor","findLayerByPath","layerName","timeStampRange","map","entry","DateMgt","convertToMilliseconds","timeMarks","interval","Math","round","sliderMarks","i","push","formatDatePattern","moveSlider","direction","isForward","stepMove","newPosition","_values","leftHandle","rightHandle","current","delta","currentIndex","indexOf","newIndex","moveBack","moveForward","_config$sliders","logTraceUseEffect","sliderConfig","sliders","find","o","layerPaths","includes","_config$sliders2","isArray","setTimeout","handleSliderChange","newValues","logTraceUseCallback","clearTimeout","handleLabelFormat","theValue","returnLockTooltip","getLocalizedMessage","_jsx","_jsxs","Box","sx","padding","container","_objectSpread","flexWrap","item","xs","component","paddingLeft","paddingTop","formatDate","textAlign","marginRight","placement","enterDelay","checked","onChange","event","child","newValue","clearInterval","sliderId","style","width","color","min","max","marks","onChangeCommitted","onValueLabelFormat","tooltip","tooltipPlacement","onClick","disabled","_values2","FormControl","InputLabel","target","handleTimeChange","Number","handleStepChange","px","py","TimeSliderPanel","configObj","useMemo","visibleLayers","useMapVisibleLayers","timeSliderLayers","selectedLayerPath","useTimeSliderSelectedLayerPath","setSelectedLayerPath","handleClickLayerList","layer","getFilterInfo","timeSliderLayerInfo","_ref2","_toConsumableArray","datePattern","timePattern","memoLayersList","logTraceUseMemo","filter","layerFeatures","display","alignContent","height","layerStatus","queryStatus","layerUniqueId","TABS","TIME_SLIDER","handleGuideIsOpen","guideIsOpen","Layout","onLayerListClicked","layerList","onGuideIsOpen","guideContentIds","_TimeSliderPlugin_brand","WeakSet","TimeSliderPlugin","_FooterPlugin","_classPrivateMethodInitSpec","toJsonObject","en","timeSlider","panel","noLayers","slider","unlockRight","unlockLeft","lockRight","lockLeft","disableFilter","enableFilter","pauseAnimation","playAnimation","back","forward","changeDirection","timeDelay","stepValue","hour","day","week","month","year","temporalField","fr","schema","defaultConfig","_this2","forEach","obj","temporalDimension","_this2$mapViewer$laye","timeDimension","default","unitSymbol","nearestValues","createRangeOGC","getGeoviewLayerHybrid","setTemporalDimension","_this2$mapViewer$laye2","_this2$mapViewer$laye3","getTemporalDimension","icon","TimeSliderIcon","_this3","mapLayersLoaded","initTimeSliderPlugin","onMapLayersLoaded","_this4","orderedLayerPaths","getLayerEntryConfigIds","initialTimeSliderLayerPaths","_assertClassBrand","_filterTimeSliderLayers","call","layerConfig","getLayerEntryConfig","TimeSliderEventProcessor","checkInitTimeSliderLayerAndApplyFilters","_this5","_this5$mapViewer$laye","geoviewPlugins","Cast"],"sourceRoot":""}