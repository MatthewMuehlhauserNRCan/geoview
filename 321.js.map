{"version":3,"file":"321.js","mappings":"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","sources":["webpack://geoview-core/webpack/runtime/chunk loaded","webpack://geoview-core/webpack/runtime/startup chunk dependencies","webpack://geoview-core/./src/core/workers/helper/logger-worker.ts","webpack://geoview-core/./src/core/workers/json-export-script.ts","webpack://geoview-core/webpack/bootstrap","webpack://geoview-core/webpack/runtime/define property getters","webpack://geoview-core/webpack/runtime/ensure chunk","webpack://geoview-core/webpack/runtime/get javascript chunk filename","webpack://geoview-core/webpack/runtime/global","webpack://geoview-core/webpack/runtime/hasOwnProperty shorthand","webpack://geoview-core/webpack/runtime/publicPath","webpack://geoview-core/webpack/runtime/importScripts chunk loading","webpack://geoview-core/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(200).then(next);\n};","/**\n * Represents the log levels available for logging.\n */\nexport type WorkerLogLevel = 'info' | 'warning' | 'error' | 'debug' | 'trace';\n\n/**\n * WorkerLogger class for handling logging in a worker context.\n *\n * This logger allows for centralized logging from workers back to the main thread,\n * maintaining a consistent logging interface across the application.\n */\nclass WorkerLogger {\n  #prefix: string;\n\n  /**\n   * Creates an instance of WorkerLogger.\n   * @param {string} [prefix=''] - The prefix to be added to all log messages.\n   */\n  constructor(prefix: string = '') {\n    this.#prefix = prefix;\n  }\n\n  /**\n   * Internal method to send log messages to the main thread.\n   * @private\n   * @param {WorkerLogLevel} level - The log level of the message.\n   * @param {...unknown[]} args - The message and any additional arguments to log.\n   */\n  #log(level: WorkerLogLevel, ...args: unknown[]): void {\n    const message = this.#prefix ? [this.#prefix, ...args] : args;\n    // Send the log message to the main thread\n    // eslint-disable-next-line no-restricted-globals\n    self.postMessage({\n      type: 'log',\n      level,\n      message,\n    });\n  }\n\n  /**\n   * Logs an informational message.\n   * @param {...unknown[]} args - The message and any additional arguments to log.\n   */\n  logInfo(...args: unknown[]): void {\n    this.#log('info', ...args);\n  }\n\n  /**\n   * Logs a warning message.\n   * @param {...unknown[]} args - The message and any additional arguments to log.\n   */\n  logWarning(...args: unknown[]): void {\n    this.#log('warning', ...args);\n  }\n\n  /**\n   * Logs an error message.\n   * @param {...unknown[]} args - The message and any additional arguments to log.\n   */\n  logError(...args: unknown[]): void {\n    this.#log('error', ...args);\n  }\n\n  /**\n   * Logs a debug message.\n   * @param {...unknown[]} args - The message and any additional arguments to log.\n   */\n  logDebug(...args: unknown[]): void {\n    this.#log('debug', ...args);\n  }\n\n  /**\n   * Logs a trace message.\n   * @param {...unknown[]} args - The message and any additional arguments to log.\n   */\n  logTrace(...args: unknown[]): void {\n    this.#log('trace', ...args);\n  }\n}\n\n/**\n * Creates and returns a new WorkerLogger instance.\n * @param {string} [prefix] - Optional prefix for all log messages from this logger.\n * @returns {WorkerLogger} A new WorkerLogger instance.\n */\nexport const createWorkerLogger = (prefix?: string): WorkerLogger => new WorkerLogger(prefix);\n","import { expose } from 'comlink';\nimport proj4 from 'proj4';\nimport { register } from 'ol/proj/proj4';\nimport { Coordinate } from 'ol/coordinate';\n\nimport { createWorkerLogger } from '@/core/workers/helper/logger-worker';\nimport { TypeJsonObject } from '@/api/config/types/config-types';\n\n/**\n * This worker script is designed to be used with the JsonExportWorker class.\n * It handles the transformation of GeoJSON features from one coordinate system to another.\n *\n * The main operations are:\n * 1. Initialization: Set up the source and target coordinate reference systems.\n * 2. Processing: Transform chunks of GeoJSON features, converting their geometries.\n *\n * The worker uses proj4 for coordinate transformations and includes a custom\n * definition for the EPSG:3978 projection.\n */\n\ntype TypeWorkerExportGeometry = {\n  type: string;\n  coordinates: Coordinate | Coordinate[] | Coordinate[][] | Coordinate[][][];\n};\n\n// Type related to the worker\nexport type TypeWorkerExportChunk = {\n  geometry: TypeJsonObject;\n  properties: {\n    [k: string]: unknown;\n  };\n};\nexport type TypeWorkerExportProjectionInfo = {\n  sourceCRS: string;\n  targetCRS: string;\n};\n\n// Initialize the worker logger\nconst logger = createWorkerLogger('json-export-worker');\n\n// Variables to store the source and target coordinate reference systems\nlet sourceCRS: string;\nlet targetCRS: string;\n\n// Register the EPSG:3978 projection. This is needed because wroker does not work on same thread as main\n// and do not have access to our already define proj4 version.\nproj4.defs(\n  'EPSG:3978',\n  '+proj=lcc +lat_1=49 +lat_2=77 +lat_0=49 +lon_0=-95 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs'\n);\nregister(proj4);\n\n/**\n * Transforms an array of points from the source CRS to the target CRS.\n * @param {Coordinate[]} points - Array of points coordinates to transform.\n * @returns {Coordinate[]} Array of transformed points coordinates.\n */\nfunction transformPoints(points: Coordinate[]): Coordinate[] {\n  const converted: Array<Array<number>> = [];\n\n  if (Array.isArray(points) && points.length > 0) {\n    if (Array.isArray(points[0])) {\n      for (let i = 0; i < points.length; i++) {\n        const coords = proj4(sourceCRS, targetCRS, points[i]);\n        converted.push(coords);\n      }\n    }\n  }\n\n  return converted;\n}\n\n/**\n * Transforms the geometry of a GeoJSON feature.\n * @param {TypeWorkerExportGeometry} geometry - The geometry to transform.\n * @returns {TypeJsonObject} The transformed geometry.\n */\nfunction transformGeometry(geometry: TypeWorkerExportGeometry): TypeJsonObject {\n  const { type, coordinates } = geometry;\n\n  let transformedGeometry = {};\n  if (type === 'Polygon') {\n    // coordinates are in the form of Coordinate[][]\n    transformedGeometry = {\n      type: 'Polygon',\n      coordinates: (coordinates as Coordinate[][]).map((coords: Coordinate[]) => {\n        return coords.map((coord: Coordinate) => transformPoints([coord])[0]);\n      }),\n    };\n  } else if (type === 'MultiPolygon') {\n    // coordinates are in the form of Coordinate[][][]\n    transformedGeometry = {\n      type: 'MultiPolygon',\n      coordinates: (coordinates as Coordinate[][][]).map((coords1: Coordinate[][]) => {\n        return coords1.map((coords2: Coordinate[]) => {\n          return coords2.map((coord: Coordinate) => transformPoints([coord])[0]);\n        });\n      }),\n    };\n  } else if (type === 'LineString') {\n    // coordinates are in the form of Coordinate[]\n    transformedGeometry = {\n      type: 'LineString',\n      coordinates: (coordinates as Coordinate[]).map((coord: Coordinate) => transformPoints([coord])[0]),\n    };\n  } else if (type === 'MultiLineString') {\n    // coordinates are in the form of Coordinate[][]\n    transformedGeometry = {\n      type: 'MultiLineString',\n      coordinates: (coordinates as Coordinate[][]).map((coords: Coordinate[]) => {\n        return coords.map((coord: Coordinate) => transformPoints([coord])[0]);\n      }),\n    };\n  } else if (type === 'Point') {\n    // coordinates are in the form of Coordinate\n    transformedGeometry = { type: 'Point', coordinates: transformPoints([coordinates as Coordinate])[0] };\n  } else if (type === 'MultiPoint') {\n    // coordinates are in the form of Coordinate[]\n    transformedGeometry = {\n      type: 'MultiPoint',\n      coordinates: (coordinates as Coordinate[]).map((coord: Coordinate) => transformPoints([coord])[0]),\n    };\n  }\n\n  return transformedGeometry;\n}\n\n/**\n * The main worker object containing methods for initialization and processing.\n */\nconst worker = {\n  /**\n   * Initializes the worker with projection information.\n   * @param {TypeWorkerExportProjectionInfo} projectionInfo - The projection information.\n   */\n  init(projectionInfo: TypeWorkerExportProjectionInfo) {\n    try {\n      sourceCRS = projectionInfo.sourceCRS;\n      targetCRS = projectionInfo.targetCRS;\n      logger.logTrace('init worker', `Worker initialized with sourceCRS: ${sourceCRS}, targetCRS: ${targetCRS}`);\n    } catch (error) {\n      logger.logError('init worker', error);\n    }\n  },\n\n  /**\n   * Processes a chunk of GeoJSON features, transforming their geometries.\n   * @param {TypeWorkerExportChunk[]} chunk - The chunk of GeoJSON features to process.\n   * @param {boolean} isFirst - Indicates if this is the first chunk of the dataset.\n   * @returns {string} A JSON string of the processed features.\n   */\n  process(chunk: TypeWorkerExportChunk[], isFirst: boolean): string {\n    try {\n      logger.logTrace('process worker', `Processing chunk of ${chunk.length} items`);\n      let result = '';\n      if (isFirst) {\n        result += '{\"type\":\"FeatureCollection\",\"features\":[';\n      } else if (chunk.length > 0) {\n        result += ',';\n      }\n\n      const processedChunk = chunk.map((feature: TypeWorkerExportChunk) => {\n        const { geometry, properties } = feature;\n        const transformedGeometry = transformGeometry(geometry as unknown as TypeWorkerExportGeometry);\n        return JSON.stringify({\n          type: 'Feature',\n          geometry: transformedGeometry,\n          properties,\n        });\n      });\n\n      result += processedChunk.join(',');\n\n      logger.logTrace('process worker', `Finished processing`);\n      return result;\n    } catch (error) {\n      logger.logError('process worker', error);\n      return '';\n    }\n  },\n};\n\n// Expose the worker methods to be accessible from the main thread\nexpose(worker);\nexport default {} as typeof Worker & { new (): Worker };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [200], () => (__webpack_require__(34083)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t321: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkgeoview_core\"] = self[\"webpackChunkgeoview_core\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","WorkerLogger","_createClass","prefix","arguments","length","undefined","_classCallCheck","_WorkerLogger_brand","_classPrivateFieldInitSpec","_prefix","_classPrivateFieldSet","this","key","value","_assertClassBrand2","_len","args","Array","_key","_assertClassBrand","_log","call","apply","concat","_assertClassBrand3","_len2","_key2","_assertClassBrand4","_len3","_key3","_assertClassBrand5","_len4","_key4","_assertClassBrand6","_len5","_key5","level","_len6","_key6","message","_classPrivateFieldGet","self","postMessage","type","sourceCRS","targetCRS","logger","transformPoints","points","converted","isArray","i","coords","proj4","push","defs","register","worker","init","projectionInfo","logTrace","error","logError","process","chunk","isFirst","result","map","feature","geometry","properties","transformedGeometry","coordinates","coord","coords1","coords2","transformGeometry","JSON","stringify","join","expose","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","splice","r","d","definition","o","defineProperty","enumerable","get","f","e","chunkId","Promise","all","reduce","promises","u","g","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","test","Error","replace","p","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","bind","data","moreModules","runtime","pop","then"],"sourceRoot":""}