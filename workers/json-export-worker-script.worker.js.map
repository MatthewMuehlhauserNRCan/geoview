{"version":3,"file":"workers/json-export-worker-script.worker.js","mappings":"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","sources":["webpack://geoview-core/../../common/temp/node_modules/.pnpm/comlink@4.4.2/node_modules/comlink/dist/esm/comlink.mjs","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/constants/values.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/constants/PrimeMeridian.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/constants/units.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/match.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projString.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/wkt-parser@1.4.0/node_modules/wkt-parser/parser.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/wkt-parser@1.4.0/node_modules/wkt-parser/process.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/wkt-parser@1.4.0/node_modules/wkt-parser/index.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/defs.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/global.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/parseCode.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/extend.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/msfnz.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/sign.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/adjust_lon.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/tsfnz.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/phi2z.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/longlat.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/merc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/constants/Ellipsoid.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/constants/Datum.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/datum.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/nadgrid.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/Proj.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/deriveConstants.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/datumUtils.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/datum_transform.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/adjust_axis.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/toPoint.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/checkSanity.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/transform.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/core.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/mgrs@1.0.0/node_modules/mgrs/mgrs.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/Point.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/pj_enfn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/pj_mlfn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/pj_inv_mlfn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/tmerc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/sinh.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/hypot.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/asinhy.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/log1py.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/gatg.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/clens_cmplx.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/cosh.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/etmerc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/clens.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/utm.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/adjust_zone.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/srat.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/gauss.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/sterea.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/stere.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/somerc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/omerc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/lcc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/krovak.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/mlfn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/e0fn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/e1fn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/e2fn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/e3fn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/gN.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/adjust_lat.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/imlfn.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/cass.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/qsfnz.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/laea.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/asinz.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/aea.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/gnom.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/cea.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/common/iqsfnz.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/eqc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/poly.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/nzmg.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/mill.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/sinu.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/moll.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/eqdc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/vandg.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/aeqd.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/ortho.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/qsc.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/robin.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/geocent.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/tpers.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/geos.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/eqearth.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/projections/bonne.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/lib/index.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/proj4@2.15.0/node_modules/proj4/projs.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/Units.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/Projection.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/epsg3857.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/epsg4326.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/projections.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/transforms.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/extent.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/math.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/coordinate.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/utm.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/ol@10.3.1/node_modules/ol/proj/proj4.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://geoview-core/./src/core/workers/helper/logger-worker.ts","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@babel+runtime@7.26.7/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://geoview-core/./src/core/workers/json-export-worker-script.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    const pendingListeners = new Map();\n    ep.addEventListener(\"message\", function handleMessage(ev) {\n        const { data } = ev;\n        if (!data || !data.id) {\n            return;\n        }\n        const resolver = pendingListeners.get(data.id);\n        if (!resolver) {\n            return;\n        }\n        try {\n            resolver(data);\n        }\n        finally {\n            pendingListeners.delete(data.id);\n        }\n    });\n    return createProxy(ep, pendingListeners, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, new Map(), {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, pendingListeners, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    pendingListeners.clear();\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, pendingListeners, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, pendingListeners, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, pendingListeners, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, pendingListeners, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, pendingListeners, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        pendingListeners.set(id, resolve);\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","export var PJD_3PARAM = 1;\nexport var PJD_7PARAM = 2;\nexport var PJD_GRIDSHIFT = 3;\nexport var PJD_WGS84 = 4; // WGS84 or equivalent\nexport var PJD_NODATUM = 5; // WGS84 or equivalent\nexport var SRS_WGS84_SEMIMAJOR = 6378137.0;  // only used in grid shift transforms\nexport var SRS_WGS84_SEMIMINOR = 6356752.314;  // only used in grid shift transforms\nexport var SRS_WGS84_ESQUARED = 0.0066943799901413165; // only used in grid shift transforms\nexport var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\nexport var HALF_PI = Math.PI/2;\n// ellipoid pj_set_ell.c\nexport var SIXTH = 0.1666666666666666667;\n/* 1/6 */\nexport var RA4 = 0.04722222222222222222;\n/* 17/360 */\nexport var RA6 = 0.02215608465608465608;\nexport var EPSLN = 1.0e-10;\n// you'd think you could use Number.EPSILON above but that makes\n// Mollweide get into an infinate loop.\n\nexport var D2R = 0.01745329251994329577;\nexport var R2D = 57.29577951308232088;\nexport var FORTPI = Math.PI/4;\nexport var TWO_PI = Math.PI * 2;\n// SPI is slightly greater than Math.PI, so values that exceed the -180..180\n// degree range by a tiny amount don't get wrapped. This prevents points that\n// have drifted from their original location along the 180th meridian (due to\n// floating point error) from changing their sign.\nexport var SPI = 3.14159265359;\n","var exports = {};\nexport {exports as default};\n\nexports.greenwich = 0.0; //\"0dE\",\nexports.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\nexports.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\nexports.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\nexports.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\nexports.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\nexports.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\nexports.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\nexports.ferro = -17.666666666667; //\"17d40'W\",\nexports.brussels = 4.367975; //\"4d22'4.71\\\"E\",\nexports.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\nexports.athens = 23.7163375; //\"23d42'58.815\\\"E\",\nexports.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\n","export default {\n  'mm': {to_meter: 0.001},\n  'cm': {to_meter: 0.01},\n  'ft': {to_meter: 0.3048},\n  'us-ft': {to_meter: 1200 / 3937},\n  'fath': {to_meter: 1.8288},\n  'kmi': {to_meter: 1852},\n  'us-ch': {to_meter: 20.1168402336805},\n  'us-mi': {to_meter: 1609.34721869444},\n  'km': {to_meter: 1000},\n  'ind-ft': {to_meter: 0.30479841},\n  'ind-yd': {to_meter: 0.91439523},\n  'mi': {to_meter: 1609.344},\n  'yd': {to_meter: 0.9144},\n  'ch': {to_meter: 20.1168},\n  'link': {to_meter: 0.201168},\n  'dm': {to_meter: 0.01},\n  'in': {to_meter: 0.0254},\n  'ind-ch': {to_meter: 20.11669506},\n  'us-in': {to_meter: 0.025400050800101},\n  'us-yd': {to_meter: 0.914401828803658}\n};\n","var ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nexport default function match(obj, key) {\n  if (obj[key]) {\n    return obj[key];\n  }\n  var keys = Object.keys(obj);\n  var lkey = key.toLowerCase().replace(ignoredChar, '');\n  var i = -1;\n  var testkey, processedKey;\n  while (++i < keys.length) {\n    testkey = keys[i];\n    processedKey = testkey.toLowerCase().replace(ignoredChar, '');\n    if (processedKey === lkey) {\n      return obj[testkey];\n    }\n  }\n}\n","import {D2R} from './constants/values';\nimport PrimeMeridian from './constants/PrimeMeridian';\nimport units from './constants/units';\nimport match from './match';\n\nexport default function(defData) {\n  var self = {};\n  var paramObj = defData.split('+').map(function(v) {\n    return v.trim();\n  }).filter(function(a) {\n    return a;\n  }).reduce(function(p, a) {\n    var split = a.split('=');\n    split.push(true);\n    p[split[0].toLowerCase()] = split[1];\n    return p;\n  }, {});\n  var paramName, paramVal, paramOutname;\n  var params = {\n    proj: 'projName',\n    datum: 'datumCode',\n    rf: function(v) {\n      self.rf = parseFloat(v);\n    },\n    lat_0: function(v) {\n      self.lat0 = v * D2R;\n    },\n    lat_1: function(v) {\n      self.lat1 = v * D2R;\n    },\n    lat_2: function(v) {\n      self.lat2 = v * D2R;\n    },\n    lat_ts: function(v) {\n      self.lat_ts = v * D2R;\n    },\n    lon_0: function(v) {\n      self.long0 = v * D2R;\n    },\n    lon_1: function(v) {\n      self.long1 = v * D2R;\n    },\n    lon_2: function(v) {\n      self.long2 = v * D2R;\n    },\n    alpha: function(v) {\n      self.alpha = parseFloat(v) * D2R;\n    },\n    gamma: function(v) {\n      self.rectified_grid_angle = parseFloat(v);\n    },\n    lonc: function(v) {\n      self.longc = v * D2R;\n    },\n    x_0: function(v) {\n      self.x0 = parseFloat(v);\n    },\n    y_0: function(v) {\n      self.y0 = parseFloat(v);\n    },\n    k_0: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    k: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    a: function(v) {\n      self.a = parseFloat(v);\n    },\n    b: function(v) {\n      self.b = parseFloat(v);\n    },\n    r: function(v) {\n      self.a = self.b = parseFloat(v);\n    },\n    r_a: function() {\n      self.R_A = true;\n    },\n    zone: function(v) {\n      self.zone = parseInt(v, 10);\n    },\n    south: function() {\n      self.utmSouth = true;\n    },\n    towgs84: function(v) {\n      self.datum_params = v.split(\",\").map(function(a) {\n        return parseFloat(a);\n      });\n    },\n    to_meter: function(v) {\n      self.to_meter = parseFloat(v);\n    },\n    units: function(v) {\n      self.units = v;\n      var unit = match(units, v);\n      if (unit) {\n        self.to_meter = unit.to_meter;\n      }\n    },\n    from_greenwich: function(v) {\n      self.from_greenwich = v * D2R;\n    },\n    pm: function(v) {\n      var pm = match(PrimeMeridian, v);\n      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n    },\n    nadgrids: function(v) {\n      if (v === '@null') {\n        self.datumCode = 'none';\n      }\n      else {\n        self.nadgrids = v;\n      }\n    },\n    axis: function(v) {\n      var legalAxis = \"ewnsud\";\n      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n        self.axis = v;\n      }\n    },\n    approx: function() {\n      self.approx = true;\n    }\n  };\n  for (paramName in paramObj) {\n    paramVal = paramObj[paramName];\n    if (paramName in params) {\n      paramOutname = params[paramName];\n      if (typeof paramOutname === 'function') {\n        paramOutname(paramVal);\n      }\n      else {\n        self[paramOutname] = paramVal;\n      }\n    }\n    else {\n      self[paramName] = paramVal;\n    }\n  }\n  if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n    self.datumCode = self.datumCode.toLowerCase();\n  }\n  return self;\n}\n","export default parseString;\n\nvar NEUTRAL = 1;\nvar KEYWORD = 2;\nvar NUMBER = 3;\nvar QUOTED = 4;\nvar AFTERQUOTE = 5;\nvar ENDED = -1;\nvar whitespace = /\\s/;\nvar latin = /[A-Za-z]/;\nvar keyword = /[A-Za-z84_]/;\nvar endThings = /[,\\]]/;\nvar digets = /[\\d\\.E\\-\\+]/;\n// const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nfunction Parser(text) {\n  if (typeof text !== 'string') {\n    throw new Error('not a string');\n  }\n  this.text = text.trim();\n  this.level = 0;\n  this.place = 0;\n  this.root = null;\n  this.stack = [];\n  this.currentObject = null;\n  this.state = NEUTRAL;\n}\nParser.prototype.readCharicter = function() {\n  var char = this.text[this.place++];\n  if (this.state !== QUOTED) {\n    while (whitespace.test(char)) {\n      if (this.place >= this.text.length) {\n        return;\n      }\n      char = this.text[this.place++];\n    }\n  }\n  switch (this.state) {\n    case NEUTRAL:\n      return this.neutral(char);\n    case KEYWORD:\n      return this.keyword(char)\n    case QUOTED:\n      return this.quoted(char);\n    case AFTERQUOTE:\n      return this.afterquote(char);\n    case NUMBER:\n      return this.number(char);\n    case ENDED:\n      return;\n  }\n};\nParser.prototype.afterquote = function(char) {\n  if (char === '\"') {\n    this.word += '\"';\n    this.state = QUOTED;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = this.word.trim();\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\n};\nParser.prototype.afterItem = function(char) {\n  if (char === ',') {\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n    }\n    this.word = null;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (char === ']') {\n    this.level--;\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n      this.word = null;\n    }\n    this.state = NEUTRAL;\n    this.currentObject = this.stack.pop();\n    if (!this.currentObject) {\n      this.state = ENDED;\n    }\n\n    return;\n  }\n};\nParser.prototype.number = function(char) {\n  if (digets.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = parseFloat(this.word);\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\n};\nParser.prototype.quoted = function(char) {\n  if (char === '\"') {\n    this.state = AFTERQUOTE;\n    return;\n  }\n  this.word += char;\n  return;\n};\nParser.prototype.keyword = function(char) {\n  if (keyword.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (char === '[') {\n    var newObjects = [];\n    newObjects.push(this.word);\n    this.level++;\n    if (this.root === null) {\n      this.root = newObjects;\n    } else {\n      this.currentObject.push(newObjects);\n    }\n    this.stack.push(this.currentObject);\n    this.currentObject = newObjects;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\n};\nParser.prototype.neutral = function(char) {\n  if (latin.test(char)) {\n    this.word = char;\n    this.state = KEYWORD;\n    return;\n  }\n  if (char === '\"') {\n    this.word = '';\n    this.state = QUOTED;\n    return;\n  }\n  if (digets.test(char)) {\n    this.word = char;\n    this.state = NUMBER;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\n};\nParser.prototype.output = function() {\n  while (this.place < this.text.length) {\n    this.readCharicter();\n  }\n  if (this.state === ENDED) {\n    return this.root;\n  }\n  throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\n};\n\nfunction parseString(txt) {\n  var parser = new Parser(txt);\n  return parser.output();\n}\n","\n\nfunction mapit(obj, key, value) {\n  if (Array.isArray(key)) {\n    value.unshift(key);\n    key = null;\n  }\n  var thing = key ? {} : obj;\n\n  var out = value.reduce(function(newObj, item) {\n    sExpr(item, newObj);\n    return newObj\n  }, thing);\n  if (key) {\n    obj[key] = out;\n  }\n}\n\nexport function sExpr(v, obj) {\n  if (!Array.isArray(v)) {\n    obj[v] = true;\n    return;\n  }\n  var key = v.shift();\n  if (key === 'PARAMETER') {\n    key = v.shift();\n  }\n  if (v.length === 1) {\n    if (Array.isArray(v[0])) {\n      obj[key] = {};\n      sExpr(v[0], obj[key]);\n      return;\n    }\n    obj[key] = v[0];\n    return;\n  }\n  if (!v.length) {\n    obj[key] = true;\n    return;\n  }\n  if (key === 'TOWGS84') {\n    obj[key] = v;\n    return;\n  }\n  if (key === 'AXIS') {\n    if (!(key in obj)) {\n      obj[key] = [];\n    }\n    obj[key].push(v);\n    return;\n  }\n  if (!Array.isArray(key)) {\n    obj[key] = {};\n  }\n\n  var i;\n  switch (key) {\n    case 'UNIT':\n    case 'PRIMEM':\n    case 'VERT_DATUM':\n      obj[key] = {\n        name: v[0].toLowerCase(),\n        convert: v[1]\n      };\n      if (v.length === 3) {\n        sExpr(v[2], obj[key]);\n      }\n      return;\n    case 'SPHEROID':\n    case 'ELLIPSOID':\n      obj[key] = {\n        name: v[0],\n        a: v[1],\n        rf: v[2]\n      };\n      if (v.length === 4) {\n        sExpr(v[3], obj[key]);\n      }\n      return;\n    case 'EDATUM':\n    case 'ENGINEERINGDATUM':\n    case 'LOCAL_DATUM':\n    case 'DATUM':\n    case 'VERT_CS':\n    case 'VERTCRS':\n    case 'VERTICALCRS':\n      v[0] = ['name', v[0]];\n      mapit(obj, key, v);\n      return;\n    case 'COMPD_CS':\n    case 'COMPOUNDCRS':\n    case 'FITTED_CS':\n    // the followings are the crs defined in\n    // https://github.com/proj4js/proj4js/blob/1da4ed0b865d0fcb51c136090569210cdcc9019e/lib/parseCode.js#L11\n    case 'PROJECTEDCRS':\n    case 'PROJCRS':\n    case 'GEOGCS':\n    case 'GEOCCS':\n    case 'PROJCS':\n    case 'LOCAL_CS':\n    case 'GEODCRS':\n    case 'GEODETICCRS':\n    case 'GEODETICDATUM':\n    case 'ENGCRS':\n    case 'ENGINEERINGCRS':\n      v[0] = ['name', v[0]];\n      mapit(obj, key, v);\n      obj[key].type = key;\n      return;\n    default:\n      i = -1;\n      while (++i < v.length) {\n        if (!Array.isArray(v[i])) {\n          return sExpr(v, obj[key]);\n        }\n      }\n      return mapit(obj, key, v);\n  }\n}\n","var D2R = 0.01745329251994329577;\nimport parser from './parser';\nimport {sExpr} from './process';\n\nvar knownTypes = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS', 'GEOCCS', 'PROJCS', 'LOCAL_CS', 'GEODCRS',\n  'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\n\nfunction rename(obj, params) {\n  var outName = params[0];\n  var inName = params[1];\n  if (!(outName in obj) && (inName in obj)) {\n    obj[outName] = obj[inName];\n    if (params.length === 3) {\n      obj[outName] = params[2](obj[outName]);\n    }\n  }\n}\n\nfunction d2r(input) {\n  return input * D2R;\n}\n\nfunction cleanWKT(wkt) {\n  var keys = Object.keys(wkt);\n  for (var i = 0, ii = keys.length; i <ii; ++i) {\n    var key = keys[i];\n    // the followings are the crs defined in\n    // https://github.com/proj4js/proj4js/blob/1da4ed0b865d0fcb51c136090569210cdcc9019e/lib/parseCode.js#L11\n    if (knownTypes.indexOf(key) !== -1) {\n      setPropertiesFromWkt(wkt[key]);\n    }\n    if (typeof wkt[key] === 'object') {\n      cleanWKT(wkt[key]);\n    }\n  }\n}\n\nfunction setPropertiesFromWkt(wkt) {\n  if (wkt.AUTHORITY) {\n    var authority = Object.keys(wkt.AUTHORITY)[0];\n    if (authority && authority in wkt.AUTHORITY) {\n      wkt.title = authority + ':' + wkt.AUTHORITY[authority];\n    }\n  }\n  if (wkt.type === 'GEOGCS') {\n    wkt.projName = 'longlat';\n  } else if (wkt.type === 'LOCAL_CS') {\n    wkt.projName = 'identity';\n    wkt.local = true;\n  } else {\n    if (typeof wkt.PROJECTION === 'object') {\n      wkt.projName = Object.keys(wkt.PROJECTION)[0];\n    } else {\n      wkt.projName = wkt.PROJECTION;\n    }\n  }\n  if (wkt.AXIS) {\n    var axisOrder = '';\n    for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {\n      var axis = [wkt.AXIS[i][0].toLowerCase(), wkt.AXIS[i][1].toLowerCase()];\n      if (axis[0].indexOf('north') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'north')) {\n        axisOrder += 'n';\n      } else if (axis[0].indexOf('south') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'south')) {\n        axisOrder += 's';\n      } else if (axis[0].indexOf('east') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'east')) {\n        axisOrder += 'e';\n      } else if (axis[0].indexOf('west') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'west')) {\n        axisOrder += 'w';\n      }\n    }\n    if (axisOrder.length === 2) {\n      axisOrder += 'u';\n    }\n    if (axisOrder.length === 3) {\n      wkt.axis = axisOrder;\n    }\n  }\n  if (wkt.UNIT) {\n    wkt.units = wkt.UNIT.name.toLowerCase();\n    if (wkt.units === 'metre') {\n      wkt.units = 'meter';\n    }\n    if (wkt.UNIT.convert) {\n      if (wkt.type === 'GEOGCS') {\n        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\n        }\n      } else {\n        wkt.to_meter = wkt.UNIT.convert;\n      }\n    }\n  }\n  var geogcs = wkt.GEOGCS;\n  if (wkt.type === 'GEOGCS') {\n    geogcs = wkt;\n  }\n  if (geogcs) {\n    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n    //}\n    if (geogcs.DATUM) {\n      wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n    } else {\n      wkt.datumCode = geogcs.name.toLowerCase();\n    }\n    if (wkt.datumCode.slice(0, 2) === 'd_') {\n      wkt.datumCode = wkt.datumCode.slice(2);\n    }\n    if (wkt.datumCode === 'new_zealand_1949') {\n      wkt.datumCode = 'nzgd49';\n    }\n    if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {\n      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n        wkt.sphere = true;\n      }\n      wkt.datumCode = 'wgs84';\n    }\n    if (wkt.datumCode === 'belge_1972') {\n      wkt.datumCode = 'rnb72';\n    }\n    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n        wkt.ellps = 'intl';\n      }\n\n      wkt.a = geogcs.DATUM.SPHEROID.a;\n      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n    }\n\n    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\n      wkt.datum_params = geogcs.DATUM.TOWGS84;\n    }\n    if (~wkt.datumCode.indexOf('osgb_1936')) {\n      wkt.datumCode = 'osgb36';\n    }\n    if (~wkt.datumCode.indexOf('osni_1952')) {\n      wkt.datumCode = 'osni52';\n    }\n    if (~wkt.datumCode.indexOf('tm65')\n      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n      wkt.datumCode = 'ire65';\n    }\n    if (wkt.datumCode === 'ch1903+') {\n      wkt.datumCode = 'ch1903';\n    }\n    if (~wkt.datumCode.indexOf('israel')) {\n      wkt.datumCode = 'isr93';\n    }\n  }\n  if (wkt.b && !isFinite(wkt.b)) {\n    wkt.b = wkt.a;\n  }\n\n  function toMeter(input) {\n    var ratio = wkt.to_meter || 1;\n    return input * ratio;\n  }\n  var renamer = function(a) {\n    return rename(wkt, a);\n  };\n  var list = [\n    ['standard_parallel_1', 'Standard_Parallel_1'],\n    ['standard_parallel_1', 'Latitude of 1st standard parallel'],\n    ['standard_parallel_2', 'Standard_Parallel_2'],\n    ['standard_parallel_2', 'Latitude of 2nd standard parallel'],\n    ['false_easting', 'False_Easting'],\n    ['false_easting', 'False easting'],\n    ['false-easting', 'Easting at false origin'],\n    ['false_northing', 'False_Northing'],\n    ['false_northing', 'False northing'],\n    ['false_northing', 'Northing at false origin'],\n    ['central_meridian', 'Central_Meridian'],\n    ['central_meridian', 'Longitude of natural origin'],\n    ['central_meridian', 'Longitude of false origin'],\n    ['latitude_of_origin', 'Latitude_Of_Origin'],\n    ['latitude_of_origin', 'Central_Parallel'],\n    ['latitude_of_origin', 'Latitude of natural origin'],\n    ['latitude_of_origin', 'Latitude of false origin'],\n    ['scale_factor', 'Scale_Factor'],\n    ['k0', 'scale_factor'],\n    ['latitude_of_center', 'Latitude_Of_Center'],\n    ['latitude_of_center', 'Latitude_of_center'],\n    ['lat0', 'latitude_of_center', d2r],\n    ['longitude_of_center', 'Longitude_Of_Center'],\n    ['longitude_of_center', 'Longitude_of_center'],\n    ['longc', 'longitude_of_center', d2r],\n    ['x0', 'false_easting', toMeter],\n    ['y0', 'false_northing', toMeter],\n    ['long0', 'central_meridian', d2r],\n    ['lat0', 'latitude_of_origin', d2r],\n    ['lat0', 'standard_parallel_1', d2r],\n    ['lat1', 'standard_parallel_1', d2r],\n    ['lat2', 'standard_parallel_2', d2r],\n    ['azimuth', 'Azimuth'],\n    ['alpha', 'azimuth', d2r],\n    ['srsCode', 'name']\n  ];\n  list.forEach(renamer);\n  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n    wkt.long0 = wkt.longc;\n  }\n  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n    wkt.lat_ts = wkt.lat1;\n  } else if (!wkt.lat_ts && wkt.lat0 && wkt.projName === 'Polar_Stereographic') {\n    wkt.lat_ts = wkt.lat0;\n    wkt.lat0 = d2r(wkt.lat0 > 0 ? 90 : -90);\n  }\n}\nexport default function(wkt) {\n  var lisp = parser(wkt);\n  var type = lisp[0];\n  var obj = {};\n  sExpr(lisp, obj);\n  cleanWKT(obj);\n  return obj[type];\n}\n","import globals from './global';\nimport parseProj from './projString';\nimport wkt from 'wkt-parser';\n\nfunction defs(name) {\n  /*global console*/\n  var that = this;\n  if (arguments.length === 2) {\n    var def = arguments[1];\n    if (typeof def === 'string') {\n      if (def.charAt(0) === '+') {\n        defs[name] = parseProj(arguments[1]);\n      }\n      else {\n        defs[name] = wkt(arguments[1]);\n      }\n    } else {\n      defs[name] = def;\n    }\n  }\n  else if (arguments.length === 1) {\n    if (Array.isArray(name)) {\n      return name.map(function(v) {\n        if (Array.isArray(v)) {\n          defs.apply(that, v);\n        }\n        else {\n          defs(v);\n        }\n      });\n    }\n    else if (typeof name === 'string') {\n      if (name in defs) {\n        return defs[name];\n      }\n    }\n    else if ('EPSG' in name) {\n      defs['EPSG:' + name.EPSG] = name;\n    }\n    else if ('ESRI' in name) {\n      defs['ESRI:' + name.ESRI] = name;\n    }\n    else if ('IAU2000' in name) {\n      defs['IAU2000:' + name.IAU2000] = name;\n    }\n    else {\n      console.log(name);\n    }\n    return;\n  }\n\n\n}\nglobals(defs);\nexport default defs;\n","export default function(defs) {\n  defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n  defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n  defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n  // UTM WGS84\n  for (var i = 1; i <= 60; ++i) {\n    defs('EPSG:' + (32600 + i), \"+proj=utm +zone=\" + i + \" +datum=WGS84 +units=m\");\n    defs('EPSG:' + (32700 + i), \"+proj=utm +zone=\" + i + \" +south +datum=WGS84 +units=m\");\n  }\n\n  defs.WGS84 = defs['EPSG:4326'];\n  defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n  defs.GOOGLE = defs['EPSG:3857'];\n  defs['EPSG:900913'] = defs['EPSG:3857'];\n  defs['EPSG:102113'] = defs['EPSG:3857'];\n}\n","import defs from './defs';\nimport wkt from 'wkt-parser';\nimport projStr from './projString';\nimport match from './match';\nfunction testObj(code){\n  return typeof code === 'string';\n}\nfunction testDef(code){\n  return code in defs;\n}\nvar codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\nfunction testWKT(code){\n  return codeWords.some(function (word) {\n    return code.indexOf(word) > -1;\n  });\n}\nvar codes = ['3857', '900913', '3785', '102113'];\nfunction checkMercator(item) {\n  var auth = match(item, 'authority');\n  if (!auth) {\n    return;\n  }\n  var code = match(auth, 'epsg');\n  return code && codes.indexOf(code) > -1;\n}\nfunction checkProjStr(item) {\n  var ext = match(item, 'extension');\n  if (!ext) {\n    return;\n  }\n  return match(ext, 'proj4');\n}\nfunction testProj(code){\n  return code[0] === '+';\n}\nfunction parse(code){\n  if (testObj(code)) {\n    //check to see if this is a WKT string\n    if (testDef(code)) {\n      return defs[code];\n    }\n    if (testWKT(code)) {\n      var out = wkt(code);\n      // test of spetial case, due to this being a very common and often malformed\n      if (checkMercator(out)) {\n        return defs['EPSG:3857'];\n      }\n      var maybeProjStr = checkProjStr(out);\n      if (maybeProjStr) {\n        return projStr(maybeProjStr);\n      }\n      return out;\n    }\n    if (testProj(code)) {\n      return projStr(code);\n    }\n  }else{\n    return code;\n  }\n}\n\nexport default parse;\n","export default function(destination, source) {\n  destination = destination || {};\n  var value, property;\n  if (!source) {\n    return destination;\n  }\n  for (property in source) {\n    value = source[property];\n    if (value !== undefined) {\n      destination[property] = value;\n    }\n  }\n  return destination;\n}\n","export default function(eccent, sinphi, cosphi) {\n  var con = eccent * sinphi;\n  return cosphi / (Math.sqrt(1 - con * con));\n}","export default function(x) {\n  return x<0 ? -1 : 1;\n}","\nimport {TWO_PI, SPI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, phi, sinphi) {\n  var con = eccent * sinphi;\n  var com = 0.5 * eccent;\n  con = Math.pow(((1 - con) / (1 + con)), com);\n  return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, ts) {\n  var eccnth = 0.5 * eccent;\n  var con, dphi;\n  var phi = HALF_PI - 2 * Math.atan(ts);\n  for (var i = 0; i <= 15; i++) {\n    con = eccent * Math.sin(phi);\n    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n  //console.log(\"phi2z has NoConvergence\");\n  return -9999;\n}\n","export function init() {\n  //no-op for longlat\n}\n\nfunction identity(pt) {\n  return pt;\n}\nexport {identity as forward};\nexport {identity as inverse};\nexport var names = [\"longlat\", \"identity\"];\nexport default {\n  init: init,\n  forward: identity,\n  inverse: identity,\n  names: names\n};\n","import merc from \"./projections/merc\";\nimport longlat from \"./projections/longlat\";\nvar projs = [merc, longlat];\nvar names = {};\nvar projStore = [];\n\nfunction add(proj, i) {\n  var len = projStore.length;\n  if (!proj.names) {\n    console.log(i);\n    return true;\n  }\n  projStore[len] = proj;\n  proj.names.forEach(function(n) {\n    names[n.toLowerCase()] = len;\n  });\n  return this;\n}\n\nexport {add};\n\nexport function get(name) {\n  if (!name) {\n    return false;\n  }\n  var n = name.toLowerCase();\n  if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\n    return projStore[names[n]];\n  }\n}\n\nexport function start() {\n  projs.forEach(add);\n}\nexport default {\n  start: start,\n  add: add,\n  get: get\n};\n","import msfnz from '../common/msfnz';\n\nimport adjust_lon from '../common/adjust_lon';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport {FORTPI, R2D, EPSLN, HALF_PI} from '../constants/values';\nexport function init() {\n  var con = this.b / this.a;\n  this.es = 1 - con * con;\n  if(!('x0' in this)){\n    this.x0 = 0;\n  }\n  if(!('y0' in this)){\n    this.y0 = 0;\n  }\n  this.e = Math.sqrt(this.es);\n  if (this.lat_ts) {\n    if (this.sphere) {\n      this.k0 = Math.cos(this.lat_ts);\n    }\n    else {\n      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n    }\n  }\n  else {\n    if (!this.k0) {\n      if (this.k) {\n        this.k0 = this.k;\n      }\n      else {\n        this.k0 = 1;\n      }\n    }\n  }\n}\n\n/* Mercator forward equations--mapping lat,long to x,y\n  --------------------------------------------------*/\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  // convert to radians\n  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n    return null;\n  }\n\n  var x, y;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    return null;\n  }\n  else {\n    if (this.sphere) {\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n    }\n    else {\n      var sinphi = Math.sin(lat);\n      var ts = tsfnz(this.e, lat, sinphi);\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 - this.a * this.k0 * Math.log(ts);\n    }\n    p.x = x;\n    p.y = y;\n    return p;\n  }\n}\n\n/* Mercator inverse equations--mapping x,y to lat/long\n  --------------------------------------------------*/\nexport function inverse(p) {\n\n  var x = p.x - this.x0;\n  var y = p.y - this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n  }\n  else {\n    var ts = Math.exp(-y / (this.a * this.k0));\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","var exports = {};\nexport {exports as default};\nexports.MERIT = {\n  a: 6378137.0,\n  rf: 298.257,\n  ellipseName: \"MERIT 1983\"\n};\n\nexports.SGS85 = {\n  a: 6378136.0,\n  rf: 298.257,\n  ellipseName: \"Soviet Geodetic System 85\"\n};\n\nexports.GRS80 = {\n  a: 6378137.0,\n  rf: 298.257222101,\n  ellipseName: \"GRS 1980(IUGG, 1980)\"\n};\n\nexports.IAU76 = {\n  a: 6378140.0,\n  rf: 298.257,\n  ellipseName: \"IAU 1976\"\n};\n\nexports.airy = {\n  a: 6377563.396,\n  b: 6356256.910,\n  ellipseName: \"Airy 1830\"\n};\n\nexports.APL4 = {\n  a: 6378137,\n  rf: 298.25,\n  ellipseName: \"Appl. Physics. 1965\"\n};\n\nexports.NWL9D = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"Naval Weapons Lab., 1965\"\n};\n\nexports.mod_airy = {\n  a: 6377340.189,\n  b: 6356034.446,\n  ellipseName: \"Modified Airy\"\n};\n\nexports.andrae = {\n  a: 6377104.43,\n  rf: 300.0,\n  ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n};\n\nexports.aust_SA = {\n  a: 6378160.0,\n  rf: 298.25,\n  ellipseName: \"Australian Natl & S. Amer. 1969\"\n};\n\nexports.GRS67 = {\n  a: 6378160.0,\n  rf: 298.2471674270,\n  ellipseName: \"GRS 67(IUGG 1967)\"\n};\n\nexports.bessel = {\n  a: 6377397.155,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841\"\n};\n\nexports.bess_nam = {\n  a: 6377483.865,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841 (Namibia)\"\n};\n\nexports.clrk66 = {\n  a: 6378206.4,\n  b: 6356583.8,\n  ellipseName: \"Clarke 1866\"\n};\n\nexports.clrk80 = {\n  a: 6378249.145,\n  rf: 293.4663,\n  ellipseName: \"Clarke 1880 mod.\"\n};\n\nexports.clrk80ign = {\n  a: 6378249.2,\n  b: 6356515,\n  rf: 293.4660213,\n  ellipseName: \"Clarke 1880 (IGN)\"\n};\n\nexports.clrk58 = {\n  a: 6378293.645208759,\n  rf: 294.2606763692654,\n  ellipseName: \"Clarke 1858\"\n};\n\nexports.CPM = {\n  a: 6375738.7,\n  rf: 334.29,\n  ellipseName: \"Comm. des Poids et Mesures 1799\"\n};\n\nexports.delmbr = {\n  a: 6376428.0,\n  rf: 311.5,\n  ellipseName: \"Delambre 1810 (Belgium)\"\n};\n\nexports.engelis = {\n  a: 6378136.05,\n  rf: 298.2566,\n  ellipseName: \"Engelis 1985\"\n};\n\nexports.evrst30 = {\n  a: 6377276.345,\n  rf: 300.8017,\n  ellipseName: \"Everest 1830\"\n};\n\nexports.evrst48 = {\n  a: 6377304.063,\n  rf: 300.8017,\n  ellipseName: \"Everest 1948\"\n};\n\nexports.evrst56 = {\n  a: 6377301.243,\n  rf: 300.8017,\n  ellipseName: \"Everest 1956\"\n};\n\nexports.evrst69 = {\n  a: 6377295.664,\n  rf: 300.8017,\n  ellipseName: \"Everest 1969\"\n};\n\nexports.evrstSS = {\n  a: 6377298.556,\n  rf: 300.8017,\n  ellipseName: \"Everest (Sabah & Sarawak)\"\n};\n\nexports.fschr60 = {\n  a: 6378166.0,\n  rf: 298.3,\n  ellipseName: \"Fischer (Mercury Datum) 1960\"\n};\n\nexports.fschr60m = {\n  a: 6378155.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1960\"\n};\n\nexports.fschr68 = {\n  a: 6378150.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1968\"\n};\n\nexports.helmert = {\n  a: 6378200.0,\n  rf: 298.3,\n  ellipseName: \"Helmert 1906\"\n};\n\nexports.hough = {\n  a: 6378270.0,\n  rf: 297.0,\n  ellipseName: \"Hough\"\n};\n\nexports.intl = {\n  a: 6378388.0,\n  rf: 297.0,\n  ellipseName: \"International 1909 (Hayford)\"\n};\n\nexports.kaula = {\n  a: 6378163.0,\n  rf: 298.24,\n  ellipseName: \"Kaula 1961\"\n};\n\nexports.lerch = {\n  a: 6378139.0,\n  rf: 298.257,\n  ellipseName: \"Lerch 1979\"\n};\n\nexports.mprts = {\n  a: 6397300.0,\n  rf: 191.0,\n  ellipseName: \"Maupertius 1738\"\n};\n\nexports.new_intl = {\n  a: 6378157.5,\n  b: 6356772.2,\n  ellipseName: \"New International 1967\"\n};\n\nexports.plessis = {\n  a: 6376523.0,\n  rf: 6355863.0,\n  ellipseName: \"Plessis 1817 (France)\"\n};\n\nexports.krass = {\n  a: 6378245.0,\n  rf: 298.3,\n  ellipseName: \"Krassovsky, 1942\"\n};\n\nexports.SEasia = {\n  a: 6378155.0,\n  b: 6356773.3205,\n  ellipseName: \"Southeast Asia\"\n};\n\nexports.walbeck = {\n  a: 6376896.0,\n  b: 6355834.8467,\n  ellipseName: \"Walbeck\"\n};\n\nexports.WGS60 = {\n  a: 6378165.0,\n  rf: 298.3,\n  ellipseName: \"WGS 60\"\n};\n\nexports.WGS66 = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"WGS 66\"\n};\n\nexports.WGS7 = {\n  a: 6378135.0,\n  rf: 298.26,\n  ellipseName: \"WGS 72\"\n};\n\nexport var WGS84 = exports.WGS84 = {\n  a: 6378137.0,\n  rf: 298.257223563,\n  ellipseName: \"WGS 84\"\n};\n\nexports.sphere = {\n  a: 6370997.0,\n  b: 6370997.0,\n  ellipseName: \"Normal Sphere (r=6370997)\"\n};\n","var datums = {\n  wgs84: {\n    towgs84: \"0,0,0\",\n    ellipse: \"WGS84\",\n    datumName: \"WGS84\"\n  },\n  ch1903: {\n    towgs84: \"674.374,15.056,405.346\",\n    ellipse: \"bessel\",\n    datumName: \"swiss\"\n  },\n  ggrs87: {\n    towgs84: \"-199.87,74.79,246.62\",\n    ellipse: \"GRS80\",\n    datumName: \"Greek_Geodetic_Reference_System_1987\"\n  },\n  nad83: {\n    towgs84: \"0,0,0\",\n    ellipse: \"GRS80\",\n    datumName: \"North_American_Datum_1983\"\n  },\n  nad27: {\n    nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n    ellipse: \"clrk66\",\n    datumName: \"North_American_Datum_1927\"\n  },\n  potsdam: {\n    towgs84: \"598.1,73.7,418.2,0.202,0.045,-2.455,6.7\",\n    ellipse: \"bessel\",\n    datumName: \"Potsdam Rauenberg 1950 DHDN\"\n  },\n  carthage: {\n    towgs84: \"-263.0,6.0,431.0\",\n    ellipse: \"clark80\",\n    datumName: \"Carthage 1934 Tunisia\"\n  },\n  hermannskogel: {\n    towgs84: \"577.326,90.129,463.919,5.137,1.474,5.297,2.4232\",\n    ellipse: \"bessel\",\n    datumName: \"Hermannskogel\"\n  },\n  mgi: {\n    towgs84: \"577.326,90.129,463.919,5.137,1.474,5.297,2.4232\",\n    ellipse: \"bessel\",\n    datumName: \"Militar-Geographische Institut\",\n  },\n  osni52: {\n    towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n    ellipse: \"airy\",\n    datumName: \"Irish National\"\n  },\n  ire65: {\n    towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n    ellipse: \"mod_airy\",\n    datumName: \"Ireland 1965\"\n  },\n  rassadiran: {\n    towgs84: \"-133.63,-157.5,-158.62\",\n    ellipse: \"intl\",\n    datumName: \"Rassadiran\"\n  },\n  nzgd49: {\n    towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n    ellipse: \"intl\",\n    datumName: \"New Zealand Geodetic Datum 1949\"\n  },\n  osgb36: {\n    towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n    ellipse: \"airy\",\n    datumName: \"Ordnance Survey of Great Britain 1936\"\n  },\n  s_jtsk: {\n    towgs84: \"589,76,480\",\n    ellipse: 'bessel',\n    datumName: 'S-JTSK (Ferro)'\n  },\n  beduaram: {\n    towgs84: '-106,-87,188',\n    ellipse: 'clrk80',\n    datumName: 'Beduaram'\n  },\n  gunung_segara: {\n    towgs84: '-403,684,41',\n    ellipse: 'bessel',\n    datumName: 'Gunung Segara Jakarta'\n  },\n  rnb72: {\n    towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n    ellipse: \"intl\",\n    datumName: \"Reseau National Belge 1972\"\n  }\n};\n\nfor (var key in datums) {\n  var datum = datums[key];\n  datums[datum.datumName] = datum;\n}\n\nexport default datums;\n","import {PJD_3PARAM, PJD_7PARAM, PJD_GRIDSHIFT, PJD_WGS84, PJD_NODATUM, SEC_TO_RAD} from './constants/values';\n\nfunction datum(datumCode, datum_params, a, b, es, ep2, nadgrids) {\n  var out = {};\n\n  if (datumCode === undefined || datumCode === 'none') {\n    out.datum_type = PJD_NODATUM;\n  } else {\n    out.datum_type = PJD_WGS84;\n  }\n\n  if (datum_params) {\n    out.datum_params = datum_params.map(parseFloat);\n    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n      out.datum_type = PJD_3PARAM;\n    }\n    if (out.datum_params.length > 3) {\n      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n        out.datum_type = PJD_7PARAM;\n        out.datum_params[3] *= SEC_TO_RAD;\n        out.datum_params[4] *= SEC_TO_RAD;\n        out.datum_params[5] *= SEC_TO_RAD;\n        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n      }\n    }\n  }\n\n  if (nadgrids) {\n    out.datum_type = PJD_GRIDSHIFT;\n    out.grids = nadgrids;\n  }\n  out.a = a; //datum object also uses these values\n  out.b = b;\n  out.es = es;\n  out.ep2 = ep2;\n  return out;\n}\n\nexport default datum;\n","/**\n * Resources for details of NTv2 file formats:\n * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf\n * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm\n */\n\nvar loadedNadgrids = {};\n\n/**\n * Load a binary NTv2 file (.gsb) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file\n * as an ArrayBuffer.\n */\nexport default function nadgrid(key, data) {\n  var view = new DataView(data);\n  var isLittleEndian = detectLittleEndian(view);\n  var header = readHeader(view, isLittleEndian);\n  var subgrids = readSubgrids(view, header, isLittleEndian);\n  var nadgrid = {header: header, subgrids: subgrids};\n  loadedNadgrids[key] = nadgrid;\n  return nadgrid;\n}\n\n/**\n * Given a proj4 value for nadgrids, return an array of loaded grids\n */\nexport function getNadgrids(nadgrids) {\n  // Format details: http://proj.maptools.org/gen_parms.html\n  if (nadgrids === undefined) { return null; }\n  var grids = nadgrids.split(',');\n  return grids.map(parseNadgridString);\n}\n\nfunction parseNadgridString(value) {\n  if (value.length === 0) {\n    return null;\n  }\n  var optional = value[0] === '@';\n  if (optional) {\n    value = value.slice(1);\n  }\n  if (value === 'null') {\n    return {name: 'null', mandatory: !optional, grid: null, isNull: true};\n  }\n  return {\n    name: value,\n    mandatory: !optional,\n    grid: loadedNadgrids[value] || null,\n    isNull: false\n  };\n}\n\nfunction secondsToRadians(seconds) {\n  return (seconds / 3600) * Math.PI / 180;\n}\n\nfunction detectLittleEndian(view) {\n  var nFields = view.getInt32(8, false);\n  if (nFields === 11) {\n    return false;\n  }\n  nFields = view.getInt32(8, true);\n  if (nFields !== 11) {\n    console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');\n  }\n  return true;\n}\n\nfunction readHeader(view, isLittleEndian) {\n  return {\n    nFields: view.getInt32(8, isLittleEndian),\n    nSubgridFields: view.getInt32(24, isLittleEndian),\n    nSubgrids: view.getInt32(40, isLittleEndian),\n    shiftType: decodeString(view, 56, 56 + 8).trim(),\n    fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),\n    fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),\n    toSemiMajorAxis: view.getFloat64(152, isLittleEndian),\n    toSemiMinorAxis: view.getFloat64(168, isLittleEndian),\n  };\n}\n\nfunction decodeString(view, start, end) {\n  return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));\n}\n\nfunction readSubgrids(view, header, isLittleEndian) {\n  var gridOffset = 176;\n  var grids = [];\n  for (var i = 0; i < header.nSubgrids; i++) {\n    var subHeader = readGridHeader(view, gridOffset, isLittleEndian);\n    var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian);\n    var lngColumnCount = Math.round(\n      1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);\n    var latColumnCount = Math.round(\n      1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);\n    // Proj4 operates on radians whereas the coordinates are in seconds in the grid\n    grids.push({\n      ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],\n      del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],\n      lim: [lngColumnCount, latColumnCount],\n      count: subHeader.gridNodeCount,\n      cvs: mapNodes(nodes)\n    });\n    gridOffset += 176 + subHeader.gridNodeCount * 16;\n  }\n  return grids;\n}\n\nfunction mapNodes(nodes) {\n  return nodes.map(function (r) {return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];});\n}\n\nfunction readGridHeader(view, offset, isLittleEndian) {\n  return {\n    name: decodeString(view, offset + 8, offset + 16).trim(),\n    parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),\n    lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),\n    upperLatitude: view.getFloat64(offset + 88, isLittleEndian),\n    lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),\n    upperLongitude: view.getFloat64(offset + 120, isLittleEndian),\n    latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),\n    longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),\n    gridNodeCount: view.getInt32(offset + 168, isLittleEndian)\n  };\n}\n\nfunction readGridNodes(view, offset, gridHeader, isLittleEndian) {\n  var nodesOffset = offset + 176;\n  var gridRecordLength = 16;\n  var gridShiftRecords = [];\n  for (var i = 0; i < gridHeader.gridNodeCount; i++) {\n    var record = {\n      latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),\n      longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),\n      latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),\n      longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian),\n    };\n    gridShiftRecords.push(record);\n  }\n  return gridShiftRecords;\n}\n","import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport {sphere as dc_sphere, eccentricity as dc_eccentricity} from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\nimport {getNadgrids} from \"./nadgrid\";\n\nfunction Projection(srsCode,callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function(error){\n    if(error){\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if(typeof json !== 'object'){\n    callback('Could not parse to valid json: ' + srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if(!ourProj){\n    callback('Could not get projection name from: ' + srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n    if (datumDef) {\n      json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(',') : null);\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  json.lat1 = json.lat1 || json.lat0; // Lambert_Conformal_Conic_1SP, for example, needs this\n\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var nadgrids = getNadgrids(json.nadgrids);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2,\n    nadgrids);\n\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calculated in deriveConstants.sphere\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n\n}\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;\n","import {SIXTH, RA4, RA6, EPSLN} from './constants/values';\nimport {default as Ellipsoid, WGS84} from './constants/Ellipsoid';\nimport match from './match';\n\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) { // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}\n","'use strict';\nimport {PJD_3PARAM, PJD_7PARAM, HALF_PI} from './constants/values';\nexport function compareDatums(source, dest) {\n  if (source.datum_type !== dest.datum_type) {\n    return false; // false, datums are not equal\n  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n    // the tolerance for es is to ensure that GRS80 and WGS84\n    // are considered identical\n    return false;\n  } else if (source.datum_type === PJD_3PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n  } else if (source.datum_type === PJD_7PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n  } else {\n    return true; // datums are equal\n  }\n} // cs_compare_datums()\n\n/*\n * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n * according to the current ellipsoid parameters.\n *\n *    Latitude  : Geodetic latitude in radians                     (input)\n *    Longitude : Geodetic longitude in radians                    (input)\n *    Height    : Geodetic height, in meters                       (input)\n *    X         : Calculated Geocentric X coordinate, in meters    (output)\n *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n *\n */\nexport function geodeticToGeocentric(p, es, a) {\n  var Longitude = p.x;\n  var Latitude = p.y;\n  var Height = p.z ? p.z : 0; //Z value not always supplied\n\n  var Rn; /*  Earth radius at location  */\n  var Sin_Lat; /*  Math.sin(Latitude)  */\n  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n  var Cos_Lat; /*  Math.cos(Latitude)  */\n\n  /*\n   ** Don't blow up if Latitude is just a little out of the value\n   ** range as it may just be a rounding issue.  Also removed longitude\n   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n   */\n  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n    Latitude = -HALF_PI;\n  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n    Latitude = HALF_PI;\n  } else if (Latitude < -HALF_PI) {\n    /* Latitude out of range */\n    //..reportError('geocent:lat out of range:' + Latitude);\n    return { x: -Infinity, y: -Infinity, z: p.z };\n  } else if (Latitude > HALF_PI) {\n    /* Latitude out of range */\n    return { x: Infinity, y: Infinity, z: p.z };\n  }\n\n  if (Longitude > Math.PI) {\n    Longitude -= (2 * Math.PI);\n  }\n  Sin_Lat = Math.sin(Latitude);\n  Cos_Lat = Math.cos(Latitude);\n  Sin2_Lat = Sin_Lat * Sin_Lat;\n  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n  return {\n    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n    z: ((Rn * (1 - es)) + Height) * Sin_Lat\n  };\n} // cs_geodetic_to_geocentric()\n\nexport function geocentricToGeodetic(p, es, a, b) {\n  /* local defintions and variables */\n  /* end-criterium of loop, accuracy of sin(Latitude) */\n  var genau = 1e-12;\n  var genau2 = (genau * genau);\n  var maxiter = 30;\n\n  var P; /* distance between semi-minor axis and location */\n  var RR; /* distance between center and location */\n  var CT; /* sin of geocentric latitude */\n  var ST; /* cos of geocentric latitude */\n  var RX;\n  var RK;\n  var RN; /* Earth radius at location */\n  var CPHI0; /* cos of start or old geodetic latitude in iterations */\n  var SPHI0; /* sin of start or old geodetic latitude in iterations */\n  var CPHI; /* cos of searched geodetic latitude */\n  var SPHI; /* sin of searched geodetic latitude */\n  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n  var X = p.x;\n  var Y = p.y;\n  var Z = p.z ? p.z : 0.0; //Z value not always supplied\n  var Longitude;\n  var Latitude;\n  var Height;\n\n  P = Math.sqrt(X * X + Y * Y);\n  RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n  /*      special cases for latitude and longitude */\n  if (P / a < genau) {\n\n    /*  special case, if P=0. (X=0., Y=0.) */\n    Longitude = 0.0;\n\n    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n    if (RR / a < genau) {\n      Latitude = HALF_PI;\n      Height = -b;\n      return {\n        x: p.x,\n        y: p.y,\n        z: p.z\n      };\n    }\n  } else {\n    /*  ellipsoidal (geodetic) longitude\n     *  interval: -PI < Longitude <= +PI */\n    Longitude = Math.atan2(Y, X);\n  }\n\n  /* --------------------------------------------------------------\n   * Following iterative algorithm was developped by\n   * \"Institut for Erdmessung\", University of Hannover, July 1988.\n   * Internet: www.ife.uni-hannover.de\n   * Iterative computation of CPHI,SPHI and Height.\n   * Iteration of CPHI and SPHI to 10**-12 radian resp.\n   * 2*10**-7 arcsec.\n   * --------------------------------------------------------------\n   */\n  CT = Z / RR;\n  ST = P / RR;\n  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n  CPHI0 = ST * (1.0 - es) * RX;\n  SPHI0 = CT * RX;\n  iter = 0;\n\n  /* loop to find sin(Latitude) resp. Latitude\n   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n  do {\n    iter++;\n    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n    /*  ellipsoidal (geodetic) height */\n    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n    RK = es * RN / (RN + Height);\n    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n    CPHI = ST * (1.0 - RK) * RX;\n    SPHI = CT * RX;\n    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n    CPHI0 = CPHI;\n    SPHI0 = SPHI;\n  }\n  while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n  /*      ellipsoidal (geodetic) latitude */\n  Latitude = Math.atan(SPHI / Math.abs(CPHI));\n  return {\n    x: Longitude,\n    y: Latitude,\n    z: Height\n  };\n} // cs_geocentric_to_geodetic()\n\n/****************************************************************/\n// pj_geocentic_to_wgs84( p )\n//  p = point to transform in geocentric coordinates (x,y,z)\n\n\n/** point object, nothing fancy, just allows values to be\n    passed back and forth by reference rather than by value.\n    Other point classes may be used as long as they have\n    x and y properties, which will get modified in the transform method.\n*/\nexport function geocentricToWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x + datum_params[0],\n      y: p.y + datum_params[1],\n      z: p.z + datum_params[2],\n    };\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n    };\n  }\n} // cs_geocentric_to_wgs84\n\n/****************************************************************/\n// pj_geocentic_from_wgs84()\n//  coordinate system definition,\n//  point to transform in geocentric coordinates (x,y,z)\nexport function geocentricFromWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x - datum_params[0],\n      y: p.y - datum_params[1],\n      z: p.z - datum_params[2],\n    };\n\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    var x_tmp = (p.x - Dx_BF) / M_BF;\n    var y_tmp = (p.y - Dy_BF) / M_BF;\n    var z_tmp = (p.z - Dz_BF) / M_BF;\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n\n    return {\n      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n    };\n  } //cs_geocentric_from_wgs84()\n}\n","import {\n  PJD_3PARAM,\n  PJD_7PARAM,\n  PJD_GRIDSHIFT,\n  PJD_NODATUM,\n  R2D,\n  SRS_WGS84_ESQUARED,\n  SRS_WGS84_SEMIMAJOR, SRS_WGS84_SEMIMINOR\n} from './constants/values';\n\nimport {geodeticToGeocentric, geocentricToGeodetic, geocentricToWgs84, geocentricFromWgs84, compareDatums} from './datumUtils';\nimport adjust_lon from \"./common/adjust_lon\";\nfunction checkParams(type) {\n  return (type === PJD_3PARAM || type === PJD_7PARAM);\n}\n\nexport default function(source, dest, point) {\n  // Short cut if the datums are identical.\n  if (compareDatums(source, dest)) {\n    return point; // in this case, zero is sucess,\n    // whereas cs_compare_datums returns 1 to indicate TRUE\n    // confusing, should fix this\n  }\n\n  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n    return point;\n  }\n\n  // If this datum requires grid shifts, then apply it to geodetic coordinates.\n  var source_a = source.a;\n  var source_es = source.es;\n  if (source.datum_type === PJD_GRIDSHIFT) {\n    var gridShiftCode = applyGridShift(source, false, point);\n    if (gridShiftCode !== 0) {\n      return undefined;\n    }\n    source_a = SRS_WGS84_SEMIMAJOR;\n    source_es = SRS_WGS84_ESQUARED;\n  }\n\n  var dest_a = dest.a;\n  var dest_b = dest.b;\n  var dest_es = dest.es;\n  if (dest.datum_type === PJD_GRIDSHIFT) {\n    dest_a = SRS_WGS84_SEMIMAJOR;\n    dest_b = SRS_WGS84_SEMIMINOR;\n    dest_es = SRS_WGS84_ESQUARED;\n  }\n\n  // Do we need to go through geocentric coordinates?\n  if (source_es === dest_es && source_a === dest_a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n    return point;\n  }\n\n  // Convert to geocentric coordinates.\n  point = geodeticToGeocentric(point, source_es, source_a);\n  // Convert between datums\n  if (checkParams(source.datum_type)) {\n    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n  }\n  if (checkParams(dest.datum_type)) {\n    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n  }\n  point = geocentricToGeodetic(point, dest_es, dest_a, dest_b);\n\n  if (dest.datum_type === PJD_GRIDSHIFT) {\n    var destGridShiftResult = applyGridShift(dest, true, point);\n    if (destGridShiftResult !== 0) {\n      return undefined;\n    }\n  }\n\n  return point;\n}\n\nexport function applyGridShift(source, inverse, point) {\n  if (source.grids === null || source.grids.length === 0) {\n    console.log('Grid shift grids not found');\n    return -1;\n  }\n  var input = {x: -point.x, y: point.y};\n  var output = {x: Number.NaN, y: Number.NaN};\n  var onlyMandatoryGrids = false;\n  var attemptedGrids = [];\n  outer:\n  for (var i = 0; i < source.grids.length; i++) {\n    var grid = source.grids[i];\n    attemptedGrids.push(grid.name);\n    if (grid.isNull) {\n      output = input;\n      break;\n    }\n    onlyMandatoryGrids = grid.mandatory;\n    if (grid.grid === null) {\n      if (grid.mandatory) {\n        console.log(\"Unable to find mandatory grid '\" + grid.name + \"'\");\n        return -1;\n      }\n      continue;\n    }\n    var subgrids = grid.grid.subgrids;\n    for (var j = 0, jj = subgrids.length; j < jj; j++) {\n      var subgrid = subgrids[j];\n      // skip tables that don't match our point at all\n      var epsilon = (Math.abs(subgrid.del[1]) + Math.abs(subgrid.del[0])) / 10000.0;\n      var minX = subgrid.ll[0] - epsilon;\n      var minY = subgrid.ll[1] - epsilon;\n      var maxX = subgrid.ll[0] + (subgrid.lim[0] - 1) * subgrid.del[0] + epsilon;\n      var maxY = subgrid.ll[1] + (subgrid.lim[1] - 1) * subgrid.del[1] + epsilon;\n      if (minY > input.y || minX > input.x || maxY < input.y || maxX < input.x ) {\n        continue;\n      }\n      output = applySubgridShift(input, inverse, subgrid);\n      if (!isNaN(output.x)) {\n        break outer;\n      }\n    }\n  }\n  if (isNaN(output.x)) {\n    console.log(\"Failed to find a grid shift table for location '\"+\n      -input.x * R2D + \" \" + input.y * R2D + \" tried: '\" + attemptedGrids + \"'\");\n    return -1;\n  }\n  point.x = -output.x;\n  point.y = output.y;\n  return 0;\n}\n\nfunction applySubgridShift(pin, inverse, ct) {\n  var val = {x: Number.NaN, y: Number.NaN};\n  if (isNaN(pin.x)) { return val; }\n  var tb = {x: pin.x, y: pin.y};\n  tb.x -= ct.ll[0];\n  tb.y -= ct.ll[1];\n  tb.x = adjust_lon(tb.x - Math.PI) + Math.PI;\n  var t = nadInterpolate(tb, ct);\n  if (inverse) {\n    if (isNaN(t.x)) {\n      return val;\n    }\n    t.x = tb.x - t.x;\n    t.y = tb.y - t.y;\n    var i = 9, tol = 1e-12;\n    var dif, del;\n    do {\n      del = nadInterpolate(t, ct);\n      if (isNaN(del.x)) {\n        console.log(\"Inverse grid shift iteration failed, presumably at grid edge.  Using first approximation.\");\n        break;\n      }\n      dif = {x: tb.x - (del.x + t.x), y: tb.y - (del.y + t.y)};\n      t.x += dif.x;\n      t.y += dif.y;\n    } while (i-- && Math.abs(dif.x) > tol && Math.abs(dif.y) > tol);\n    if (i < 0) {\n      console.log(\"Inverse grid shift iterator failed to converge.\");\n      return val;\n    }\n    val.x = adjust_lon(t.x + ct.ll[0]);\n    val.y = t.y + ct.ll[1];\n  } else {\n    if (!isNaN(t.x)) {\n      val.x = pin.x + t.x;\n      val.y = pin.y + t.y;\n    }\n  }\n  return val;\n}\n\nfunction nadInterpolate(pin, ct) {\n  var t = {x: pin.x / ct.del[0], y: pin.y / ct.del[1]};\n  var indx = {x: Math.floor(t.x), y: Math.floor(t.y)};\n  var frct = {x: t.x - 1.0 * indx.x, y: t.y - 1.0 * indx.y};\n  var val= {x: Number.NaN, y: Number.NaN};\n  var inx;\n  if (indx.x < 0 || indx.x >= ct.lim[0]) {\n    return val;\n  }\n  if (indx.y < 0 || indx.y >= ct.lim[1]) {\n    return val;\n  }\n  inx = (indx.y * ct.lim[0]) + indx.x;\n  var f00 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx++;\n  var f10= {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx += ct.lim[0];\n  var f11 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx--;\n  var f01 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  var m11 = frct.x * frct.y, m10 = frct.x * (1.0 - frct.y),\n    m00 = (1.0 - frct.x) * (1.0 - frct.y), m01 = (1.0 - frct.x) * frct.y;\n  val.x = (m00 * f00.x + m10 * f10.x + m01 * f01.x + m11 * f11.x);\n  val.y = (m00 * f00.y + m10 * f10.y + m01 * f01.y + m11 * f11.y);\n  return val;\n}\n","export default function(crs, denorm, point) {\n  var xin = point.x,\n    yin = point.y,\n    zin = point.z || 0.0;\n  var v, t, i;\n  var out = {};\n  for (i = 0; i < 3; i++) {\n    if (denorm && i === 2 && point.z === undefined) {\n      continue;\n    }\n    if (i === 0) {\n      v = xin;\n      if (\"ew\".indexOf(crs.axis[i]) !== -1) {\n        t = 'x';\n      } else {\n        t = 'y';\n      }\n\n    }\n    else if (i === 1) {\n      v = yin;\n      if (\"ns\".indexOf(crs.axis[i]) !== -1) {\n        t = 'y';\n      } else {\n        t = 'x';\n      }\n    }\n    else {\n      v = zin;\n      t = 'z';\n    }\n    switch (crs.axis[i]) {\n    case 'e':\n      out[t] = v;\n      break;\n    case 'w':\n      out[t] = -v;\n      break;\n    case 'n':\n      out[t] = v;\n      break;\n    case 's':\n      out[t] = -v;\n      break;\n    case 'u':\n      if (point[t] !== undefined) {\n        out.z = v;\n      }\n      break;\n    case 'd':\n      if (point[t] !== undefined) {\n        out.z = -v;\n      }\n      break;\n    default:\n      //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n      return null;\n    }\n  }\n  return out;\n}\n","export default function (array){\n  var out = {\n    x: array[0],\n    y: array[1]\n  };\n  if (array.length>2) {\n    out.z = array[2];\n  }\n  if (array.length>3) {\n    out.m = array[3];\n  }\n  return out;\n}","export default function (point) {\n  checkCoord(point.x);\n  checkCoord(point.y);\n}\nfunction checkCoord(num) {\n  if (typeof Number.isFinite === 'function') {\n    if (Number.isFinite(num)) {\n      return;\n    }\n    throw new TypeError('coordinates must be finite numbers');\n  }\n  if (typeof num !== 'number' || num !== num || !isFinite(num)) {\n    throw new TypeError('coordinates must be finite numbers');\n  }\n}\n","import {D2R, R2D, PJD_3PARAM, PJD_7PARAM, PJD_GRIDSHIFT} from './constants/values';\nimport datum_transform from './datum_transform';\nimport adjust_axis from './adjust_axis';\nimport proj from './Proj';\nimport toPoint from './common/toPoint';\nimport checkSanity from './checkSanity';\n\nfunction checkNotWGS(source, dest) {\n  return (\n    (source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM || source.datum.datum_type === PJD_GRIDSHIFT) && dest.datumCode !== 'WGS84') ||\n    ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM || dest.datum.datum_type === PJD_GRIDSHIFT) && source.datumCode !== 'WGS84');\n}\n\nexport default function transform(source, dest, point, enforceAxis) {\n  var wgs84;\n  if (Array.isArray(point)) {\n    point = toPoint(point);\n  } else {\n    // Clone the point object so inputs don't get modified\n    point = {\n      x: point.x,\n      y: point.y,\n      z: point.z,\n      m: point.m\n    };\n  }\n  var hasZ = point.z !== undefined;\n  checkSanity(point);\n  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n  if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n    wgs84 = new proj('WGS84');\n    point = transform(source, wgs84, point, enforceAxis);\n    source = wgs84;\n  }\n  // DGR, 2010/11/12\n  if (enforceAxis && source.axis !== 'enu') {\n    point = adjust_axis(source, false, point);\n  }\n  // Transform source points to long/lat, if they aren't already.\n  if (source.projName === 'longlat') {\n    point = {\n      x: point.x * D2R,\n      y: point.y * D2R,\n      z: point.z || 0\n    };\n  } else {\n    if (source.to_meter) {\n      point = {\n        x: point.x * source.to_meter,\n        y: point.y * source.to_meter,\n        z: point.z || 0\n      };\n    }\n    point = source.inverse(point); // Convert Cartesian to longlat\n    if (!point) {\n      return;\n    }\n  }\n  // Adjust for the prime meridian if necessary\n  if (source.from_greenwich) {\n    point.x += source.from_greenwich;\n  }\n\n  // Convert datums if needed, and if possible.\n  point = datum_transform(source.datum, dest.datum, point);\n  if (!point) {\n    return;\n  }\n\n  // Adjust for the prime meridian if necessary\n  if (dest.from_greenwich) {\n    point = {\n      x: point.x - dest.from_greenwich,\n      y: point.y,\n      z: point.z || 0\n    };\n  }\n\n  if (dest.projName === 'longlat') {\n    // convert radians to decimal degrees\n    point = {\n      x: point.x * R2D,\n      y: point.y * R2D,\n      z: point.z || 0\n    };\n  } else { // else project\n    point = dest.forward(point);\n    if (dest.to_meter) {\n      point = {\n        x: point.x / dest.to_meter,\n        y: point.y / dest.to_meter,\n        z: point.z || 0\n      };\n    }\n  }\n\n  // DGR, 2010/11/12\n  if (enforceAxis && dest.axis !== 'enu') {\n    return adjust_axis(dest, true, point);\n  }\n\n  if (point && !hasZ) {\n    delete point.z;\n  }\n  return point;\n}\n","import proj from './Proj';\nimport transform from './transform';\nvar wgs84 = proj('WGS84');\n\nfunction transformer(from, to, coords, enforceAxis) {\n  var transformedArray, out, keys;\n  if (Array.isArray(coords)) {\n    transformedArray = transform(from, to, coords, enforceAxis) || {x: NaN, y: NaN};\n    if (coords.length > 2) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (typeof transformedArray.z === 'number') {\n          return [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.slice(3));\n        } else {\n          return [transformedArray.x, transformedArray.y, coords[2]].concat(coords.slice(3));\n        }\n      } else {\n        return [transformedArray.x, transformedArray.y].concat(coords.slice(2));\n      }\n    } else {\n      return [transformedArray.x, transformedArray.y];\n    }\n  } else {\n    out = transform(from, to, coords, enforceAxis);\n    keys = Object.keys(coords);\n    if (keys.length === 2) {\n      return out;\n    }\n    keys.forEach(function (key) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (key === 'x' || key === 'y' || key === 'z') {\n          return;\n        }\n      } else {\n        if (key === 'x' || key === 'y') {\n          return;\n        }\n      }\n      out[key] = coords[key];\n    });\n    return out;\n  }\n}\n\nfunction checkProj(item) {\n  if (item instanceof proj) {\n    return item;\n  }\n  if (item.oProj) {\n    return item.oProj;\n  }\n  return proj(item);\n}\n\nfunction proj4(fromProj, toProj, coord) {\n  fromProj = checkProj(fromProj);\n  var single = false;\n  var obj;\n  if (typeof toProj === 'undefined') {\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n    coord = toProj;\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  toProj = checkProj(toProj);\n  if (coord) {\n    return transformer(fromProj, toProj, coord);\n  } else {\n    obj = {\n      forward: function (coords, enforceAxis) {\n        return transformer(fromProj, toProj, coords, enforceAxis);\n      },\n      inverse: function (coords, enforceAxis) {\n        return transformer(toProj, fromProj, coords, enforceAxis);\n      }\n    };\n    if (single) {\n      obj.oProj = toProj;\n    }\n    return obj;\n  }\n}\nexport default proj4;","\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n","import {toPoint, forward} from 'mgrs';\n\nfunction Point(x, y, z) {\n  if (!(this instanceof Point)) {\n    return new Point(x, y, z);\n  }\n  if (Array.isArray(x)) {\n    this.x = x[0];\n    this.y = x[1];\n    this.z = x[2] || 0.0;\n  } else if(typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n    this.z = x.z || 0.0;\n  } else if (typeof x === 'string' && typeof y === 'undefined') {\n    var coords = x.split(',');\n    this.x = parseFloat(coords[0], 10);\n    this.y = parseFloat(coords[1], 10);\n    this.z = parseFloat(coords[2], 10) || 0.0;\n  } else {\n    this.x = x;\n    this.y = y;\n    this.z = z || 0.0;\n  }\n  console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\n}\n\nPoint.fromMGRS = function(mgrsStr) {\n  return new Point(toPoint(mgrsStr));\n};\nPoint.prototype.toMGRS = function(accuracy) {\n  return forward([this.x, this.y], accuracy);\n};\nexport default Point;\n","var C00 = 1;\nvar C02 = 0.25;\nvar C04 = 0.046875;\nvar C06 = 0.01953125;\nvar C08 = 0.01068115234375;\nvar C22 = 0.75;\nvar C44 = 0.46875;\nvar C46 = 0.01302083333333333333;\nvar C48 = 0.00712076822916666666;\nvar C66 = 0.36458333333333333333;\nvar C68 = 0.00569661458333333333;\nvar C88 = 0.3076171875;\n\nexport default function(es) {\n  var en = [];\n  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n  var t = es * es;\n  en[2] = t * (C44 - es * (C46 + es * C48));\n  t *= es;\n  en[3] = t * (C66 - es * C68);\n  en[4] = t * es * C88;\n  return en;\n}","export default function(phi, sphi, cphi, en) {\n  cphi *= sphi;\n  sphi *= sphi;\n  return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\n}","import pj_mlfn from \"./pj_mlfn\";\nimport {EPSLN} from '../constants/values';\n\nvar MAX_ITER = 20;\n\nexport default function(arg, es, en) {\n  var k = 1 / (1 - es);\n  var phi = arg;\n  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n    var s = Math.sin(phi);\n    var t = 1 - es * s * s;\n    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n    //phi -= t * (t * Math.sqrt(t)) * k;\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n    phi -= t;\n    if (Math.abs(t) < EPSLN) {\n      return phi;\n    }\n  }\n  //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n  return phi;\n}\n","// Heavily based on this tmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\nimport pj_enfn from '../common/pj_enfn';\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport adjust_lon from '../common/adjust_lon';\n\nimport {EPSLN, HALF_PI} from '../constants/values';\nimport sign from '../common/sign';\n\nexport function init() {\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n  }\n}\n\n/**\n    Transverse Mercator Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var con;\n  var x, y;\n  var sin_phi = Math.sin(lat);\n  var cos_phi = Math.cos(lat);\n\n  if (!this.es) {\n    var b = cos_phi * Math.sin(delta_lon);\n\n    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n      return (93);\n    }\n    else {\n      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n      b = Math.abs(y);\n\n      if (b >= 1) {\n        if ((b - 1) > EPSLN) {\n          return (93);\n        }\n        else {\n          y = 0;\n        }\n      }\n      else {\n        y = Math.acos(y);\n      }\n\n      if (lat < 0) {\n        y = -y;\n      }\n\n      y = this.a * this.k0 * (y - this.lat0) + this.y0;\n    }\n  }\n  else {\n    var al = cos_phi * delta_lon;\n    var als = Math.pow(al, 2);\n    var c = this.ep2 * Math.pow(cos_phi, 2);\n    var cs = Math.pow(c, 2);\n    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n    var t = Math.pow(tq, 2);\n    var ts = Math.pow(t, 2);\n    con = 1 - this.es * Math.pow(sin_phi, 2);\n    al = al / Math.sqrt(con);\n    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n    x = this.a * (this.k0 * al * (1 +\n      als / 6 * (1 - t + c +\n      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n      this.x0;\n\n    y = this.a * (this.k0 * (ml - this.ml0 +\n      sin_phi * delta_lon * al / 2 * (1 +\n      als / 12 * (5 - t + 9 * c + 4 * cs +\n      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n      this.y0;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\n/**\n    Transverse Mercator Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var con, phi;\n  var lat, lon;\n  var x = (p.x - this.x0) * (1 / this.a);\n  var y = (p.y - this.y0) * (1 / this.a);\n\n  if (!this.es) {\n    var f = Math.exp(x / this.k0);\n    var g = 0.5 * (f - 1 / f);\n    var temp = this.lat0 + y / this.k0;\n    var h = Math.cos(temp);\n    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n    lat = Math.asin(con);\n\n    if (y < 0) {\n      lat = -lat;\n    }\n\n    if ((g === 0) && (h === 0)) {\n      lon = 0;\n    }\n    else {\n      lon = adjust_lon(Math.atan2(g, h) + this.long0);\n    }\n  }\n  else { // ellipsoidal form\n    con = this.ml0 + y / this.k0;\n    phi = pj_inv_mlfn(con, this.es, this.en);\n\n    if (Math.abs(phi) < HALF_PI) {\n      var sin_phi = Math.sin(phi);\n      var cos_phi = Math.cos(phi);\n      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n      var c = this.ep2 * Math.pow(cos_phi, 2);\n      var cs = Math.pow(c, 2);\n      var t = Math.pow(tan_phi, 2);\n      var ts = Math.pow(t, 2);\n      con = 1 - this.es * Math.pow(sin_phi, 2);\n      var d = x * Math.sqrt(con) / this.k0;\n      var ds = Math.pow(d, 2);\n      con = con * tan_phi;\n\n      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n      lon = adjust_lon(this.long0 + (d * (1 -\n        ds / 6 * (1 + 2 * t + c -\n        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n    }\n    else {\n      lat = HALF_PI * sign(y);\n      lon = 0;\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Fast_Transverse_Mercator\", \"Fast Transverse Mercator\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r - 1 / r) / 2;\n  return r;\n}","export default function(x, y) {\n  x = Math.abs(x);\n  y = Math.abs(y);\n  var a = Math.max(x, y);\n  var b = Math.min(x, y) / (a ? a : 1);\n\n  return a * Math.sqrt(1 + Math.pow(b, 2));\n}\n","import hypot from './hypot';\nimport log1py from './log1py';\n\nexport default function(x) {\n  var y = Math.abs(x);\n  y = log1py(y * (1 + y / (hypot(1, y) + 1)));\n\n  return x < 0 ? -y : y;\n}\n","export default function(x) {\n  var y = 1 + x;\n  var z = y - 1;\n\n  return z === 0 ? x : x * Math.log(y) / z;\n}\n","export default function(pp, B) {\n  var cos_2B = 2 * Math.cos(2 * B);\n  var i = pp.length - 1;\n  var h1 = pp[i];\n  var h2 = 0;\n  var h;\n\n  while (--i >= 0) {\n    h = -h2 + cos_2B * h1 + pp[i];\n    h2 = h1;\n    h1 = h;\n  }\n\n  return (B + h * Math.sin(2 * B));\n}\n","import sinh from './sinh';\nimport cosh from './cosh';\n\nexport default function(pp, arg_r, arg_i) {\n  var sin_arg_r = Math.sin(arg_r);\n  var cos_arg_r = Math.cos(arg_r);\n  var sinh_arg_i = sinh(arg_i);\n  var cosh_arg_i = cosh(arg_i);\n  var r = 2 * cos_arg_r * cosh_arg_i;\n  var i = -2 * sin_arg_r * sinh_arg_i;\n  var j = pp.length - 1;\n  var hr = pp[j];\n  var hi1 = 0;\n  var hr1 = 0;\n  var hi = 0;\n  var hr2;\n  var hi2;\n\n  while (--j >= 0) {\n    hr2 = hr1;\n    hi2 = hi1;\n    hr1 = hr;\n    hi1 = hi;\n    hr = -hr2 + r * hr1 - i * hi1 + pp[j];\n    hi = -hi2 + i * hr1 + r * hi1;\n  }\n\n  r = sin_arg_r * cosh_arg_i;\n  i = cos_arg_r * sinh_arg_i;\n\n  return [r * hr - i * hi, r * hi + i * hr];\n}\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r + 1 / r) / 2;\n  return r;\n}","// Heavily based on this etmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\n\nimport tmerc from '../projections/tmerc';\nimport sinh from '../common/sinh';\nimport hypot from '../common/hypot';\nimport asinhy from '../common/asinhy';\nimport gatg from '../common/gatg';\nimport clens from '../common/clens';\nimport clens_cmplx from '../common/clens_cmplx';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  if (!this.approx && (isNaN(this.es) || this.es <= 0)) {\n    throw new Error('Incorrect elliptical usage. Try using the +approx option in the proj string, or PROJECTION[\"Fast_Transverse_Mercator\"] in the WKT.');\n  }\n  if (this.approx) {\n    // When '+approx' is set, use tmerc instead\n    tmerc.init.apply(this);\n    this.forward = tmerc.forward;\n    this.inverse = tmerc.inverse;\n  }\n\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  this.cgb = [];\n  this.cbg = [];\n  this.utg = [];\n  this.gtu = [];\n\n  var f = this.es / (1 + Math.sqrt(1 - this.es));\n  var n = f / (2 - f);\n  var np = n;\n\n  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\n  this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\n\n  np = np * n;\n  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\n  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\n\n  np = np * n;\n  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\n  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\n\n  np = np * n;\n  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\n  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\n\n  np = np * n;\n  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\n  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\n\n  np = np * n;\n  this.cgb[5] = np * (601676 / 22275);\n  this.cbg[5] = np * (444337 / 155925);\n\n  np = Math.pow(n, 2);\n  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\n\n  this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\n  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\n\n  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\n  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\n\n  np = np * n;\n  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\n  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\n\n  np = np * n;\n  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\n  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\n\n  np = np * n;\n  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\n  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\n\n  np = np * n;\n  this.utg[5] = np * (-20648693 / 638668800);\n  this.gtu[5] = np * (212378941 / 319334400);\n\n  var Z = gatg(this.cbg, this.lat0);\n  this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\n}\n\nexport function forward(p) {\n  var Ce = adjust_lon(p.x - this.long0);\n  var Cn = p.y;\n\n  Cn = gatg(this.cbg, Cn);\n  var sin_Cn = Math.sin(Cn);\n  var cos_Cn = Math.cos(Cn);\n  var sin_Ce = Math.sin(Ce);\n  var cos_Ce = Math.cos(Ce);\n\n  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\n  Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\n  Ce = asinhy(Math.tan(Ce));\n\n  var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\n\n  Cn = Cn + tmp[0];\n  Ce = Ce + tmp[1];\n\n  var x;\n  var y;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    x = this.a * (this.Qn * Ce) + this.x0;\n    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\n  }\n  else {\n    x = Infinity;\n    y = Infinity;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\nexport function inverse(p) {\n  var Ce = (p.x - this.x0) * (1 / this.a);\n  var Cn = (p.y - this.y0) * (1 / this.a);\n\n  Cn = (Cn - this.Zb) / this.Qn;\n  Ce = Ce / this.Qn;\n\n  var lon;\n  var lat;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\n\n    Cn = Cn + tmp[0];\n    Ce = Ce + tmp[1];\n    Ce = Math.atan(sinh(Ce));\n\n    var sin_Cn = Math.sin(Cn);\n    var cos_Cn = Math.cos(Cn);\n    var sin_Ce = Math.sin(Ce);\n    var cos_Ce = Math.cos(Ce);\n\n    Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\n    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\n\n    lon = adjust_lon(Ce + this.long0);\n    lat = gatg(this.cgb, Cn);\n  }\n  else {\n    lon = Infinity;\n    lat = Infinity;\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\", \"Transverse_Mercator\", \"Transverse Mercator\", \"Gauss Kruger\", \"Gauss_Kruger\", \"tmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(pp, arg_r) {\n  var r = 2 * Math.cos(arg_r);\n  var i = pp.length - 1;\n  var hr1 = pp[i];\n  var hr2 = 0;\n  var hr;\n\n  while (--i >= 0) {\n    hr = -hr2 + r * hr1 + pp[i];\n    hr2 = hr1;\n    hr1 = hr;\n  }\n\n  return Math.sin(arg_r) * hr;\n}\n","import adjust_zone from '../common/adjust_zone';\nimport etmerc from './etmerc';\nexport var dependsOn = 'etmerc';\nimport {D2R} from '../constants/values';\n\n\nexport function init() {\n  var zone = adjust_zone(this.zone, this.long0);\n  if (zone === undefined) {\n    throw new Error('unknown utm zone');\n  }\n  this.lat0 = 0;\n  this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\n  this.x0 = 500000;\n  this.y0 = this.utmSouth ? 10000000 : 0;\n  this.k0 = 0.9996;\n\n  etmerc.init.apply(this);\n  this.forward = etmerc.forward;\n  this.inverse = etmerc.inverse;\n}\n\nexport var names = [\"Universal Transverse Mercator System\", \"utm\"];\nexport default {\n  init: init,\n  names: names,\n  dependsOn: dependsOn\n};\n","import adjust_lon from './adjust_lon';\n\nexport default function(zone, lon) {\n  if (zone === undefined) {\n    zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\n\n    if (zone < 0) {\n      return 0;\n    } else if (zone > 60) {\n      return 60;\n    }\n  }\n  return zone;\n}\n","export default function(esinp, exp) {\n  return (Math.pow((1 - esinp) / (1 + esinp), exp));\n}","import srat from '../common/srat';\nvar MAX_ITER = 20;\nimport {HALF_PI, FORTPI} from '../constants/values';\n\nexport function init() {\n  var sphi = Math.sin(this.lat0);\n  var cphi = Math.cos(this.lat0);\n  cphi *= cphi;\n  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n  this.phic0 = Math.asin(sphi / this.C);\n  this.ratexp = 0.5 * this.C * this.e;\n  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n  p.x = this.C * lon;\n  return p;\n}\n\nexport function inverse(p) {\n  var DEL_TOL = 1e-14;\n  var lon = p.x / this.C;\n  var lat = p.y;\n  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n  for (var i = MAX_ITER; i > 0; --i) {\n    lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\n    if (Math.abs(lat - p.y) < DEL_TOL) {\n      break;\n    }\n    p.y = lat;\n  }\n  /* convergence failed */\n  if (!i) {\n    return null;\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gauss\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import gauss from './gauss';\nimport adjust_lon from '../common/adjust_lon';\nimport hypot from '../common/hypot';\n\nexport function init() {\n  gauss.init.apply(this);\n  if (!this.rc) {\n    return;\n  }\n  this.sinc0 = Math.sin(this.phic0);\n  this.cosc0 = Math.cos(this.phic0);\n  this.R2 = 2 * this.rc;\n  if (!this.title) {\n    this.title = \"Oblique Stereographic Alternative\";\n  }\n}\n\nexport function forward(p) {\n  var sinc, cosc, cosl, k;\n  p.x = adjust_lon(p.x - this.long0);\n  gauss.forward.apply(this, [p]);\n  sinc = Math.sin(p.y);\n  cosc = Math.cos(p.y);\n  cosl = Math.cos(p.x);\n  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n  p.x = k * cosc * Math.sin(p.x);\n  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  var sinc, cosc, lon, lat, rho;\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n  if ((rho = hypot(p.x, p.y))) {\n    var c = 2 * Math.atan2(rho, this.R2);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  gauss.inverse.apply(this, [p]);\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {EPSLN, HALF_PI} from '../constants/values';\n\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n}\n\nexport function init() {\n\n  // setting default parameters\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      }\n      else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN && Math.abs(Math.cos(this.lat_ts)) > EPSLN) {\n      // When k0 is 1 (default value) and lat_ts is a vaild number and lat0 is at a pole and lat_ts is not at a pole\n      // Recalculate k0 using formula 21-35 from p161 of Snyder, 1987\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  }\n  else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    }\n    else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    }\n    else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    }\n    else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n    }\n    else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      }\n      else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n\n}\n\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\", \"Polar_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};\n","/*\n  references:\n    Formules et constantes pour le Calcul pour la\n    projection cylindrique conforme à axe oblique et pour la transformation entre\n    des systèmes de référence.\n    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n  */\n\nexport function init() {\n  var phy0 = this.lat0;\n  this.lambda0 = this.long0;\n  var sinPhy0 = Math.sin(phy0);\n  var semiMajorAxis = this.a;\n  var invF = this.rf;\n  var flattening = 1 / invF;\n  var e2 = 2 * flattening - Math.pow(flattening, 2);\n  var e = this.e = Math.sqrt(e2);\n  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n  this.b0 = Math.asin(sinPhy0 / this.alpha);\n  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n}\n\nexport function forward(p) {\n  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n  var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n  // spheric latitude\n  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n  // spheric longitude\n  var I = this.alpha * (p.x - this.lambda0);\n\n  // psoeudo equatorial rotation\n  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n  p.x = this.R * rotI + this.x0;\n  return p;\n}\n\nexport function inverse(p) {\n  var Y = p.x - this.x0;\n  var X = p.y - this.y0;\n\n  var rotI = Y / this.R;\n  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n  var lambda = this.lambda0 + I / this.alpha;\n\n  var S = 0;\n  var phy = b;\n  var prevPhy = -1000;\n  var iteration = 0;\n  while (Math.abs(phy - prevPhy) > 0.0000001) {\n    if (++iteration > 20) {\n      //...reportError(\"omercFwdInfinity\");\n      return;\n    }\n    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n    prevPhy = phy;\n    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n  }\n\n  p.x = lambda;\n  p.y = phy;\n  return p;\n}\n\nexport var names = [\"somerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import tsfnz from '../common/tsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport { D2R, EPSLN, HALF_PI, TWO_PI, FORTPI } from '../constants/values';\n\nvar TOL = 1e-7;\n\nfunction isTypeA(P) {\n  var typeAProjections = ['Hotine_Oblique_Mercator','Hotine_Oblique_Mercator_Azimuth_Natural_Origin'];\n  var projectionName = typeof P.PROJECTION === \"object\" ? Object.keys(P.PROJECTION)[0] : P.PROJECTION;\n  \n  return 'no_uoff' in P || 'no_off' in P || typeAProjections.indexOf(projectionName) !== -1;\n}\n\n\n/* Initialize the Oblique Mercator  projection\n    ------------------------------------------*/\nexport function init() {  \n  var con, com, cosph0, D, F, H, L, sinph0, p, J, gamma = 0,\n    gamma0, lamc = 0, lam1 = 0, lam2 = 0, phi1 = 0, phi2 = 0, alpha_c = 0, AB;\n  \n  // only Type A uses the no_off or no_uoff property\n  // https://github.com/OSGeo/proj.4/issues/104\n  this.no_off = isTypeA(this);\n  this.no_rot = 'no_rot' in this;\n  \n  var alp = false;\n  if (\"alpha\" in this) {\n    alp = true;\n  }\n\n  var gam = false;\n  if (\"rectified_grid_angle\" in this) {\n    gam = true;\n  }\n\n  if (alp) {\n    alpha_c = this.alpha;\n  }\n  \n  if (gam) {\n    gamma = (this.rectified_grid_angle * D2R);\n  }\n  \n  if (alp || gam) {\n    lamc = this.longc;\n  } else {\n    lam1 = this.long1;\n    phi1 = this.lat1;\n    lam2 = this.long2;\n    phi2 = this.lat2;\n    \n    if (Math.abs(phi1 - phi2) <= TOL || (con = Math.abs(phi1)) <= TOL ||\n        Math.abs(con - HALF_PI) <= TOL || Math.abs(Math.abs(this.lat0) - HALF_PI) <= TOL ||\n        Math.abs(Math.abs(phi2) - HALF_PI) <= TOL) {\n      throw new Error();\n    }\n  }\n  \n  var one_es = 1.0 - this.es;\n  com = Math.sqrt(one_es);\n  \n  if (Math.abs(this.lat0) > EPSLN) {\n    sinph0 = Math.sin(this.lat0);\n    cosph0 = Math.cos(this.lat0);\n    con = 1 - this.es * sinph0 * sinph0;\n    this.B = cosph0 * cosph0;\n    this.B = Math.sqrt(1 + this.es * this.B * this.B / one_es);\n    this.A = this.B * this.k0 * com / con;\n    D = this.B * com / (cosph0 * Math.sqrt(con));\n    F = D * D -1;\n    \n    if (F <= 0) {\n      F = 0;\n    } else {\n      F = Math.sqrt(F);\n      if (this.lat0 < 0) {\n        F = -F;\n      }\n    }\n    \n    this.E = F += D;\n    this.E *= Math.pow(tsfnz(this.e, this.lat0, sinph0), this.B);\n  } else {\n    this.B = 1 / com;\n    this.A = this.k0;\n    this.E = D = F = 1;\n  }\n  \n  if (alp || gam) {\n    if (alp) {\n      gamma0 = Math.asin(Math.sin(alpha_c) / D);\n      if (!gam) {\n        gamma = alpha_c;\n      }\n    } else {\n      gamma0 = gamma;\n      alpha_c = Math.asin(D * Math.sin(gamma0));\n    }\n    this.lam0 = lamc - Math.asin(0.5 * (F - 1 / F) * Math.tan(gamma0)) / this.B;\n  } else {\n    H = Math.pow(tsfnz(this.e, phi1, Math.sin(phi1)), this.B);\n    L = Math.pow(tsfnz(this.e, phi2, Math.sin(phi2)), this.B);\n    F = this.E / H;\n    p = (L - H) / (L + H);\n    J = this.E * this.E;\n    J = (J - L * H) / (J + L * H);\n    con = lam1 - lam2;\n    \n    if (con < -Math.pi) {\n      lam2 -=TWO_PI;\n    } else if (con > Math.pi) {\n      lam2 += TWO_PI;\n    }\n    \n    this.lam0 = adjust_lon(0.5 * (lam1 + lam2) - Math.atan(J * Math.tan(0.5 * this.B * (lam1 - lam2)) / p) / this.B);\n    gamma0 = Math.atan(2 * Math.sin(this.B * adjust_lon(lam1 - this.lam0)) / (F - 1 / F));\n    gamma = alpha_c = Math.asin(D * Math.sin(gamma0));\n  }\n  \n  this.singam = Math.sin(gamma0);\n  this.cosgam = Math.cos(gamma0);\n  this.sinrot = Math.sin(gamma);\n  this.cosrot = Math.cos(gamma);\n  \n  this.rB = 1 / this.B;\n  this.ArB = this.A * this.rB;\n  this.BrA = 1 / this.ArB;\n  AB = this.A * this.B;\n  \n  if (this.no_off) {\n    this.u_0 = 0;\n  } else {\n    this.u_0 = Math.abs(this.ArB * Math.atan(Math.sqrt(D * D - 1) / Math.cos(alpha_c)));\n    \n    if (this.lat0 < 0) {\n      this.u_0 = - this.u_0;\n    }  \n  }\n    \n  F = 0.5 * gamma0;\n  this.v_pole_n = this.ArB * Math.log(Math.tan(FORTPI - F));\n  this.v_pole_s = this.ArB * Math.log(Math.tan(FORTPI + F));\n}\n\n\n/* Oblique Mercator forward equations--mapping lat,long to x,y\n    ----------------------------------------------------------*/\nexport function forward(p) {\n  var coords = {};\n  var S, T, U, V, W, temp, u, v;\n  p.x = p.x - this.lam0;\n  \n  if (Math.abs(Math.abs(p.y) - HALF_PI) > EPSLN) {\n    W = this.E / Math.pow(tsfnz(this.e, p.y, Math.sin(p.y)), this.B);\n    \n    temp = 1 / W;\n    S = 0.5 * (W - temp);\n    T = 0.5 * (W + temp);\n    V = Math.sin(this.B * p.x);\n    U = (S * this.singam - V * this.cosgam) / T;\n        \n    if (Math.abs(Math.abs(U) - 1.0) < EPSLN) {\n      throw new Error();\n    }\n    \n    v = 0.5 * this.ArB * Math.log((1 - U)/(1 + U));\n    temp = Math.cos(this.B * p.x);\n    \n    if (Math.abs(temp) < TOL) {\n      u = this.A * p.x;\n    } else {\n      u = this.ArB * Math.atan2((S * this.cosgam + V * this.singam), temp);\n    }    \n  } else {\n    v = p.y > 0 ? this.v_pole_n : this.v_pole_s;\n    u = this.ArB * p.y;\n  }\n     \n  if (this.no_rot) {\n    coords.x = u;\n    coords.y = v;\n  } else {\n    u -= this.u_0;\n    coords.x = v * this.cosrot + u * this.sinrot;\n    coords.y = u * this.cosrot - v * this.sinrot;\n  }\n  \n  coords.x = (this.a * coords.x + this.x0);\n  coords.y = (this.a * coords.y + this.y0);\n  \n  return coords;\n}\n\nexport function inverse(p) {\n  var u, v, Qp, Sp, Tp, Vp, Up;\n  var coords = {};\n  \n  p.x = (p.x - this.x0) * (1.0 / this.a);\n  p.y = (p.y - this.y0) * (1.0 / this.a);\n\n  if (this.no_rot) {\n    v = p.y;\n    u = p.x;\n  } else {\n    v = p.x * this.cosrot - p.y * this.sinrot;\n    u = p.y * this.cosrot + p.x * this.sinrot + this.u_0;\n  }\n  \n  Qp = Math.exp(-this.BrA * v);\n  Sp = 0.5 * (Qp - 1 / Qp);\n  Tp = 0.5 * (Qp + 1 / Qp);\n  Vp = Math.sin(this.BrA * u);\n  Up = (Vp * this.cosgam + Sp * this.singam) / Tp;\n  \n  if (Math.abs(Math.abs(Up) - 1) < EPSLN) {\n    coords.x = 0;\n    coords.y = Up < 0 ? -HALF_PI : HALF_PI;\n  } else {\n    coords.y = this.E / Math.sqrt((1 + Up) / (1 - Up));\n    coords.y = phi2z(this.e, Math.pow(coords.y, 1 / this.B));\n    \n    if (coords.y === Infinity) {\n      throw new Error();\n    }\n        \n    coords.x = -this.rB * Math.atan2((Sp * this.cosgam - Vp * this.singam), Math.cos(this.BrA * u));\n  }\n  \n  coords.x += this.lam0;\n  \n  return coords;\n}\n\nexport var names = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Two_Point_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"Oblique_Mercator\", \"omerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport sign from '../common/sign';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {HALF_PI, EPSLN} from '../constants/values';\nexport function init() {\n  \n  //double lat0;                    /* the reference latitude               */\n  //double long0;                   /* the reference longitude              */\n  //double lat1;                    /* first standard parallel              */\n  //double lat2;                    /* second standard parallel             */\n  //double r_maj;                   /* major axis                           */\n  //double r_min;                   /* minor axis                           */\n  //double false_east;              /* x offset in meters                   */\n  //double false_north;             /* y offset in meters                   */\n  \n  //the above value can be set with proj4.defs\n  //example: proj4.defs(\"EPSG:2154\",\"+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\");\n\n  if (!this.lat2) {\n    this.lat2 = this.lat1;\n  } //if lat2 is not defined\n  if (!this.k0) {\n    this.k0 = 1;\n  }\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  var temp = this.b / this.a;\n  this.e = Math.sqrt(1 - temp * temp);\n\n  var sin1 = Math.sin(this.lat1);\n  var cos1 = Math.cos(this.lat1);\n  var ms1 = msfnz(this.e, sin1, cos1);\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n  var sin2 = Math.sin(this.lat2);\n  var cos2 = Math.cos(this.lat2);\n  var ms2 = msfnz(this.e, sin2, cos2);\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n  }\n  else {\n    this.ns = sin1;\n  }\n  if (isNaN(this.ns)) {\n    this.ns = sin1;\n  }\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n  if (!this.title) {\n    this.title = \"Lambert Conformal Conic\";\n  }\n}\n\n// Lambert Conformal conic forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  // singular cases :\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n  }\n\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\n  var ts, rh1;\n  if (con > EPSLN) {\n    ts = tsfnz(this.e, lat, Math.sin(lat));\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n  }\n  else {\n    con = lat * this.ns;\n    if (con <= 0) {\n      return null;\n    }\n    rh1 = 0;\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n  return p;\n}\n\n// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var rh1, con, ts;\n  var lat, lon;\n  var x = (p.x - this.x0) / this.k0;\n  var y = (this.rh - (p.y - this.y0) / this.k0);\n  if (this.ns > 0) {\n    rh1 = Math.sqrt(x * x + y * y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(x * x + y * y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2((con * x), (con * y));\n  }\n  if ((rh1 !== 0) || (this.ns > 0)) {\n    con = 1 / this.ns;\n    ts = Math.pow((rh1 / (this.a * this.f0)), con);\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  else {\n    lat = -HALF_PI;\n  }\n  lon = adjust_lon(theta / this.ns + this.long0);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\n  \"Lambert Tangential Conformal Conic Projection\",\n  \"Lambert_Conformal_Conic\",\n  \"Lambert_Conformal_Conic_1SP\",\n  \"Lambert_Conformal_Conic_2SP\",\n  \"lcc\",\n  \"Lambert Conic Conformal (1SP)\",\n  \"Lambert Conic Conformal (2SP)\"\n];\n\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  this.a = 6377397.155;\n  this.es = 0.006674372230614;\n  this.e = Math.sqrt(this.es);\n  if (!this.lat0) {\n    this.lat0 = 0.863937979737193;\n  }\n  if (!this.long0) {\n    this.long0 = 0.7417649320975901 - 0.308341501185665;\n  }\n  /* if scale not set default to 0.9999 */\n  if (!this.k0) {\n    this.k0 = 0.9999;\n  }\n  this.s45 = 0.785398163397448; /* 45 */\n  this.s90 = 2 * this.s45;\n  this.fi0 = this.lat0;\n  this.e2 = this.es;\n  this.e = Math.sqrt(this.e2);\n  this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\n  this.uq = 1.04216856380474;\n  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n  this.k1 = this.k0;\n  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n  this.s0 = 1.37008346281555;\n  this.n = Math.sin(this.s0);\n  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n  this.ad = this.s90 - this.uq;\n}\n\n/* ellipsoid */\n/* calculate xy from lat/lon */\n/* Constants, identical to inverse transform function */\nexport function forward(p) {\n  var gfi, u, deltav, s, d, eps, ro;\n  var lon = p.x;\n  var lat = p.y;\n  var delta_lon = adjust_lon(lon - this.long0);\n  /* Transformation */\n  gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\n  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n  deltav = -delta_lon * this.alfa;\n  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n  eps = this.n * d;\n  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n  p.y = ro * Math.cos(eps) / 1;\n  p.x = ro * Math.sin(eps) / 1;\n\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  return (p);\n}\n\n/* calculate lat/lon from xy */\nexport function inverse(p) {\n  var u, deltav, s, d, eps, ro, fi1;\n  var ok;\n\n  /* Transformation */\n  /* revert y, x*/\n  var tmp = p.x;\n  p.x = p.y;\n  p.y = tmp;\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  ro = Math.sqrt(p.x * p.x + p.y * p.y);\n  eps = Math.atan2(p.y, p.x);\n  d = eps / Math.sin(this.s0);\n  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n  p.x = this.long0 - deltav / this.alfa;\n  fi1 = u;\n  ok = 0;\n  var iter = 0;\n  do {\n    p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n    if (Math.abs(fi1 - p.y) < 0.0000000001) {\n      ok = 1;\n    }\n    fi1 = p.y;\n    iter += 1;\n  } while (ok === 0 && iter < 15);\n  if (iter >= 15) {\n    return null;\n  }\n\n  return (p);\n}\n\nexport var names = [\"Krovak\", \"krovak\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(e0, e1, e2, e3, phi) {\n  return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\n}","export default function(x) {\n  return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\n}","export default function(x) {\n  return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\n}","export default function(x) {\n  return (0.05859375 * x * x * (1 + 0.75 * x));\n}","export default function(x) {\n  return (x * x * x * (35 / 3072));\n}","export default function(a, e, sinphi) {\n  var temp = e * sinphi;\n  return a / Math.sqrt(1 - temp * temp);\n}","import {HALF_PI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\n}\n","export default function(ml, e0, e1, e2, e3) {\n  var phi;\n  var dphi;\n\n  phi = ml / e0;\n  for (var i = 0; i < 15; i++) {\n    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n  return NaN;\n}","import mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nexport function init() {\n  if (!this.sphere) {\n    this.e0 = e0fn(this.es);\n    this.e1 = e1fn(this.es);\n    this.e2 = e2fn(this.es);\n    this.e3 = e3fn(this.es);\n    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  }\n}\n\n/* Cassini forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y;\n  var lam = p.x;\n  var phi = p.y;\n  lam = adjust_lon(lam - this.long0);\n\n  if (this.sphere) {\n    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n  }\n  else {\n    //ellipsoid\n    var sinphi = Math.sin(phi);\n    var cosphi = Math.cos(phi);\n    var nl = gN(this.a, this.e, sinphi);\n    var tl = Math.tan(phi) * Math.tan(phi);\n    var al = lam * Math.cos(phi);\n    var asq = al * al;\n    var cl = this.es * cosphi * cosphi / (1 - this.es);\n    var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\n    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n\n\n  }\n\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var phi, lam;\n\n  if (this.sphere) {\n    var dd = y + this.lat0;\n    phi = Math.asin(Math.sin(dd) * Math.cos(x));\n    lam = Math.atan2(Math.tan(x), Math.cos(dd));\n  }\n  else {\n    /* ellipsoid */\n    var ml1 = this.ml0 / this.a + y;\n    var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n      p.x = this.long0;\n      p.y = HALF_PI;\n      if (y < 0) {\n        p.y *= -1;\n      }\n      return p;\n    }\n    var nl1 = gN(this.a, this.e, Math.sin(phi1));\n\n    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n    var tl1 = Math.pow(Math.tan(phi1), 2);\n    var dl = x * this.a / nl1;\n    var dsq = dl * dl;\n    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n\n  }\n\n  p.x = adjust_lon(lam + this.long0);\n  p.y = adjust_lat(phi);\n  return p;\n\n}\n\nexport var names = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(eccent, sinphi) {\n  var con;\n  if (eccent > 1.0e-7) {\n    con = eccent * sinphi;\n    return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\n  }\n  else {\n    return (2 * sinphi);\n  }\n}","\nimport {HALF_PI, EPSLN, FORTPI} from '../constants/values';\n\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\nexport var S_POLE = 1;\n\nexport var N_POLE = 2;\nexport var EQUIT = 3;\nexport var OBLIQ = 4;\n\n/* Initialize the Lambert Azimuthal Equal Area projection\n  ------------------------------------------------------*/\nexport function init() {\n  var t = Math.abs(this.lat0);\n  if (Math.abs(t - HALF_PI) < EPSLN) {\n    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n  }\n  else if (Math.abs(t) < EPSLN) {\n    this.mode = this.EQUIT;\n  }\n  else {\n    this.mode = this.OBLIQ;\n  }\n  if (this.es > 0) {\n    var sinphi;\n\n    this.qp = qsfnz(this.e, 1);\n    this.mmf = 0.5 / (1 - this.es);\n    this.apa = authset(this.es);\n    switch (this.mode) {\n    case this.N_POLE:\n      this.dd = 1;\n      break;\n    case this.S_POLE:\n      this.dd = 1;\n      break;\n    case this.EQUIT:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      this.dd = 1 / this.rq;\n      this.xmf = 1;\n      this.ymf = 0.5 * this.qp;\n      break;\n    case this.OBLIQ:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      sinphi = Math.sin(this.lat0);\n      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n      this.ymf = (this.xmf = this.rq) / this.dd;\n      this.xmf *= this.dd;\n      break;\n    }\n  }\n  else {\n    if (this.mode === this.OBLIQ) {\n      this.sinph0 = Math.sin(this.lat0);\n      this.cosph0 = Math.cos(this.lat0);\n    }\n  }\n}\n\n/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n  var lam = p.x;\n  var phi = p.y;\n\n  lam = adjust_lon(lam - this.long0);\n  if (this.sphere) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    coslam = Math.cos(lam);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      if (y <= EPSLN) {\n        return null;\n      }\n      y = Math.sqrt(2 / y);\n      x = y * cosphi * Math.sin(lam);\n      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        coslam = -coslam;\n      }\n      if (Math.abs(phi + this.lat0) < EPSLN) {\n        return null;\n      }\n      y = FORTPI - phi * 0.5;\n      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n      x = y * Math.sin(lam);\n      y *= coslam;\n    }\n  }\n  else {\n    sinb = 0;\n    cosb = 0;\n    b = 0;\n    coslam = Math.cos(lam);\n    sinlam = Math.sin(lam);\n    sinphi = Math.sin(phi);\n    q = qsfnz(this.e, sinphi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinb = q / this.qp;\n      cosb = Math.sqrt(1 - sinb * sinb);\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n      break;\n    case this.EQUIT:\n      b = 1 + cosb * coslam;\n      break;\n    case this.N_POLE:\n      b = HALF_PI + phi;\n      q = this.qp - q;\n      break;\n    case this.S_POLE:\n      b = phi - HALF_PI;\n      q = this.qp + q;\n      break;\n    }\n    if (Math.abs(b) < EPSLN) {\n      return null;\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n    case this.EQUIT:\n      b = Math.sqrt(2 / b);\n      if (this.mode === this.OBLIQ) {\n        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n      }\n      else {\n        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n      }\n      x = this.xmf * b * cosb * sinlam;\n      break;\n    case this.N_POLE:\n    case this.S_POLE:\n      if (q >= 0) {\n        x = (b = Math.sqrt(q)) * sinlam;\n        y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n      }\n      else {\n        x = y = 0;\n      }\n      break;\n    }\n  }\n\n  p.x = this.a * x + this.x0;\n  p.y = this.a * y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var lam, phi, cCe, sCe, q, rho, ab;\n  if (this.sphere) {\n    var cosz = 0,\n      rh, sinz = 0;\n\n    rh = Math.sqrt(x * x + y * y);\n    phi = rh * 0.5;\n    if (phi > 1) {\n      return null;\n    }\n    phi = 2 * Math.asin(phi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinz = Math.sin(phi);\n      cosz = Math.cos(phi);\n    }\n    switch (this.mode) {\n    case this.EQUIT:\n      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n      x *= sinz;\n      y = cosz * rh;\n      break;\n    case this.OBLIQ:\n      phi = (Math.abs(rh) <= EPSLN) ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n      x *= sinz * this.cosph0;\n      y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n      break;\n    case this.N_POLE:\n      y = -y;\n      phi = HALF_PI - phi;\n      break;\n    case this.S_POLE:\n      phi -= HALF_PI;\n      break;\n    }\n    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n  }\n  else {\n    ab = 0;\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      x /= this.dd;\n      y *= this.dd;\n      rho = Math.sqrt(x * x + y * y);\n      if (rho < EPSLN) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      sCe = 2 * Math.asin(0.5 * rho / this.rq);\n      cCe = Math.cos(sCe);\n      x *= (sCe = Math.sin(sCe));\n      if (this.mode === this.OBLIQ) {\n        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n        q = this.qp * ab;\n        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n      }\n      else {\n        ab = y * sCe / rho;\n        q = this.qp * ab;\n        y = rho * cCe;\n      }\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        y = -y;\n      }\n      q = (x * x + y * y);\n      if (!q) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      ab = 1 - q / this.qp;\n      if (this.mode === this.S_POLE) {\n        ab = -ab;\n      }\n    }\n    lam = Math.atan2(x, y);\n    phi = authlat(Math.asin(ab), this.apa);\n  }\n\n  p.x = adjust_lon(this.long0 + lam);\n  p.y = phi;\n  return p;\n}\n\n/* determine latitude from authalic latitude */\nvar P00 = 0.33333333333333333333;\n\nvar P01 = 0.17222222222222222222;\nvar P02 = 0.10257936507936507936;\nvar P10 = 0.06388888888888888888;\nvar P11 = 0.06640211640211640211;\nvar P20 = 0.01641501294219154443;\n\nfunction authset(es) {\n  var t;\n  var APA = [];\n  APA[0] = es * P00;\n  t = es * es;\n  APA[0] += t * P01;\n  APA[1] = t * P10;\n  t *= es;\n  APA[0] += t * P02;\n  APA[1] += t * P11;\n  APA[2] = t * P20;\n  return APA;\n}\n\nfunction authlat(beta, APA) {\n  var t = beta + beta;\n  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n}\n\nexport var names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  S_POLE: S_POLE,\n  N_POLE: N_POLE,\n  EQUIT: EQUIT,\n  OBLIQ: OBLIQ\n};\n","export default function(x) {\n  if (Math.abs(x) > 1) {\n    x = (x > 1) ? 1 : -1;\n  }\n  return Math.asin(x);\n}","import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po);\n\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po);\n\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po);\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  }\n  else {\n    this.ns0 = this.con;\n  }\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n\n  var qs = qsfnz(this.e3, this.sin_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n  con = rh1 * this.ns0 / this.a;\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  }\n  else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n  if (eccent < EPSLN) {\n    return phi;\n  }\n\n  var eccnts = eccent * eccent;\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n  return null;\n}\n\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\n/*\n  reference:\n    Wolfram Mathworld \"Gnomonic Projection\"\n    http://mathworld.wolfram.com/GnomonicProjection.html\n    Accessed: 12th November 2009\n  */\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n  // Approximation for projecting points to the horizon (infinity)\n  this.infinity_dist = 1000 * this.a;\n  this.rc = 1;\n}\n\n/* Gnomonic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g;\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n  }\n  else {\n\n    // Point is in the opposing hemisphere and is unprojectable\n    // We still need to return a reasonable point, so we project\n    // to infinity, on a bearing\n    // equivalent to the northern hemisphere equivalent\n    // This is a reasonable approximation for short shapes and lines that\n    // straddle the horizon.\n\n    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* Rho */\n  var sinc, cosc;\n  var c;\n  var lon, lat;\n\n  /* Inverse equations\n      -----------------*/\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n\n  if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    c = Math.atan2(rh, this.rc);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n\n    lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\n    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n    lon = adjust_lon(this.long0 + lon);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gnom\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport qsfnz from '../common/qsfnz';\nimport msfnz from '../common/msfnz';\nimport iqsfnz from '../common/iqsfnz';\n\n/*\n  reference:\n    \"Cartographic Projection Procedures for the UNIX Environment-\n    A User's Manual\" by Gerald I. Evenden,\n    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n*/\nexport function init() {\n  //no-op\n  if (!this.sphere) {\n    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n  }\n}\n\n/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  if (this.sphere) {\n    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n  }\n  else {\n    var qs = qsfnz(this.e, Math.sin(lat));\n    x = this.x0 + this.a * this.k0 * dlon;\n    y = this.y0 + this.a * qs * 0.5 / this.k0;\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n  }\n  else {\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"cea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, q) {\n  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n  if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n    if (q < 0) {\n      return (-1 * HALF_PI);\n    }\n    else {\n      return HALF_PI;\n    }\n  }\n  //var phi = 0.5* q/(1-eccent*eccent);\n  var phi = Math.asin(0.5 * q);\n  var dphi;\n  var sin_phi;\n  var cos_phi;\n  var con;\n  for (var i = 0; i < 30; i++) {\n    sin_phi = Math.sin(phi);\n    cos_phi = Math.cos(phi);\n    con = eccent * sin_phi;\n    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n  return NaN;\n}\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n\n  this.rc = Math.cos(this.lat_ts);\n}\n\n// forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  var dlon = adjust_lon(lon - this.long0);\n  var dlat = adjust_lat(lat - this.lat0);\n  p.x = this.x0 + (this.a * dlon * this.rc);\n  p.y = this.y0 + (this.a * dlat);\n  return p;\n}\n\n// inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var x = p.x;\n  var y = p.y;\n\n  p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\n  p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\n  return p;\n}\n\nexport var names = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport mlfn from '../common/mlfn';\nimport {EPSLN} from '../constants/values';\n\nimport gN from '../common/gN';\nvar MAX_ITER = 20;\n\nexport function init() {\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n}\n\n/* Polyconic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y, el;\n  var dlon = adjust_lon(lon - this.long0);\n  el = dlon * Math.sin(lat);\n  if (this.sphere) {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.a * this.lat0;\n    }\n    else {\n      x = this.a * Math.sin(el) / Math.tan(lat);\n      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n    }\n  }\n  else {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.ml0;\n    }\n    else {\n      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n      x = nl * Math.sin(el);\n      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n    }\n\n  }\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  var lon, lat, x, y, i;\n  var al, bl;\n  var phi, dphi;\n  x = p.x - this.x0;\n  y = p.y - this.y0;\n\n  if (this.sphere) {\n    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n      lon = adjust_lon(x / this.a + this.long0);\n      lat = 0;\n    }\n    else {\n      al = this.lat0 + y / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var tanphi;\n      for (i = MAX_ITER; i; --i) {\n        tanphi = Math.tan(phi);\n        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n        phi += dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n    }\n  }\n  else {\n    if (Math.abs(y + this.ml0) <= EPSLN) {\n      lat = 0;\n      lon = adjust_lon(this.long0 + x / this.a);\n    }\n    else {\n\n      al = (this.ml0 + y) / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var cl, mln, mlnp, ma;\n      var con;\n      for (i = MAX_ITER; i; --i) {\n        con = this.e * Math.sin(phi);\n        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n        ma = mln / this.a;\n        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n        phi -= dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n\n      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Polyconic\", \"poly\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {SEC_TO_RAD} from '../constants/values';\n\n/*\n  reference\n    Department of Land and Survey Technical Circular 1973/32\n      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n    OSG Technical Report 4.1\n      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n  */\n\n/**\n * iterations: Number of iterations to refine inverse transform.\n *     0 -> km accuracy\n *     1 -> m accuracy -- suitable for most mapping applications\n *     2 -> mm accuracy\n */\nexport var iterations = 1;\n\nexport function init() {\n  this.A = [];\n  this.A[1] = 0.6399175073;\n  this.A[2] = -0.1358797613;\n  this.A[3] = 0.063294409;\n  this.A[4] = -0.02526853;\n  this.A[5] = 0.0117879;\n  this.A[6] = -0.0055161;\n  this.A[7] = 0.0026906;\n  this.A[8] = -0.001333;\n  this.A[9] = 0.00067;\n  this.A[10] = -0.00034;\n\n  this.B_re = [];\n  this.B_im = [];\n  this.B_re[1] = 0.7557853228;\n  this.B_im[1] = 0;\n  this.B_re[2] = 0.249204646;\n  this.B_im[2] = 0.003371507;\n  this.B_re[3] = -0.001541739;\n  this.B_im[3] = 0.041058560;\n  this.B_re[4] = -0.10162907;\n  this.B_im[4] = 0.01727609;\n  this.B_re[5] = -0.26623489;\n  this.B_im[5] = -0.36249218;\n  this.B_re[6] = -0.6870983;\n  this.B_im[6] = -1.1651967;\n\n  this.C_re = [];\n  this.C_im = [];\n  this.C_re[1] = 1.3231270439;\n  this.C_im[1] = 0;\n  this.C_re[2] = -0.577245789;\n  this.C_im[2] = -0.007809598;\n  this.C_re[3] = 0.508307513;\n  this.C_im[3] = -0.112208952;\n  this.C_re[4] = -0.15094762;\n  this.C_im[4] = 0.18200602;\n  this.C_re[5] = 1.01418179;\n  this.C_im[5] = 1.64497696;\n  this.C_re[6] = 1.9660549;\n  this.C_im[6] = 2.5127645;\n\n  this.D = [];\n  this.D[1] = 1.5627014243;\n  this.D[2] = 0.5185406398;\n  this.D[3] = -0.03333098;\n  this.D[4] = -0.1052906;\n  this.D[5] = -0.0368594;\n  this.D[6] = 0.007317;\n  this.D[7] = 0.01220;\n  this.D[8] = 0.00394;\n  this.D[9] = -0.0013;\n}\n\n/**\n    New Zealand Map Grid Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var n;\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lat = lat - this.lat0;\n  var delta_lon = lon - this.long0;\n\n  // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n  // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n  var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n  var d_lambda = delta_lon;\n  var d_phi_n = 1; // d_phi^0\n\n  var d_psi = 0;\n  for (n = 1; n <= 10; n++) {\n    d_phi_n = d_phi_n * d_phi;\n    d_psi = d_psi + this.A[n] * d_phi_n;\n  }\n\n  // 2. Calculate theta\n  var th_re = d_psi;\n  var th_im = d_lambda;\n\n  // 3. Calculate z\n  var th_n_re = 1;\n  var th_n_im = 0; // theta^0\n  var th_n_re1;\n  var th_n_im1;\n\n  var z_re = 0;\n  var z_im = 0;\n  for (n = 1; n <= 6; n++) {\n    th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n    th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n    th_n_re = th_n_re1;\n    th_n_im = th_n_im1;\n    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n  }\n\n  // 4. Calculate easting and northing\n  p.x = (z_im * this.a) + this.x0;\n  p.y = (z_re * this.a) + this.y0;\n\n  return p;\n}\n\n/**\n    New Zealand Map Grid Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var n;\n  var x = p.x;\n  var y = p.y;\n\n  var delta_x = x - this.x0;\n  var delta_y = y - this.y0;\n\n  // 1. Calculate z\n  var z_re = delta_y / this.a;\n  var z_im = delta_x / this.a;\n\n  // 2a. Calculate theta - first approximation gives km accuracy\n  var z_n_re = 1;\n  var z_n_im = 0; // z^0\n  var z_n_re1;\n  var z_n_im1;\n\n  var th_re = 0;\n  var th_im = 0;\n  for (n = 1; n <= 6; n++) {\n    z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n    z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n    z_n_re = z_n_re1;\n    z_n_im = z_n_im1;\n    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n  }\n\n  // 2b. Iterate to refine the accuracy of the calculation\n  //        0 iterations gives km accuracy\n  //        1 iteration gives m accuracy -- good enough for most mapping applications\n  //        2 iterations bives mm accuracy\n  for (var i = 0; i < this.iterations; i++) {\n    var th_n_re = th_re;\n    var th_n_im = th_im;\n    var th_n_re1;\n    var th_n_im1;\n\n    var num_re = z_re;\n    var num_im = z_im;\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    th_n_re = 1;\n    th_n_im = 0;\n    var den_re = this.B_re[1];\n    var den_im = this.B_im[1];\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    // Complex division\n    var den2 = den_re * den_re + den_im * den_im;\n    th_re = (num_re * den_re + num_im * den_im) / den2;\n    th_im = (num_im * den_re - num_re * den_im) / den2;\n  }\n\n  // 3. Calculate d_phi              ...                                    // and d_lambda\n  var d_psi = th_re;\n  var d_lambda = th_im;\n  var d_psi_n = 1; // d_psi^0\n\n  var d_phi = 0;\n  for (n = 1; n <= 9; n++) {\n    d_psi_n = d_psi_n * d_psi;\n    d_phi = d_phi + this.D[n] * d_psi_n;\n  }\n\n  // 4. Calculate latitude and longitude\n  // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n  var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\n  var lon = this.long0 + d_lambda;\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"New_Zealand_Map_Grid\", \"nzmg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\n\n/* Initialize the Miller Cylindrical projection\n  -------------------------------------------*/\nexport function init() {\n  //no-op\n}\n\n/* Miller Cylindrical forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x = this.x0 + this.a * dlon;\n  var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Miller Cylindrical inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n\n  var lon = adjust_lon(this.long0 + p.x / this.a);\n  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Miller_Cylindrical\", \"mill\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport pj_enfn from '../common/pj_enfn';\nvar MAX_ITER = 20;\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n\nexport function init() {\n  /* Place parameters in static storage for common use\n    -------------------------------------------------*/\n\n\n  if (!this.sphere) {\n    this.en = pj_enfn(this.es);\n  }\n  else {\n    this.n = 1;\n    this.m = 0;\n    this.es = 0;\n    this.C_y = Math.sqrt((this.m + 1) / this.n);\n    this.C_x = this.C_y / (this.m + 1);\n  }\n\n}\n\n/* Sinusoidal forward equations--mapping lat,long to x,y\n  -----------------------------------------------------*/\nexport function forward(p) {\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n    -----------------*/\n  lon = adjust_lon(lon - this.long0);\n\n  if (this.sphere) {\n    if (!this.m) {\n      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n    }\n    else {\n      var k = this.n * Math.sin(lat);\n      for (var i = MAX_ITER; i; --i) {\n        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n        lat -= V;\n        if (Math.abs(V) < EPSLN) {\n          break;\n        }\n      }\n    }\n    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n    y = this.a * this.C_y * lat;\n\n  }\n  else {\n\n    var s = Math.sin(lat);\n    var c = Math.cos(lat);\n    y = this.a * pj_mlfn(lat, s, c, this.en);\n    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var lat, temp, lon, s;\n\n  p.x -= this.x0;\n  lon = p.x / this.a;\n  p.y -= this.y0;\n  lat = p.y / this.a;\n\n  if (this.sphere) {\n    lat /= this.C_y;\n    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n    if (this.m) {\n      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n    }\n    else if (this.n !== 1) {\n      lat = asinz(Math.sin(lat) / this.n);\n    }\n    lon = adjust_lon(lon + this.long0);\n    lat = adjust_lat(lat);\n  }\n  else {\n    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n    s = Math.abs(lat);\n    if (s < HALF_PI) {\n      s = Math.sin(lat);\n      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n      lon = adjust_lon(temp);\n    }\n    else if ((s - EPSLN) < HALF_PI) {\n      lon = this.long0;\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Sinusoidal\", \"sinu\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nexport function init() {}\nimport {EPSLN} from '../constants/values';\n/* Mollweide forward equations--mapping lat,long to x,y\n    ----------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var theta = lat;\n  var con = Math.PI * Math.sin(lat);\n\n  /* Iterate using the Newton-Raphson method to find theta\n      -----------------------------------------------------*/\n  while (true) {\n    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n    theta += delta_theta;\n    if (Math.abs(delta_theta) < EPSLN) {\n      break;\n    }\n  }\n  theta /= 2;\n\n  /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n       this is done here because of precision problems with \"cos(theta)\"\n       --------------------------------------------------------------------------*/\n  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n    delta_lon = 0;\n  }\n  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var theta;\n  var arg;\n\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  arg = p.y / (1.4142135623731 * this.a);\n\n  /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n       a number very close to one is used instead.\n       -------------------------------------------------------------------*/\n  if (Math.abs(arg) > 0.999999999999) {\n    arg = 0.999999999999;\n  }\n  theta = Math.asin(arg);\n  var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\n  if (lon < (-Math.PI)) {\n    lon = -Math.PI;\n  }\n  if (lon > Math.PI) {\n    lon = Math.PI;\n  }\n  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n  if (Math.abs(arg) > 1) {\n    arg = 1;\n  }\n  var lat = Math.asin(arg);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mollweide\", \"moll\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport msfnz from '../common/msfnz';\nimport mlfn from '../common/mlfn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.lat2 = this.lat2 || this.lat1;\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n\n  this.sinphi = Math.sin(this.lat1);\n  this.cosphi = Math.cos(this.lat1);\n\n  this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n  this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n    this.ns = this.sinphi;\n  }\n  else {\n    this.sinphi = Math.sin(this.lat2);\n    this.cosphi = Math.cos(this.lat2);\n    this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n    this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n  }\n  this.g = this.ml1 + this.ms1 / this.ns;\n  this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  this.rh = this.a * (this.g - this.ml0);\n}\n\n/* Equidistant Conic forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var rh1;\n\n  /* Forward equations\n      -----------------*/\n  if (this.sphere) {\n    rh1 = this.a * (this.g - lat);\n  }\n  else {\n    var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n    rh1 = this.a * (this.g - ml);\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  var x = this.x0 + rh1 * Math.sin(theta);\n  var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  var con, rh1, lat, lon;\n  if (this.ns >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    lat = adjust_lat(this.g - rh1 / this.a);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    var ml = this.g - rh1 / this.a;\n    lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n\n}\n\nexport var names = [\"Equidistant_Conic\", \"eqdc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n/* Initialize the Van Der Grinten projection\n  ----------------------------------------*/\nexport function init() {\n  //this.R = 6370997; //Radius of earth\n  this.R = this.a;\n}\n\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  /* Forward equations\n    -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x, y;\n\n  if (Math.abs(lat) <= EPSLN) {\n    x = this.x0 + this.R * dlon;\n    y = this.y0;\n  }\n  var theta = asinz(2 * Math.abs(lat / Math.PI));\n  if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\n    x = this.x0;\n    if (lat >= 0) {\n      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n    }\n    else {\n      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n    }\n    //  return(OK);\n  }\n  var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\n  var asq = al * al;\n  var sinth = Math.sin(theta);\n  var costh = Math.cos(theta);\n\n  var g = costh / (sinth + costh - 1);\n  var gsq = g * g;\n  var m = g * (2 / sinth - 1);\n  var msq = m * m;\n  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n  if (dlon < 0) {\n    con = -con;\n  }\n  x = this.x0 + con;\n  //con = Math.abs(con / (Math.PI * this.R));\n  var q = asq + g;\n  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n  if (lat >= 0) {\n    //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 + con;\n  }\n  else {\n    //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 - con;\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Van Der Grinten inverse equations--mapping x,y to lat/long\n  ---------------------------------------------------------*/\nexport function inverse(p) {\n  var lon, lat;\n  var xx, yy, xys, c1, c2, c3;\n  var a1;\n  var m1;\n  var con;\n  var th1;\n  var d;\n\n  /* inverse equations\n    -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  con = Math.PI * this.R;\n  xx = p.x / con;\n  yy = p.y / con;\n  xys = xx * xx + yy * yy;\n  c1 = -Math.abs(yy) * (1 + xys);\n  c2 = c1 - 2 * yy * yy + xx * xx;\n  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n  a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n  m1 = 2 * Math.sqrt(-a1 / 3);\n  con = ((3 * d) / a1) / m1;\n  if (Math.abs(con) > 1) {\n    if (con >= 0) {\n      con = 1;\n    }\n    else {\n      con = -1;\n    }\n  }\n  th1 = Math.acos(con) / 3;\n  if (p.y >= 0) {\n    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n  else {\n    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n\n  if (Math.abs(xx) < EPSLN) {\n    lon = this.long0;\n  }\n  else {\n    lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport asinz from '../common/asinz';\nimport imlfn from '../common/imlfn';\n\n\n\nexport function init() {\n  this.sin_p12 = Math.sin(this.lat0);\n  this.cos_p12 = Math.cos(this.lat0);\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var dlon = adjust_lon(lon - this.long0);\n  var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n  if (this.sphere) {\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //default case\n      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n      c = Math.acos(cos_c);\n      kp = c ? c / Math.sin(c) : 1;\n      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n      return p;\n    }\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //Default case\n      tanphi = sinphi / cosphi;\n      Nl1 = gN(this.a, this.e, this.sin_p12);\n      Nl = gN(this.a, this.e, sinphi);\n      psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n      Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n      if (Az === 0) {\n        s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n        s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else {\n        s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n      }\n      G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n      H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n      GH = G * H;\n      Hs = H * H;\n      s2 = s * s;\n      s3 = s2 * s;\n      s4 = s3 * s;\n      s5 = s4 * s;\n      c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n      p.x = this.x0 + c * Math.sin(Az);\n      p.y = this.y0 + c * Math.cos(Az);\n      return p;\n    }\n  }\n\n\n}\n\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F, sinpsi;\n  if (this.sphere) {\n    rh = Math.sqrt(p.x * p.x + p.y * p.y);\n    if (rh > (2 * HALF_PI * this.a)) {\n      return;\n    }\n    z = rh / this.a;\n\n    sinz = Math.sin(z);\n    cosz = Math.cos(z);\n\n    lon = this.long0;\n    if (Math.abs(rh) <= EPSLN) {\n      lat = this.lat0;\n    }\n    else {\n      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n        }\n        else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n      }\n      else {\n        /*con = cosz - this.sin_p12 * Math.sin(lat);\n        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n          //no-op, just keep the lon value as is\n        } else {\n          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n        }*/\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n      }\n    }\n\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = Mlp - rh;\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = rh - Mlp;\n\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else {\n      //default case\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      Az = Math.atan2(p.x, p.y);\n      N1 = gN(this.a, this.e, this.sin_p12);\n      cosAz = Math.cos(Az);\n      tmp = this.e * this.cos_p12 * cosAz;\n      A = -tmp * tmp / (1 - this.es);\n      B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n      D = rh / N1;\n      Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n      F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n      psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n      lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n      sinpsi = Math.sin(psi);\n      lat = Math.atan2((sinpsi - this.es * F * this.sin_p12) * Math.tan(psi), sinpsi * (1 - this.es));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n  }\n\n}\n\nexport var names = [\"Azimuthal_Equidistant\", \"aeqd\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nexport function init() {\n  //double temp;      /* temporary variable    */\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n}\n\n/* Orthographic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g, x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.a * ksp * cosphi * Math.sin(dlon);\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* height above ellipsoid      */\n  var z; /* angle          */\n  var sinz, cosz; /* sin of z and cos of z      */\n  var con;\n  var lon, lat;\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  z = asinz(rh / this.a);\n\n  sinz = Math.sin(z);\n  cosz = Math.cos(z);\n\n  lon = this.long0;\n  if (Math.abs(rh) <= EPSLN) {\n    lat = this.lat0;\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n  con = Math.abs(this.lat0) - HALF_PI;\n  if (Math.abs(con) <= EPSLN) {\n    if (this.lat0 >= 0) {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n    }\n    else {\n      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"ortho\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","// QSC projection rewritten from the original PROJ4\n// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\n\nimport {EPSLN, TWO_PI, SPI, HALF_PI, FORTPI} from '../constants/values';\n\n/* constants */\nvar FACE_ENUM = {\n    FRONT: 1,\n    RIGHT: 2,\n    BACK: 3,\n    LEFT: 4,\n    TOP: 5,\n    BOTTOM: 6\n};\n\nvar AREA_ENUM = {\n    AREA_0: 1,\n    AREA_1: 2,\n    AREA_2: 3,\n    AREA_3: 4\n};\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Quadrilateralized Spherical Cube\";\n\n  /* Determine the cube face from the center of projection. */\n  if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\n    this.face = FACE_ENUM.TOP;\n  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\n    this.face = FACE_ENUM.BOTTOM;\n  } else if (Math.abs(this.long0) <= FORTPI) {\n    this.face = FACE_ENUM.FRONT;\n  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\n    this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\n  } else {\n    this.face = FACE_ENUM.BACK;\n  }\n\n  /* Fill in useful values for the ellipsoid <-> sphere shift\n   * described in [LK12]. */\n  if (this.es !== 0) {\n    this.one_minus_f = 1 - (this.a - this.b) / this.a;\n    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\n  }\n}\n\n// QSC forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n  var xy = {x: 0, y: 0};\n  var lat, lon;\n  var theta, phi;\n  var t, mu;\n  /* nu; */\n  var area = {value: 0};\n\n  // move lon according to projection's lon\n  p.x -= this.long0;\n\n  /* Convert the geodetic latitude to a geocentric latitude.\n   * This corresponds to the shift from the ellipsoid to the sphere\n   * described in [LK12]. */\n  if (this.es !== 0) {//if (P->es != 0) {\n    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\n  } else {\n    lat = p.y;\n  }\n\n  /* Convert the input lat, lon into theta, phi as used by QSC.\n   * This depends on the cube face and the area on it.\n   * For the top and bottom face, we can compute theta and phi\n   * directly from phi, lam. For the other faces, we must use\n   * unit sphere cartesian coordinates as an intermediate step. */\n  lon = p.x; //lon = lp.lam;\n  if (this.face === FACE_ENUM.TOP) {\n    phi = HALF_PI - lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = lon - HALF_PI;\n    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = (lon > 0.0 ? lon - SPI : lon + SPI);\n    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = lon + HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = lon;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = HALF_PI + lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = -lon + HALF_PI;\n    } else if (lon < FORTPI && lon >= -FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = -lon;\n    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = -lon - HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\n    }\n  } else {\n    var q, r, s;\n    var sinlat, coslat;\n    var sinlon, coslon;\n\n    if (this.face === FACE_ENUM.RIGHT) {\n      lon = qsc_shift_lon_origin(lon, +HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lon = qsc_shift_lon_origin(lon, +SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lon = qsc_shift_lon_origin(lon, -HALF_PI);\n    }\n    sinlat = Math.sin(lat);\n    coslat = Math.cos(lat);\n    sinlon = Math.sin(lon);\n    coslon = Math.cos(lon);\n    q = coslat * coslon;\n    r = coslat * sinlon;\n    s = sinlat;\n\n    if (this.face === FACE_ENUM.FRONT) {\n      phi = Math.acos(q);\n      theta = qsc_fwd_equat_face_theta(phi, s, r, area);\n    } else if (this.face === FACE_ENUM.RIGHT) {\n      phi = Math.acos(r);\n      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\n    } else if (this.face === FACE_ENUM.BACK) {\n      phi = Math.acos(-q);\n      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      phi = Math.acos(-r);\n      theta = qsc_fwd_equat_face_theta(phi, s, q, area);\n    } else {\n      /* Impossible */\n      phi = theta = 0;\n      area.value = AREA_ENUM.AREA_0;\n    }\n  }\n\n  /* Compute mu and nu for the area of definition.\n   * For mu, see Eq. (3-21) in [OL76], but note the typos:\n   * compare with Eq. (3-14). For nu, see Eq. (3-38). */\n  mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\n  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\n\n  /* Apply the result to the real area. */\n  if (area.value === AREA_ENUM.AREA_1) {\n    mu += HALF_PI;\n  } else if (area.value === AREA_ENUM.AREA_2) {\n    mu += SPI;\n  } else if (area.value === AREA_ENUM.AREA_3) {\n    mu += 1.5 * SPI;\n  }\n\n  /* Now compute x, y from mu and nu */\n  xy.x = t * Math.cos(mu);\n  xy.y = t * Math.sin(mu);\n  xy.x = xy.x * this.a + this.x0;\n  xy.y = xy.y * this.a + this.y0;\n\n  p.x = xy.x;\n  p.y = xy.y;\n  return p;\n}\n\n// QSC inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n  var lp = {lam: 0, phi: 0};\n  var mu, nu, cosmu, tannu;\n  var tantheta, theta, cosphi, phi;\n  var t;\n  var area = {value: 0};\n\n  /* de-offset */\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  /* Convert the input x, y to the mu and nu angles as used by QSC.\n   * This depends on the area of the cube face. */\n  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\n  mu = Math.atan2(p.y, p.x);\n  if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_0;\n  } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\n    area.value = AREA_ENUM.AREA_1;\n    mu -= HALF_PI;\n  } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_2;\n    mu = (mu < 0.0 ? mu + SPI : mu - SPI);\n  } else {\n    area.value = AREA_ENUM.AREA_3;\n    mu += HALF_PI;\n  }\n\n  /* Compute phi and theta for the area of definition.\n   * The inverse projection is not described in the original paper, but some\n   * good hints can be found here (as of 2011-12-14):\n   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\n   * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\n  t = (SPI / 12) * Math.tan(mu);\n  tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\n  theta = Math.atan(tantheta);\n  cosmu = Math.cos(mu);\n  tannu = Math.tan(nu);\n  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\n  if (cosphi < -1) {\n    cosphi = -1;\n  } else if (cosphi > +1) {\n    cosphi = +1;\n  }\n\n  /* Apply the result to the real area on the cube face.\n   * For the top and bottom face, we can compute phi and lam directly.\n   * For the other faces, we must use unit sphere cartesian coordinates\n   * as an intermediate step. */\n  if (this.face === FACE_ENUM.TOP) {\n    phi = Math.acos(cosphi);\n    lp.phi = HALF_PI - phi;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = theta;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = Math.acos(cosphi);\n    lp.phi = phi - HALF_PI;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = -theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = -theta;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = -theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\n    }\n  } else {\n    /* Compute phi and lam via cartesian unit sphere coordinates. */\n    var q, r, s;\n    q = cosphi;\n    t = q * q;\n    if (t >= 1) {\n      s = 0;\n    } else {\n      s = Math.sqrt(1 - t) * Math.sin(theta);\n    }\n    t += s * s;\n    if (t >= 1) {\n      r = 0;\n    } else {\n      r = Math.sqrt(1 - t);\n    }\n    /* Rotate q,r,s into the correct area. */\n    if (area.value === AREA_ENUM.AREA_1) {\n      t = r;\n      r = -s;\n      s = t;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      r = -r;\n      s = -s;\n    } else if (area.value === AREA_ENUM.AREA_3) {\n      t = r;\n      r = s;\n      s = -t;\n    }\n    /* Rotate q,r,s into the correct cube face. */\n    if (this.face === FACE_ENUM.RIGHT) {\n      t = q;\n      q = -r;\n      r = t;\n    } else if (this.face === FACE_ENUM.BACK) {\n      q = -q;\n      r = -r;\n    } else if (this.face === FACE_ENUM.LEFT) {\n      t = q;\n      q = r;\n      r = -t;\n    }\n    /* Now compute phi and lam from the unit sphere coordinates. */\n    lp.phi = Math.acos(-s) - HALF_PI;\n    lp.lam = Math.atan2(r, q);\n    if (this.face === FACE_ENUM.RIGHT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\n    }\n  }\n\n  /* Apply the shift from the sphere to the ellipsoid as described\n   * in [LK12]. */\n  if (this.es !== 0) {\n    var invert_sign;\n    var tanphi, xa;\n    invert_sign = (lp.phi < 0 ? 1 : 0);\n    tanphi = Math.tan(lp.phi);\n    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\n    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\n    if (invert_sign) {\n      lp.phi = -lp.phi;\n    }\n  }\n\n  lp.lam += this.long0;\n  p.x = lp.lam;\n  p.y = lp.phi;\n  return p;\n}\n\n/* Helper function for forward projection: compute the theta angle\n * and determine the area number. */\nfunction qsc_fwd_equat_face_theta(phi, y, x, area) {\n  var theta;\n  if (phi < EPSLN) {\n    area.value = AREA_ENUM.AREA_0;\n    theta = 0.0;\n  } else {\n    theta = Math.atan2(y, x);\n    if (Math.abs(theta) <= FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta -= HALF_PI;\n    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta += HALF_PI;\n    }\n  }\n  return theta;\n}\n\n/* Helper function: shift the longitude. */\nfunction qsc_shift_lon_origin(lon, offset) {\n  var slon = lon + offset;\n  if (slon < -SPI) {\n    slon += TWO_PI;\n  } else if (slon > +SPI) {\n    slon -= TWO_PI;\n  }\n  return slon;\n}\n\nexport var names = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n\n","// Robinson projection\n// Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c\n// Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039\n\nimport {HALF_PI, D2R, R2D, EPSLN} from '../constants/values';\nimport adjust_lon from '../common/adjust_lon';\n\nvar COEFS_X = [\n    [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],\n    [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],\n    [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],\n    [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],\n    [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],\n    [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],\n    [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],\n    [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],\n    [0.9216, -0.00467746, -0.00010457, 4.81243e-06],\n    [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],\n    [0.8679, -0.00609363, -0.000113898, 3.32484e-06],\n    [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],\n    [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],\n    [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],\n    [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],\n    [0.6732, -0.00986209, -0.000199569, 1.91974e-05],\n    [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],\n    [0.5722, -0.00906601, 0.000182, 6.24051e-06],\n    [0.5322, -0.00677797, 0.000275608, 6.24051e-06]\n];\n\nvar COEFS_Y = [\n    [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],\n    [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],\n    [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],\n    [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],\n    [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],\n    [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],\n    [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],\n    [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],\n    [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],\n    [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],\n    [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],\n    [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],\n    [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],\n    [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],\n    [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],\n    [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],\n    [0.9394, 0.00840947, -0.000192841, -4.2106e-06],\n    [0.9761, 0.00616527, -0.000256, -4.2106e-06],\n    [1.0000, 0.00328947, -0.000319159, -4.2106e-06]\n];\n\nvar FXC = 0.8487;\nvar FYC = 1.3523;\nvar C1 = R2D/5; // rad to 5-degree interval\nvar RC1 = 1/C1;\nvar NODES = 18;\n\nvar poly3_val = function(coefs, x) {\n    return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));\n};\n\nvar poly3_der = function(coefs, x) {\n    return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);\n};\n\nfunction newton_rapshon(f_df, start, max_err, iters) {\n    var x = start;\n    for (; iters; --iters) {\n        var upd = f_df(x);\n        x -= upd;\n        if (Math.abs(upd) < max_err) {\n            break;\n        }\n    }\n    return x;\n}\n\nexport function init() {\n    this.x0 = this.x0 || 0;\n    this.y0 = this.y0 || 0;\n    this.long0 = this.long0 || 0;\n    this.es = 0;\n    this.title = this.title || \"Robinson\";\n}\n\nexport function forward(ll) {\n    var lon = adjust_lon(ll.x - this.long0);\n\n    var dphi = Math.abs(ll.y);\n    var i = Math.floor(dphi * C1);\n    if (i < 0) {\n        i = 0;\n    } else if (i >= NODES) {\n        i = NODES - 1;\n    }\n    dphi = R2D * (dphi - RC1 * i);\n    var xy = {\n        x: poly3_val(COEFS_X[i], dphi) * lon,\n        y: poly3_val(COEFS_Y[i], dphi)\n    };\n    if (ll.y < 0) {\n        xy.y = -xy.y;\n    }\n\n    xy.x = xy.x * this.a * FXC + this.x0;\n    xy.y = xy.y * this.a * FYC + this.y0;\n    return xy;\n}\n\nexport function inverse(xy) {\n    var ll = {\n        x: (xy.x - this.x0) / (this.a * FXC),\n        y: Math.abs(xy.y - this.y0) / (this.a * FYC)\n    };\n\n    if (ll.y >= 1) { // pathologic case\n        ll.x /= COEFS_X[NODES][0];\n        ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;\n    } else {\n        // find table interval\n        var i = Math.floor(ll.y * NODES);\n        if (i < 0) {\n            i = 0;\n        } else if (i >= NODES) {\n            i = NODES - 1;\n        }\n        for (;;) {\n            if (COEFS_Y[i][0] > ll.y) {\n                --i;\n            } else if (COEFS_Y[i+1][0] <= ll.y) {\n                ++i;\n            } else {\n                break;\n            }\n        }\n        // linear interpolation in 5 degree interval\n        var coefs = COEFS_Y[i];\n        var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);\n        // find t so that poly3_val(coefs, t) = ll.y\n        t = newton_rapshon(function(x) {\n            return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);\n        }, t, EPSLN, 100);\n\n        ll.x /= poly3_val(COEFS_X[i], t);\n        ll.y = (5 * i + t) * D2R;\n        if (xy.y < 0) {\n            ll.y = -ll.y;\n        }\n    }\n\n    ll.x = adjust_lon(ll.x + this.long0);\n    return ll;\n}\n\nexport var names = [\"Robinson\", \"robin\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {\n    geodeticToGeocentric,\n    geocentricToGeodetic\n} from '../datumUtils';\n\nexport function init() {\n    this.name = 'geocent';\n\n}\n\nexport function forward(p) {\n    var point = geodeticToGeocentric(p, this.es, this.a);\n    return point;\n}\n\nexport function inverse(p) {\n    var point = geocentricToGeodetic(p, this.es, this.a, this.b);\n    return point;\n}\n\nexport var names = [\"Geocentric\", 'geocentric', \"geocent\", \"Geocent\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names\n};","\nvar mode = {\n  N_POLE: 0,\n  S_POLE: 1,\n  EQUIT: 2,\n  OBLIQ: 3\n};\n\nimport { D2R, HALF_PI, EPSLN } from \"../constants/values\";\nimport hypot from \"../common/hypot\";\n\nvar params = {\n  h:     { def: 100000, num: true },           // default is Karman line, no default in PROJ.7\n  azi:   { def: 0, num: true, degrees: true }, // default is North\n  tilt:  { def: 0, num: true, degrees: true }, // default is Nadir\n  long0: { def: 0, num: true },                // default is Greenwich, conversion to rad is automatic\n  lat0:  { def: 0, num: true }                 // default is Equator, conversion to rad is automatic\n};\n\nexport function init() {\n  Object.keys(params).forEach(function (p) {\n    if (typeof this[p] === \"undefined\") {\n      this[p] = params[p].def;\n    } else if (params[p].num && isNaN(this[p])) {\n      throw new Error(\"Invalid parameter value, must be numeric \" + p + \" = \" + this[p]);\n    } else if (params[p].num) {\n      this[p] = parseFloat(this[p]);\n    }\n    if (params[p].degrees) {\n      this[p] = this[p] * D2R;\n    }\n  }.bind(this));\n\n  if (Math.abs((Math.abs(this.lat0) - HALF_PI)) < EPSLN) {\n    this.mode = this.lat0 < 0 ? mode.S_POLE : mode.N_POLE;\n  } else if (Math.abs(this.lat0) < EPSLN) {\n    this.mode = mode.EQUIT;\n  } else {\n    this.mode = mode.OBLIQ;\n    this.sinph0 = Math.sin(this.lat0);\n    this.cosph0 = Math.cos(this.lat0);\n  }\n\n  this.pn1 = this.h / this.a;  // Normalize relative to the Earth's radius\n\n  if (this.pn1 <= 0 || this.pn1 > 1e10) {\n    throw new Error(\"Invalid height\");\n  }\n  \n  this.p = 1 + this.pn1;\n  this.rp = 1 / this.p;\n  this.h1 = 1 / this.pn1;\n  this.pfact = (this.p + 1) * this.h1;\n  this.es = 0;\n\n  var omega = this.tilt;\n  var gamma = this.azi;\n  this.cg = Math.cos(gamma);\n  this.sg = Math.sin(gamma);\n  this.cw = Math.cos(omega);\n  this.sw = Math.sin(omega);\n}\n\nexport function forward(p) {\n  p.x -= this.long0;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var coslam = Math.cos(p.x);\n  var x, y;\n  switch (this.mode) {\n    case mode.OBLIQ:\n      y = this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      break;\n    case mode.EQUIT:\n      y = cosphi * coslam;\n      break;\n    case mode.S_POLE:\n      y = -sinphi;\n      break;\n    case mode.N_POLE:\n      y = sinphi;\n      break;\n  }\n  y = this.pn1 / (this.p - y);\n  x = y * cosphi * Math.sin(p.x);\n\n  switch (this.mode) {\n    case mode.OBLIQ:\n      y *= this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n      break;\n    case mode.EQUIT:\n      y *= sinphi;\n      break;\n    case mode.N_POLE:\n      y *= -(cosphi * coslam);\n      break;\n    case mode.S_POLE:\n      y *= cosphi * coslam;\n      break;\n  }\n\n  // Tilt \n  var yt, ba;\n  yt = y * this.cg + x * this.sg;\n  ba = 1 / (yt * this.sw * this.h1 + this.cw);\n  x = (x * this.cg - y * this.sg) * this.cw * ba;\n  y = yt * ba;\n\n  p.x = x * this.a;\n  p.y = y * this.a;\n  return p;\n}\n\nexport function inverse(p) {\n  p.x /= this.a;\n  p.y /= this.a;\n  var r = { x: p.x, y: p.y };\n\n  // Un-Tilt\n  var bm, bq, yt;\n  yt = 1 / (this.pn1 - p.y * this.sw);\n  bm = this.pn1 * p.x * yt;\n  bq = this.pn1 * p.y * this.cw * yt;\n  p.x = bm * this.cg + bq * this.sg;\n  p.y = bq * this.cg - bm * this.sg;\n\n  var rh = hypot(p.x, p.y);\n  if (Math.abs(rh) < EPSLN) {\n    r.x = 0;\n    r.y = p.y;\n  } else {\n    var cosz, sinz;\n    sinz = 1 - rh * rh * this.pfact;\n    sinz = (this.p - Math.sqrt(sinz)) / (this.pn1 / rh + rh / this.pn1);\n    cosz = Math.sqrt(1 - sinz * sinz);\n    switch (this.mode) {\n      case mode.OBLIQ:\n        r.y = Math.asin(cosz * this.sinph0 + p.y * sinz * this.cosph0 / rh);\n        p.y = (cosz - this.sinph0 * Math.sin(r.y)) * rh;\n        p.x *= sinz * this.cosph0;\n        break;\n      case mode.EQUIT:\n        r.y = Math.asin(p.y * sinz / rh);\n        p.y = cosz * rh;\n        p.x *= sinz;\n        break;\n      case mode.N_POLE:\n        r.y = Math.asin(cosz);\n        p.y = -p.y;\n        break;\n      case mode.S_POLE:\n        r.y = -Math.asin(cosz);\n        break;\n    }\n    r.x = Math.atan2(p.x, p.y);\n  }\n\n  p.x = r.x + this.long0;\n  p.y = r.y;\n  return p;\n}\n\nexport var names = [\"Tilted_Perspective\", \"tpers\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import hypot from '../common/hypot';\n\nexport function init() {\n    this.flip_axis = (this.sweep === 'x' ? 1 : 0);\n    this.h = Number(this.h);\n    this.radius_g_1 = this.h / this.a;\n\n    if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) {\n        throw new Error();\n    }\n\n    this.radius_g = 1.0 + this.radius_g_1;\n    this.C = this.radius_g * this.radius_g - 1.0;\n\n    if (this.es !== 0.0) {\n        var one_es = 1.0 - this.es;\n        var rone_es = 1 / one_es;\n\n        this.radius_p = Math.sqrt(one_es);\n        this.radius_p2 = one_es;\n        this.radius_p_inv2 = rone_es;\n\n        this.shape = 'ellipse'; // Use as a condition in the forward and inverse functions.\n    } else {\n        this.radius_p = 1.0;\n        this.radius_p2 = 1.0;\n        this.radius_p_inv2 = 1.0;\n\n        this.shape = 'sphere';  // Use as a condition in the forward and inverse functions.\n    }\n\n    if (!this.title) {\n        this.title = \"Geostationary Satellite View\";\n    }\n}\n\nfunction forward(p) {\n    var lon = p.x;\n    var lat = p.y;\n    var tmp, v_x, v_y, v_z;\n    lon = lon - this.long0;\n\n    if (this.shape === 'ellipse') {\n        lat = Math.atan(this.radius_p2 * Math.tan(lat));\n        var r = this.radius_p / hypot(this.radius_p * Math.cos(lat), Math.sin(lat));\n\n        v_x = r * Math.cos(lon) * Math.cos(lat);\n        v_y = r * Math.sin(lon) * Math.cos(lat);\n        v_z = r * Math.sin(lat);\n\n        if (((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2) < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        tmp = this.radius_g - v_x;\n        if (this.flip_axis) {\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n        } else {\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n        }\n    } else if (this.shape === 'sphere') {\n        tmp = Math.cos(lat);\n        v_x = Math.cos(lon) * tmp;\n        v_y = Math.sin(lon) * tmp;\n        v_z = Math.sin(lat);\n        tmp = this.radius_g - v_x;\n\n        if (this.flip_axis) {\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n        } else {\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n        }\n    }\n    p.x = p.x * this.a;\n    p.y = p.y * this.a;\n    return p;\n}\n\nfunction inverse(p) {\n    var v_x = -1.0;\n    var v_y = 0.0;\n    var v_z = 0.0;\n    var a, b, det, k;\n\n    p.x = p.x / this.a;\n    p.y = p.y / this.a;\n\n    if (this.shape === 'ellipse') {\n        if (this.flip_axis) {\n            v_z = Math.tan(p.y / this.radius_g_1);\n            v_y = Math.tan(p.x / this.radius_g_1) * hypot(1.0, v_z);\n        } else {\n            v_y = Math.tan(p.x / this.radius_g_1);\n            v_z = Math.tan(p.y / this.radius_g_1) * hypot(1.0, v_y);\n        }\n\n        var v_zp = v_z / this.radius_p;\n        a = v_y * v_y + v_zp * v_zp + v_x * v_x;\n        b = 2 * this.radius_g * v_x;\n        det = (b * b) - 4 * a * this.C;\n\n        if (det < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\n        v_x = this.radius_g + k * v_x;\n        v_y *= k;\n        v_z *= k;\n\n        p.x = Math.atan2(v_y, v_x);\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n        p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));\n    } else if (this.shape === 'sphere') {\n        if (this.flip_axis) {\n            v_z = Math.tan(p.y / this.radius_g_1);\n            v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1.0 + v_z * v_z);\n        } else {\n            v_y = Math.tan(p.x / this.radius_g_1);\n            v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1.0 + v_y * v_y);\n        }\n\n        a = v_y * v_y + v_z * v_z + v_x * v_x;\n        b = 2 * this.radius_g * v_x;\n        det = (b * b) - 4 * a * this.C;\n        if (det < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\n        v_x = this.radius_g + k * v_x;\n        v_y *= k;\n        v_z *= k;\n\n        p.x = Math.atan2(v_y, v_x);\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n    }\n    p.x = p.x + this.long0;\n    return p;\n}\n\nexport var names = [\"Geostationary Satellite View\", \"Geostationary_Satellite\", \"geos\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names,\n};\n\n","/**\n * Copyright 2018 Bernie Jenny, Monash University, Melbourne, Australia.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Equal Earth is a projection inspired by the Robinson projection, but unlike\n * the Robinson projection retains the relative size of areas. The projection\n * was designed in 2018 by Bojan Savric, Tom Patterson and Bernhard Jenny.\n *\n * Publication:\n * Bojan Savric, Tom Patterson & Bernhard Jenny (2018). The Equal Earth map\n * projection, International Journal of Geographical Information Science,\n * DOI: 10.1080/13658816.2018.1504949\n *\n * Code released August 2018\n * Ported to JavaScript and adapted for mapshaper-proj by Matthew Bloch August 2018\n * Modified for proj4js by Andreas Hocevar by Andreas Hocevar March 2024\n */\n\nimport adjust_lon from \"../common/adjust_lon\";\n\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = Math.sqrt(3) / 2.0;\n\nexport function init() {\n  this.es = 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n}\n\nexport function forward(p) {\n  var lam = adjust_lon(p.x - this.long0);\n  var phi = p.y;\n  var paramLat = Math.asin(M * Math.sin(phi)),\n  paramLatSq = paramLat * paramLat,\n  paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n  p.x = lam * Math.cos(paramLat) /\n  (M * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)));\n  p.y = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq));\n\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  var EPS = 1e-9,\n      NITER = 12,\n      paramLat = p.y,\n      paramLatSq, paramLatPow6, fy, fpy, dlat, i;\n\n  for (i = 0; i < NITER; ++i) {\n    paramLatSq = paramLat * paramLat;\n    paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n    fy = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq)) - p.y;\n    fpy = A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq);\n    paramLat -= dlat = fy / fpy;\n    if (Math.abs(dlat) < EPS) {\n        break;\n    }\n  }\n  paramLatSq = paramLat * paramLat;\n  paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n  p.x = M * p.x * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)) /\n          Math.cos(paramLat);\n  p.y = Math.asin(Math.sin(paramLat) / M);\n\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"eqearth\", \"Equal Earth\", \"Equal_Earth\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};","import adjust_lat from \"../common/adjust_lat\";\nimport adjust_lon from \"../common/adjust_lon\";\nimport hypot from \"../common/hypot\";\nimport pj_enfn from \"../common/pj_enfn\";\nimport pj_inv_mlfn from \"../common/pj_inv_mlfn\";\nimport pj_mlfn from \"../common/pj_mlfn\";\nimport { HALF_PI } from \"../constants/values\";\n\nvar EPS10 = 1e-10;\n\nexport function init() {\n  var c;\n\n  this.phi1 = this.lat1;\n  if (Math.abs(this.phi1) < EPS10) {\n    throw new Error();\n  }\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.m1 = pj_mlfn(this.phi1, this.am1 = Math.sin(this.phi1),\n      c = Math.cos(this.phi1), this.en);\n    this.am1 = c / (Math.sqrt(1 - this.es * this.am1 * this.am1) * this.am1);\n    this.inverse = e_inv;\n    this.forward = e_fwd;\n  } else {\n    if (Math.abs(this.phi1) + EPS10 >= HALF_PI) {\n      this.cphi1 = 0;\n    }\n    else {\n      this.cphi1 = 1 / Math.tan(this.phi1);\n    }\n    this.inverse = s_inv;\n    this.forward = s_fwd;\n  }\n}\n\nfunction e_fwd(p) {\n  var lam = adjust_lon(p.x - (this.long0 || 0));\n  var phi = p.y;\n  var rh, E, c;\n  rh = this.am1 + this.m1 - pj_mlfn(phi, E = Math.sin(phi), c = Math.cos(phi), this.en);\n  E = c * lam / (rh * Math.sqrt(1 - this.es * E * E));\n  p.x = rh * Math.sin(E);\n  p.y = this.am1 - rh * Math.cos(E);\n\n  p.x = this.a * p.x + (this.x0 || 0);\n  p.y = this.a * p.y + (this.y0 || 0);\n  return p;\n}\n\nfunction e_inv(p) {\n  p.x = (p.x - (this.x0 || 0)) / this.a;\n  p.y = (p.y - (this.y0 || 0)) / this.a;\n\n  var s, rh, lam, phi;\n  rh = hypot(p.x, p.y = this.am1 - p.y);\n  phi = pj_inv_mlfn(this.am1 + this.m1 - rh, this.es, this.en);\n  if ((s = Math.abs(phi)) < HALF_PI) {\n    s = Math.sin(phi);\n    lam = rh * Math.atan2(p.x, p.y) * Math.sqrt(1 - this.es * s * s) / Math.cos(phi);\n  } else if (Math.abs(s - HALF_PI) <= EPS10) {\n    lam = 0;\n  }\n  else {\n    throw new Error();\n  }\n  p.x = adjust_lon(lam + (this.long0 || 0));\n  p.y = adjust_lat(phi);\n  return p;\n}\n\nfunction s_fwd(p) {\n  var lam = adjust_lon(p.x - (this.long0 || 0));\n  var phi = p.y;\n  var E, rh;\n  rh = this.cphi1 + this.phi1 - phi;\n  if (Math.abs(rh) > EPS10) {\n    p.x = rh * Math.sin(E = lam * Math.cos(phi) / rh);\n    p.y = this.cphi1 - rh * Math.cos(E);\n  } else {\n    p.x = p.y = 0;\n  }\n\n  p.x = this.a * p.x + (this.x0 || 0);\n  p.y = this.a * p.y + (this.y0 || 0);\n  return p;\n}\n\nfunction s_inv(p) {\n  p.x = (p.x - (this.x0 || 0)) / this.a;\n  p.y = (p.y - (this.y0 || 0)) / this.a;\n\n  var lam, phi;\n  var rh = hypot(p.x, p.y = this.cphi1 - p.y);\n  phi = this.cphi1 + this.phi1 - rh;\n  if (Math.abs(phi) > HALF_PI) {\n    throw new Error();\n  }\n  if (Math.abs(Math.abs(phi) - HALF_PI) <= EPS10) {\n    lam = 0;\n  } else {\n    lam = rh * Math.atan2(p.x, p.y) / Math.cos(phi);\n  }\n  p.x = adjust_lon(lam + (this.long0 || 0));\n  p.y = adjust_lat(phi);\n  return p;\n}\n\nexport var names = [\"bonne\", \"Bonne (Werner lat_1=90)\"];\nexport default {\n  init: init,\n  names: names\n};","import proj4 from './core';\nimport Proj from \"./Proj\";\nimport Point from \"./Point\";\nimport common from \"./common/toPoint\";\nimport defs from \"./defs\";\nimport nadgrid from \"./nadgrid\";\nimport transform from \"./transform\";\nimport mgrs from \"mgrs\";\nimport includedProjections from \"../projs\";\n\nproj4.defaultDatum = 'WGS84'; //default datum\nproj4.Proj = Proj;\nproj4.WGS84 = new proj4.Proj('WGS84');\nproj4.Point = Point;\nproj4.toPoint = common;\nproj4.defs = defs;\nproj4.nadgrid = nadgrid;\nproj4.transform = transform;\nproj4.mgrs = mgrs;\nproj4.version = '__VERSION__';\nincludedProjections(proj4);\nexport default proj4;\n","import tmerc from './lib/projections/tmerc';\nimport etmerc from './lib/projections/etmerc';\nimport utm from './lib/projections/utm';\nimport sterea from './lib/projections/sterea';\nimport stere from './lib/projections/stere';\nimport somerc from './lib/projections/somerc';\nimport omerc from './lib/projections/omerc';\nimport lcc from './lib/projections/lcc';\nimport krovak from './lib/projections/krovak';\nimport cass from './lib/projections/cass';\nimport laea from './lib/projections/laea';\nimport aea from './lib/projections/aea';\nimport gnom from './lib/projections/gnom';\nimport cea from './lib/projections/cea';\nimport eqc from './lib/projections/eqc';\nimport poly from './lib/projections/poly';\nimport nzmg from './lib/projections/nzmg';\nimport mill from './lib/projections/mill';\nimport sinu from './lib/projections/sinu';\nimport moll from './lib/projections/moll';\nimport eqdc from './lib/projections/eqdc';\nimport vandg from './lib/projections/vandg';\nimport aeqd from './lib/projections/aeqd';\nimport ortho from './lib/projections/ortho';\nimport qsc from './lib/projections/qsc';\nimport robin from './lib/projections/robin';\nimport geocent from './lib/projections/geocent';\nimport tpers from './lib/projections/tpers';\nimport geos from './lib/projections/geos';\nimport eqearth from './lib/projections/eqearth';\nimport bonne from './lib/projections/bonne';\nexport default function(proj4){\n  proj4.Proj.projections.add(tmerc);\n  proj4.Proj.projections.add(etmerc);\n  proj4.Proj.projections.add(utm);\n  proj4.Proj.projections.add(sterea);\n  proj4.Proj.projections.add(stere);\n  proj4.Proj.projections.add(somerc);\n  proj4.Proj.projections.add(omerc);\n  proj4.Proj.projections.add(lcc);\n  proj4.Proj.projections.add(krovak);\n  proj4.Proj.projections.add(cass);\n  proj4.Proj.projections.add(laea);\n  proj4.Proj.projections.add(aea);\n  proj4.Proj.projections.add(gnom);\n  proj4.Proj.projections.add(cea);\n  proj4.Proj.projections.add(eqc);\n  proj4.Proj.projections.add(poly);\n  proj4.Proj.projections.add(nzmg);\n  proj4.Proj.projections.add(mill);\n  proj4.Proj.projections.add(sinu);\n  proj4.Proj.projections.add(moll);\n  proj4.Proj.projections.add(eqdc);\n  proj4.Proj.projections.add(vandg);\n  proj4.Proj.projections.add(aeqd);\n  proj4.Proj.projections.add(ortho);\n  proj4.Proj.projections.add(qsc);\n  proj4.Proj.projections.add(robin);\n  proj4.Proj.projections.add(geocent);\n  proj4.Proj.projections.add(tpers);\n  proj4.Proj.projections.add(geos);\n  proj4.Proj.projections.add(eqearth);\n  proj4.Proj.projections.add(bonne);\n}","/**\n * @module ol/proj/Units\n */\n\n/**\n * @typedef {'radians' | 'degrees' | 'ft' | 'm' | 'pixels' | 'tile-pixels' | 'us-ft'} Units\n * Projection units.\n */\n\n/**\n * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt\n * @type {Object<number, Units>}\n */\nconst unitByCode = {\n  '9001': 'm',\n  '9002': 'ft',\n  '9003': 'us-ft',\n  '9101': 'radians',\n  '9102': 'degrees',\n};\n\n/**\n * @param {number} code Unit code.\n * @return {Units} Units.\n */\nexport function fromCode(code) {\n  return unitByCode[code];\n}\n\n/**\n * @typedef {Object} MetersPerUnitLookup\n * @property {number} radians Radians\n * @property {number} degrees Degrees\n * @property {number} ft  Feet\n * @property {number} m Meters\n * @property {number} us-ft US feet\n */\n\n/**\n * Meters per unit lookup table.\n * @const\n * @type {MetersPerUnitLookup}\n * @api\n */\nexport const METERS_PER_UNIT = {\n  // use the radius of the Normal sphere\n  'radians': 6370997 / (2 * Math.PI),\n  'degrees': (2 * Math.PI * 6370997) / 360,\n  'ft': 0.3048,\n  'm': 1,\n  'us-ft': 1200 / 3937,\n};\n","/**\n * @module ol/proj/Projection\n */\nimport {METERS_PER_UNIT} from './Units.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").Units} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj.getPointResolution} function will be used.\n */\n\n/**\n * @classdesc\n * In most cases, you should not need to create instances of this class.\n * Instead, where projection information is required, you can use a string\n * projection code or identifier (e.g. `EPSG:4326`) instead of a projection\n * instance.\n *\n * The library includes support for transforming coordinates between the following\n * projections:\n *\n *  * WGS 84 / Geographic - Using codes `EPSG:4326`, `CRS:84`, `urn:ogc:def:crs:EPSG:6.6:4326`,\n *    `urn:ogc:def:crs:OGC:1.3:CRS84`, `urn:ogc:def:crs:OGC:2:84`, `http://www.opengis.net/gml/srs/epsg.xml#4326`,\n *    or `urn:x-ogc:def:crs:EPSG:4326`\n *  * WGS 84 / Spherical Mercator - Using codes `EPSG:3857`, `EPSG:102100`, `EPSG:102113`, `EPSG:900913`,\n *    `urn:ogc:def:crs:EPSG:6.18:3:3857`, or `http://www.opengis.net/gml/srs/epsg.xml#3857`\n *  * WGS 84 / UTM zones - Using codes `EPSG:32601` through `EPSG:32660` for northern zones\n *    and `EPSG:32701` through `EPSG:32760` for southern zones. Note that the built-in UTM transforms\n *    are lower accuracy (with errors on the order of 0.1 m) than those that you might get in a\n *    library like [proj4js](https://github.com/proj4js/proj4js).\n *\n * For additional projection support, or to use higher accuracy transforms than the built-in ones, you can use\n * the [proj4js](https://github.com/proj4js/proj4js) library. With `proj4js`, after adding any new projection\n * definitions, call the {@link module:ol/proj/proj4.register} function.\n *\n * You can use the {@link module:ol/proj.get} function to retrieve a projection instance\n * for one of the registered projections.\n *\n * @api\n */\nclass Projection {\n  /**\n   * @param {Options} options Projection options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     * @type {string}\n     */\n    this.code_ = options.code;\n\n    /**\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\n     * tile.\n     * @private\n     * @type {import(\"./Units.js\").Units}\n     */\n    this.units_ = /** @type {import(\"./Units.js\").Units} */ (options.units);\n\n    /**\n     * Validity extent of the projection in projected coordinates. For projections\n     * with `TILE_PIXELS` units, this is the extent of the tile in\n     * tile pixel space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = options.extent !== undefined ? options.extent : null;\n\n    /**\n     * Extent of the world in EPSG:4326. For projections with\n     * `TILE_PIXELS` units, this is the extent of the tile in\n     * projected coordinate space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.worldExtent_ =\n      options.worldExtent !== undefined ? options.worldExtent : null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.axisOrientation_ =\n      options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.global_ = options.global !== undefined ? options.global : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.canWrapX_ = !!(this.global_ && this.extent_);\n\n    /**\n     * @private\n     * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n     */\n    this.getPointResolutionFunc_ = options.getPointResolution;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.defaultTileGrid_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.metersPerUnit_ = options.metersPerUnit;\n  }\n\n  /**\n   * @return {boolean} The projection is suitable for wrapping the x-axis\n   */\n  canWrapX() {\n    return this.canWrapX_;\n  }\n\n  /**\n   * Get the code for this projection, e.g. 'EPSG:4326'.\n   * @return {string} Code.\n   * @api\n   */\n  getCode() {\n    return this.code_;\n  }\n\n  /**\n   * Get the validity extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the units of this projection.\n   * @return {import(\"./Units.js\").Units} Units.\n   * @api\n   */\n  getUnits() {\n    return this.units_;\n  }\n\n  /**\n   * Get the amount of meters per unit of this projection.  If the projection is\n   * not configured with `metersPerUnit` or a units identifier, the return is\n   * `undefined`.\n   * @return {number|undefined} Meters.\n   * @api\n   */\n  getMetersPerUnit() {\n    return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\n  }\n\n  /**\n   * Get the world extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getWorldExtent() {\n    return this.worldExtent_;\n  }\n\n  /**\n   * Get the axis orientation of this projection.\n   * Example values are:\n   * enu - the default easting, northing, elevation.\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n   *     or south orientated transverse mercator.\n   * wnu - westing, northing, up - some planetary coordinate systems have\n   *     \"west positive\" coordinate systems\n   * @return {string} Axis orientation.\n   * @api\n   */\n  getAxisOrientation() {\n    return this.axisOrientation_;\n  }\n\n  /**\n   * Is this projection a global projection which spans the whole world?\n   * @return {boolean} Whether the projection is global.\n   * @api\n   */\n  isGlobal() {\n    return this.global_;\n  }\n\n  /**\n   * Set if the projection is a global projection which spans the whole world\n   * @param {boolean} global Whether the projection is global.\n   * @api\n   */\n  setGlobal(global) {\n    this.global_ = global;\n    this.canWrapX_ = !!(global && this.extent_);\n  }\n\n  /**\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n   */\n  getDefaultTileGrid() {\n    return this.defaultTileGrid_;\n  }\n\n  /**\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n   */\n  setDefaultTileGrid(tileGrid) {\n    this.defaultTileGrid_ = tileGrid;\n  }\n\n  /**\n   * Set the validity extent for this projection.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  setExtent(extent) {\n    this.extent_ = extent;\n    this.canWrapX_ = !!(this.global_ && extent);\n  }\n\n  /**\n   * Set the world extent for this projection.\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\n   *     [minlon, minlat, maxlon, maxlat].\n   * @api\n   */\n  setWorldExtent(worldExtent) {\n    this.worldExtent_ = worldExtent;\n  }\n\n  /**\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\n   * for this projection.\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n   * @api\n   */\n  setGetPointResolution(func) {\n    this.getPointResolutionFunc_ = func;\n  }\n\n  /**\n   * Get the custom point resolution function for this projection (if set).\n   * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n   * resolution function (if set).\n   */\n  getPointResolutionFunc() {\n    return this.getPointResolutionFunc_;\n  }\n}\n\nexport default Projection;\n","/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * @const\n * @type {number}\n */\nexport const HALF_SIZE = Math.PI * RADIUS;\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\n\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nclass EPSG3857Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   */\n  constructor(code) {\n    super({\n      code: code,\n      units: 'm',\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / Math.cosh(point[1] / RADIUS);\n      },\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG3857Projection('EPSG:3857'),\n  new EPSG3857Projection('EPSG:102100'),\n  new EPSG3857Projection('EPSG:102113'),\n  new EPSG3857Projection('EPSG:900913'),\n  new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\n];\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @param {number} [stride] Stride (default is `dimension`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, output, dimension, stride) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  stride = stride ?? dimension;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += stride) {\n    output[i] = (HALF_SIZE * input[i]) / 180;\n    let y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @param {number} [stride] Stride (default is `dimension`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, output, dimension, stride) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  stride = stride ?? dimension;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += stride) {\n    output[i] = (180 * input[i]) / HALF_SIZE;\n    output[i + 1] =\n      (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\n  }\n  return output;\n}\n","/**\n * @module ol/proj/epsg4326\n */\nimport Projection from './Projection.js';\n\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-180, -90, 180, 90];\n\n/**\n * @const\n * @type {number}\n */\nexport const METERS_PER_UNIT = (Math.PI * RADIUS) / 180;\n\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */\nclass EPSG4326Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   * @param {string} [axisOrientation] Axis orientation.\n   */\n  constructor(code, axisOrientation) {\n    super({\n      code: code,\n      units: 'degrees',\n      extent: EXTENT,\n      axisOrientation: axisOrientation,\n      global: true,\n      metersPerUnit: METERS_PER_UNIT,\n      worldExtent: EXTENT,\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG4326Projection('CRS:84'),\n  new EPSG4326Projection('EPSG:4326', 'neu'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\n  new EPSG4326Projection('http://www.opengis.net/def/crs/OGC/1.3/CRS84'),\n  new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\n  new EPSG4326Projection('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu'),\n];\n","/**\n * @module ol/proj/projections\n */\n\n/**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */\nlet cache = {};\n\n/**\n * Clear the projections cache.\n */\nexport function clear() {\n  cache = {};\n}\n\n/**\n * Get a cached projection by code.\n * @param {string} code The code for the projection.\n * @return {import(\"./Projection.js\").default|null} The projection (if cached).\n */\nexport function get(code) {\n  return (\n    cache[code] ||\n    cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] ||\n    null\n  );\n}\n\n/**\n * Add a projection to the cache.\n * @param {string} code The projection code.\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\n */\nexport function add(code, projection) {\n  cache[code] = projection;\n}\n","/**\n * @module ol/proj/transforms\n */\nimport {isEmpty} from '../obj.js';\n\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nlet transforms = {};\n\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n  transforms = {};\n}\n\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  const transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n  return transform;\n}\n\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|null} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    return transforms[sourceCode][destinationCode];\n  }\n  return null;\n}\n","/**\n * @module ol/extent\n */\nimport Relationship from './extent/Relationship.js';\n\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n\n/**\n * Extent corner.\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n  const extent = createEmpty();\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [dest] Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, dest) {\n  const minX = Math.min.apply(null, xs);\n  const minY = Math.min.apply(null, ys);\n  const maxX = Math.max.apply(null, xs);\n  const maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, dest);\n}\n\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, dest) {\n  if (dest) {\n    dest[0] = extent[0] - value;\n    dest[1] = extent[1] - value;\n    dest[2] = extent[2] + value;\n    dest[3] = extent[3] + value;\n    return dest;\n  }\n  return [\n    extent[0] - value,\n    extent[1] - value,\n    extent[2] + value,\n    extent[3] + value,\n  ];\n}\n\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [dest] Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent.slice();\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n  let dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[0] &&\n    extent2[2] <= extent1[2] &&\n    extent1[1] <= extent2[1] &&\n    extent2[3] <= extent1[3]\n  );\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const x = coordinate[0];\n  const y = coordinate[1];\n  let relationship = Relationship.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n  return relationship;\n}\n\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, dest) {\n  if (dest) {\n    dest[0] = minX;\n    dest[1] = minY;\n    dest[2] = maxX;\n    dest[3] = maxY;\n    return dest;\n  }\n  return [minX, minY, maxX, maxY];\n}\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(dest) {\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, dest);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, dest) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  return createOrUpdate(x, y, x, y, dest);\n}\n\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendCoordinates(extent, coordinates);\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  dest,\n) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendRings(extent, rings);\n}\n\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n  return (\n    extent1[0] == extent2[0] &&\n    extent1[2] == extent2[2] &&\n    extent1[1] == extent2[1] &&\n    extent1[3] == extent2[3]\n  );\n}\n\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n  return (\n    Math.abs(extent1[0] - extent2[0]) < tolerance &&\n    Math.abs(extent1[2] - extent2[2]) < tolerance &&\n    Math.abs(extent1[1] - extent2[1]) < tolerance &&\n    Math.abs(extent1[3] - extent2[3]) < tolerance\n  );\n}\n\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(\n  extent,\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\nexport function forEachCorner(extent, callback) {\n  let val;\n  val = callback(getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n}\n\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n  let area = 0;\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n  return area;\n}\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {Corner} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n  let coordinate;\n  if (corner === 'bottom-left') {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === 'bottom-right') {\n    coordinate = getBottomRight(extent);\n  } else if (corner === 'top-left') {\n    coordinate = getTopLeft(extent);\n  } else if (corner === 'top-right') {\n    coordinate = getTopRight(extent);\n  } else {\n    throw new Error('Invalid corner');\n  }\n  return coordinate;\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n  const minX = Math.min(extent1[0], extent2[0]);\n  const minY = Math.min(extent1[1], extent2[1]);\n  const maxX = Math.max(extent1[2], extent2[2]);\n  const maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, dest) {\n  const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(\n    center,\n    resolution,\n    rotation,\n    size,\n  );\n  return createOrUpdate(\n    Math.min(x0, x1, x2, x3),\n    Math.min(y0, y1, y2, y3),\n    Math.max(x0, x1, x2, x3),\n    Math.max(y0, y1, y2, y3),\n    dest,\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @return {Array<number>} Linear ring representing the viewport.\n */\nexport function getRotatedViewport(center, resolution, rotation, size) {\n  const dx = (resolution * size[0]) / 2;\n  const dy = (resolution * size[1]) / 2;\n  const cosRotation = Math.cos(rotation);\n  const sinRotation = Math.sin(rotation);\n  const xCos = dx * cosRotation;\n  const xSin = dx * sinRotation;\n  const yCos = dy * cosRotation;\n  const ySin = dy * sinRotation;\n  const x = center[0];\n  const y = center[1];\n  return [\n    x - xCos + ySin,\n    y - xSin - yCos,\n    x - xCos - ySin,\n    y - xSin + yCos,\n    x + xCos - ySin,\n    y + xSin + yCos,\n    x + xCos + ySin,\n    y + xSin - yCos,\n    x - xCos + ySin,\n    y - xSin - yCos,\n  ];\n}\n\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n  const intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [dest] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, dest) {\n  const intersection = dest ? dest : createEmpty();\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n  return intersection;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[2] &&\n    extent1[2] >= extent2[0] &&\n    extent1[1] <= extent2[3] &&\n    extent1[3] >= extent2[1]\n  );\n}\n\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n  let intersects = false;\n  const startRel = coordinateRelationship(extent, start);\n  const endRel = coordinateRelationship(extent, end);\n  if (\n    startRel === Relationship.INTERSECTING ||\n    endRel === Relationship.INTERSECTING\n  ) {\n    intersects = true;\n  } else {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const startX = start[0];\n    const startY = start[1];\n    const endX = end[0];\n    const endY = end[1];\n    const slope = (endY - startY) / (endX - startX);\n    let x, y;\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.RIGHT) &&\n      !(startRel & Relationship.RIGHT)\n    ) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.BELOW) &&\n      !(startRel & Relationship.BELOW)\n    ) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.LEFT) &&\n      !(startRel & Relationship.LEFT)\n    ) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n  return intersects;\n}\n\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [dest] Destination extent.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, dest, stops) {\n  if (isEmpty(extent)) {\n    return createOrUpdateEmpty(dest);\n  }\n  let coordinates = [];\n  if (stops > 1) {\n    const width = extent[2] - extent[0];\n    const height = extent[3] - extent[1];\n    for (let i = 0; i < stops; ++i) {\n      coordinates.push(\n        extent[0] + (width * i) / stops,\n        extent[1],\n        extent[2],\n        extent[1] + (height * i) / stops,\n        extent[2] - (width * i) / stops,\n        extent[3],\n        extent[0],\n        extent[3] - (height * i) / stops,\n      );\n    }\n  } else {\n    coordinates = [\n      extent[0],\n      extent[1],\n      extent[2],\n      extent[1],\n      extent[2],\n      extent[3],\n      extent[0],\n      extent[3],\n    ];\n  }\n  transformFn(coordinates, coordinates, 2);\n  const xs = [];\n  const ys = [];\n  for (let i = 0, l = coordinates.length; i < l; i += 2) {\n    xs.push(coordinates[i]);\n    ys.push(coordinates[i + 1]);\n  }\n  return _boundingExtentXYs(xs, ys, dest);\n}\n\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\nexport function wrapX(extent, projection) {\n  const projectionExtent = projection.getExtent();\n  const center = getCenter(extent);\n  if (\n    projection.canWrapX() &&\n    (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])\n  ) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.floor(\n      (center[0] - projectionExtent[0]) / worldWidth,\n    );\n    const offset = worldsAway * worldWidth;\n    extent[0] -= offset;\n    extent[2] -= offset;\n  }\n  return extent;\n}\n\n/**\n * Fits the extent to the real world\n *\n * If the extent does not cross the anti meridian, this will return the extent in an array\n * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the\n * real world\n *\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @param {boolean} [multiWorld] Return all worlds\n * @return {Array<Extent>} The extent within the real world extent.\n */\nexport function wrapAndSliceX(extent, projection, multiWorld) {\n  if (projection.canWrapX()) {\n    const projectionExtent = projection.getExtent();\n\n    if (!isFinite(extent[0]) || !isFinite(extent[2])) {\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n\n    wrapX(extent, projection);\n    const worldWidth = getWidth(projectionExtent);\n\n    if (getWidth(extent) > worldWidth && !multiWorld) {\n      // the extent wraps around on itself\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n    if (extent[0] < projectionExtent[0]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2], extent[3]],\n      ];\n    }\n    if (extent[2] > projectionExtent[2]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0], extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]],\n      ];\n    }\n  }\n\n  return [extent];\n}\n","/**\n * @module ol/math\n */\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>|null} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n  const n = mat.length;\n\n  for (let i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    let maxRow = i;\n    let maxEl = Math.abs(mat[i][i]);\n    for (let r = i + 1; r < n; r++) {\n      const absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    const tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (let j = i + 1; j < n; j++) {\n      const coef = -mat[j][i] / mat[i][i];\n      for (let k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  const x = new Array(n);\n  for (let l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (let m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n  return (angleInRadians * 180) / Math.PI;\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n  return (angleInDegrees * Math.PI) / 180;\n}\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n  const r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n\n/**\n * Returns a number with a limited number of decimal digits.\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The input number with a limited number of decimal digits.\n */\nexport function toFixed(n, decimals) {\n  const factor = Math.pow(10, decimals);\n  return Math.round(n * factor) / factor;\n}\n\n/**\n * Rounds a number to the nearest integer value considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The nearest integer.\n */\nexport function round(n, decimals) {\n  return Math.round(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next smaller integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next smaller integer.\n */\nexport function floor(n, decimals) {\n  return Math.floor(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next bigger integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next bigger integer.\n */\nexport function ceil(n, decimals) {\n  return Math.ceil(toFixed(n, decimals));\n}\n\n/**\n * Wraps a number between some minimum and maximum values.\n * @param {number} n The number to wrap.\n * @param {number} min The minimum of the range (inclusive).\n * @param {number} max The maximum of the range (exclusive).\n * @return {number} The wrapped number.\n */\nexport function wrap(n, min, max) {\n  if (n >= min && n < max) {\n    return n;\n  }\n  const range = max - min;\n  return ((((n - min) % range) + range) % range) + min;\n}\n","/**\n * @module ol/coordinate\n */\nimport {getWidth} from './extent.js';\nimport {modulo, toFixed} from './math.js';\nimport {padNumber} from './string.js';\n\n/**\n * An array of numbers representing an `xy`, `xyz` or `xyzm` coordinate.\n * Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */\n\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\nexport function add(coordinate, delta) {\n  coordinate[0] += +delta[0];\n  coordinate[1] += +delta[1];\n  return coordinate;\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */\nexport function closestOnCircle(coordinate, circle) {\n  const r = circle.getRadius();\n  const center = circle.getCenter();\n  const x0 = center[0];\n  const y0 = center[1];\n  const x1 = coordinate[0];\n  const y1 = coordinate[1];\n\n  let dx = x1 - x0;\n  const dy = y1 - y0;\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n  const d = Math.sqrt(dx * dx + dy * dy);\n\n  const x = x0 + (r * dx) / d;\n  const y = y0 + (r * dy) / d;\n\n  return [x, y];\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\nexport function closestOnSegment(coordinate, segment) {\n  const x0 = coordinate[0];\n  const y0 = coordinate[1];\n  const start = segment[0];\n  const end = segment[1];\n  const x1 = start[0];\n  const y1 = start[1];\n  const x2 = end[0];\n  const y2 = end[1];\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const along =\n    dx === 0 && dy === 0\n      ? 0\n      : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n  let x, y;\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n  return [x, y];\n}\n\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY();\n *     const out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY(2);\n *     const out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */\nexport function createStringXY(fractionDigits) {\n  return (\n    /**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n      return toStringXY(coordinate, fractionDigits);\n    }\n  );\n}\n\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\nexport function degreesToStringHDMS(hemispheres, degrees, fractionDigits) {\n  const normalizedDegrees = modulo(degrees + 180, 360) - 180;\n  const x = Math.abs(3600 * normalizedDegrees);\n  const decimals = fractionDigits || 0;\n\n  let deg = Math.floor(x / 3600);\n  let min = Math.floor((x - deg * 3600) / 60);\n  let sec = toFixed(x - deg * 3600 - min * 60, decimals);\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  let hdms = deg + '\\u00b0';\n  if (min !== 0 || sec !== 0) {\n    hdms += ' ' + padNumber(min, 2) + '\\u2032';\n  }\n  if (sec !== 0) {\n    hdms += ' ' + padNumber(sec, 2, decimals) + '\\u2033';\n  }\n  if (normalizedDegrees !== 0) {\n    hdms += ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\n  }\n\n  return hdms;\n}\n\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\nexport function format(coordinate, template, fractionDigits) {\n  if (coordinate) {\n    return template\n      .replace('{x}', coordinate[0].toFixed(fractionDigits))\n      .replace('{y}', coordinate[1].toFixed(fractionDigits));\n  }\n  return '';\n}\n\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\nexport function equals(coordinate1, coordinate2) {\n  let equals = true;\n  for (let i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n  return equals;\n}\n\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */\nexport function rotate(coordinate, angle) {\n  const cosAngle = Math.cos(angle);\n  const sinAngle = Math.sin(angle);\n  const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n}\n\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */\nexport function scale(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\nexport function squaredDistance(coord1, coord2) {\n  const dx = coord1[0] - coord2[0];\n  const dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\nexport function distance(coord1, coord2) {\n  return Math.sqrt(squaredDistance(coord1, coord2));\n}\n\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\nexport function squaredDistanceToSegment(coordinate, segment) {\n  return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\nexport function toStringHDMS(coordinate, fractionDigits) {\n  if (coordinate) {\n    return (\n      degreesToStringHDMS('NS', coordinate[1], fractionDigits) +\n      ' ' +\n      degreesToStringHDMS('EW', coordinate[0], fractionDigits)\n    );\n  }\n  return '';\n}\n\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\nexport function toStringXY(coordinate, fractionDigits) {\n  return format(coordinate, '{x}, {y}', fractionDigits);\n}\n\n/**\n * Modifies the provided coordinate in-place to be within the real world\n * extent. The lower projection extent boundary is inclusive, the upper one\n * exclusive.\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {Coordinate} The coordinate within the real world extent.\n */\nexport function wrapX(coordinate, projection) {\n  if (projection.canWrapX()) {\n    const worldWidth = getWidth(projection.getExtent());\n    const worldsAway = getWorldsAway(coordinate, projection, worldWidth);\n    if (worldsAway) {\n      coordinate[0] -= worldsAway * worldWidth;\n    }\n  }\n  return coordinate;\n}\n/**\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {number} [sourceExtentWidth] Width of the source extent.\n * @return {number} Offset in world widths.\n */\nexport function getWorldsAway(coordinate, projection, sourceExtentWidth) {\n  const projectionExtent = projection.getExtent();\n  let worldsAway = 0;\n  if (\n    projection.canWrapX() &&\n    (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])\n  ) {\n    sourceExtentWidth = sourceExtentWidth || getWidth(projectionExtent);\n    worldsAway = Math.floor(\n      (coordinate[0] - projectionExtent[0]) / sourceExtentWidth,\n    );\n  }\n  return worldsAway;\n}\n","/**\n * @module ol/proj/utm\n */\n\n/**\n * Adapted from https://github.com/Turbo87/utm\n * Copyright (c) 2012-2017 Tobias Bieniek\n *\n * The functions here provide approximate transforms to and from UTM.\n * They are not appropriate for use beyond the validity extend of a UTM\n * zone, and the accuracy of the transform decreases toward the zone\n * edges.\n */\n\nimport Projection from './Projection.js';\nimport {toDegrees, toRadians, wrap} from '../math.js';\n\n/**\n * @typedef {Object} UTMZone\n * @property {number} number The zone number (1 - 60).\n * @property {boolean} north The northern hemisphere.\n */\n\nconst K0 = 0.9996;\n\nconst E = 0.00669438;\nconst E2 = E * E;\nconst E3 = E2 * E;\nconst E_P2 = E / (1 - E);\n\nconst SQRT_E = Math.sqrt(1 - E);\nconst _E = (1 - SQRT_E) / (1 + SQRT_E);\nconst _E2 = _E * _E;\nconst _E3 = _E2 * _E;\nconst _E4 = _E3 * _E;\nconst _E5 = _E4 * _E;\n\nconst M1 = 1 - E / 4 - (3 * E2) / 64 - (5 * E3) / 256;\nconst M2 = (3 * E) / 8 + (3 * E2) / 32 + (45 * E3) / 1024;\nconst M3 = (15 * E2) / 256 + (45 * E3) / 1024;\nconst M4 = (35 * E3) / 3072;\n\nconst P2 = (3 / 2) * _E - (27 / 32) * _E3 + (269 / 512) * _E5;\nconst P3 = (21 / 16) * _E2 - (55 / 32) * _E4;\nconst P4 = (151 / 96) * _E3 - (417 / 128) * _E5;\nconst P5 = (1097 / 512) * _E4;\n\nconst R = 6378137;\n\n/**\n * @param {number} easting Easting value of coordinate.\n * @param {number} northing Northing value of coordinate.\n * @param {UTMZone} zone The UTM zone.\n * @return {import(\"../coordinate.js\").Coordinate} The transformed coordinate.\n */\nfunction toLonLat(easting, northing, zone) {\n  const x = easting - 500000;\n  const y = zone.north ? northing : northing - 10000000;\n\n  const m = y / K0;\n  const mu = m / (R * M1);\n\n  const pRad =\n    mu +\n    P2 * Math.sin(2 * mu) +\n    P3 * Math.sin(4 * mu) +\n    P4 * Math.sin(6 * mu) +\n    P5 * Math.sin(8 * mu);\n\n  const pSin = Math.sin(pRad);\n  const pSin2 = pSin * pSin;\n\n  const pCos = Math.cos(pRad);\n\n  const pTan = pSin / pCos;\n  const pTan2 = pTan * pTan;\n  const pTan4 = pTan2 * pTan2;\n\n  const epSin = 1 - E * pSin2;\n  const epSinSqrt = Math.sqrt(1 - E * pSin2);\n\n  const n = R / epSinSqrt;\n  const r = (1 - E) / epSin;\n\n  const c = E_P2 * pCos ** 2;\n  const c2 = c * c;\n\n  const d = x / (n * K0);\n  const d2 = d * d;\n  const d3 = d2 * d;\n  const d4 = d3 * d;\n  const d5 = d4 * d;\n  const d6 = d5 * d;\n\n  const latitude =\n    pRad -\n    (pTan / r) *\n      (d2 / 2 - (d4 / 24) * (5 + 3 * pTan2 + 10 * c - 4 * c2 - 9 * E_P2)) +\n    (d6 / 720) * (61 + 90 * pTan2 + 298 * c + 45 * pTan4 - 252 * E_P2 - 3 * c2);\n\n  let longitude =\n    (d -\n      (d3 / 6) * (1 + 2 * pTan2 + c) +\n      (d5 / 120) * (5 - 2 * c + 28 * pTan2 - 3 * c2 + 8 * E_P2 + 24 * pTan4)) /\n    pCos;\n\n  longitude = wrap(\n    longitude + toRadians(zoneToCentralLongitude(zone.number)),\n    -Math.PI,\n    Math.PI,\n  );\n\n  return [toDegrees(longitude), toDegrees(latitude)];\n}\n\nconst MIN_LATITUDE = -80;\nconst MAX_LATITUDE = 84;\nconst MIN_LONGITUDE = -180;\nconst MAX_LONGITUDE = 180;\n\n/**\n * @param {number} longitude The longitude.\n * @param {number} latitude The latitude.\n * @param {UTMZone} zone The UTM zone.\n * @return {import('../coordinate.js').Coordinate} The UTM coordinate.\n */\nfunction fromLonLat(longitude, latitude, zone) {\n  longitude = wrap(longitude, MIN_LONGITUDE, MAX_LONGITUDE);\n\n  if (latitude < MIN_LATITUDE) {\n    latitude = MIN_LATITUDE;\n  } else if (latitude > MAX_LATITUDE) {\n    latitude = MAX_LATITUDE;\n  }\n\n  const latRad = toRadians(latitude);\n  const latSin = Math.sin(latRad);\n  const latCos = Math.cos(latRad);\n\n  const latTan = latSin / latCos;\n  const latTan2 = latTan * latTan;\n  const latTan4 = latTan2 * latTan2;\n\n  const lonRad = toRadians(longitude);\n  const centralLon = zoneToCentralLongitude(zone.number);\n  const centralLonRad = toRadians(centralLon);\n\n  const n = R / Math.sqrt(1 - E * latSin ** 2);\n  const c = E_P2 * latCos ** 2;\n\n  const a = latCos * wrap(lonRad - centralLonRad, -Math.PI, Math.PI);\n  const a2 = a * a;\n  const a3 = a2 * a;\n  const a4 = a3 * a;\n  const a5 = a4 * a;\n  const a6 = a5 * a;\n\n  const m =\n    R *\n    (M1 * latRad -\n      M2 * Math.sin(2 * latRad) +\n      M3 * Math.sin(4 * latRad) -\n      M4 * Math.sin(6 * latRad));\n\n  const easting =\n    K0 *\n      n *\n      (a +\n        (a3 / 6) * (1 - latTan2 + c) +\n        (a5 / 120) * (5 - 18 * latTan2 + latTan4 + 72 * c - 58 * E_P2)) +\n    500000;\n\n  let northing =\n    K0 *\n    (m +\n      n *\n        latTan *\n        (a2 / 2 +\n          (a4 / 24) * (5 - latTan2 + 9 * c + 4 * c ** 2) +\n          (a6 / 720) * (61 - 58 * latTan2 + latTan4 + 600 * c - 330 * E_P2)));\n\n  if (!zone.north) {\n    northing += 10000000;\n  }\n\n  return [easting, northing];\n}\n\n/**\n * @param {number} zone The zone number.\n * @return {number} The central longitude in degrees.\n */\nfunction zoneToCentralLongitude(zone) {\n  return (zone - 1) * 6 - 180 + 3;\n}\n\n/**\n * @type {Array<RegExp>}\n */\nconst epsgRegExes = [\n  /^EPSG:(\\d+)$/,\n  /^urn:ogc:def:crs:EPSG::(\\d+)$/,\n  /^http:\\/\\/www\\.opengis\\.net\\/def\\/crs\\/EPSG\\/0\\/(\\d+)$/,\n];\n\n/**\n * @param {string} code The projection code.\n * @return {UTMZone|null} The UTM zone info (or null if not UTM).\n */\nexport function zoneFromCode(code) {\n  let epsgId = 0;\n  for (const re of epsgRegExes) {\n    const match = code.match(re);\n    if (match) {\n      epsgId = parseInt(match[1]);\n      break;\n    }\n  }\n  if (!epsgId) {\n    return null;\n  }\n\n  let number = 0;\n  let north = false;\n  if (epsgId > 32700 && epsgId < 32761) {\n    number = epsgId - 32700;\n  } else if (epsgId > 32600 && epsgId < 32661) {\n    north = true;\n    number = epsgId - 32600;\n  }\n  if (!number) {\n    return null;\n  }\n\n  return {number, north};\n}\n\n/**\n * @param {function(number, number, UTMZone): import('../coordinate.js').Coordinate} transformer The transformer.\n * @param {UTMZone} zone The UTM zone.\n * @return {import('../proj.js').TransformFunction} The transform function.\n */\nfunction makeTransformFunction(transformer, zone) {\n  return function (input, output, dimension, stride) {\n    const length = input.length;\n    dimension = dimension > 1 ? dimension : 2;\n    stride = stride ?? dimension;\n    if (!output) {\n      if (dimension > 2) {\n        output = input.slice();\n      } else {\n        output = new Array(length);\n      }\n    }\n    for (let i = 0; i < length; i += stride) {\n      const x = input[i];\n      const y = input[i + 1];\n      const coord = transformer(x, y, zone);\n      output[i] = coord[0];\n      output[i + 1] = coord[1];\n    }\n    return output;\n  };\n}\n\n/**\n * @param {string} code The projection code.\n * @return {import('./Projection.js').default|null} A projection or null if unable to create one.\n */\nexport function makeProjection(code) {\n  const zone = zoneFromCode(code);\n  if (!zone) {\n    return null;\n  }\n  return new Projection({code, units: 'm'});\n}\n\n/**\n * @param {import('./Projection.js').default} projection The projection.\n * @return {import('../proj.js').Transforms|null} The transforms lookup or null if unable to handle projection.\n */\nexport function makeTransforms(projection) {\n  const zone = zoneFromCode(projection.getCode());\n  if (!zone) {\n    return null;\n  }\n\n  return {\n    forward: makeTransformFunction(fromLonLat, zone),\n    inverse: makeTransformFunction(toLonLat, zone),\n  };\n}\n","/**\n * @module ol/proj\n */\n\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection~Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport Projection from './proj/Projection.js';\nimport {\n  PROJECTIONS as EPSG3857_PROJECTIONS,\n  fromEPSG4326,\n  toEPSG4326,\n} from './proj/epsg3857.js';\nimport {PROJECTIONS as EPSG4326_PROJECTIONS} from './proj/epsg4326.js';\nimport {METERS_PER_UNIT} from './proj/Units.js';\nimport {\n  add as addProj,\n  clear as clearProj,\n  get as getProj,\n} from './proj/projections.js';\nimport {\n  add as addTransformFunc,\n  clear as clearTransformFuncs,\n  get as getTransformFunc,\n} from './proj/transforms.js';\nimport {applyTransform, getWidth} from './extent.js';\nimport {clamp, modulo} from './math.js';\nimport {equals, getWorldsAway} from './coordinate.js';\nimport {getDistance} from './sphere.js';\nimport {\n  makeProjection as makeUTMProjection,\n  makeTransforms as makeUTMTransforms,\n} from './proj/utm.js';\nimport {warn} from './console.js';\n\n/**\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n\n/**\n * @typedef {Object} Transforms\n * @property {TransformFunction} forward The forward transform (from geographic).\n * @property {TransformFunction} inverse The inverse transform (to geographic).\n */\n\n/**\n * @type {Array<function(Projection): Transforms|null>}\n */\nconst transformFactories = [makeUTMTransforms];\n\n/**\n * @type {Array<function(string): Projection|null>}\n */\nconst projectionFactories = [makeUTMProjection];\n\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @callback TransformFunction\n * @param {Array<number>} input\n * @param {Array<number>} [output]\n * @param {number} [dimension]\n * @param {number} [stride]\n * @return {Array<number>}\n *\n * @api\n */\n\nexport {METERS_PER_UNIT};\n\nexport {Projection};\n\nlet showCoordinateWarning = true;\n\n/**\n * @param {boolean} [disable = true] Disable console info about `useGeographic()`\n */\nexport function disableCoordinateWarning(disable) {\n  const hide = disable === undefined ? true : disable;\n  showCoordinateWarning = !hide;\n}\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\nexport function cloneTransform(input, output) {\n  if (output !== undefined) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      output[i] = input[i];\n    }\n    output = output;\n  } else {\n    output = input.slice();\n  }\n  return output;\n}\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\nexport function identityTransform(input, output) {\n  if (output !== undefined && input !== output) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      output[i] = input[i];\n    }\n    input = output;\n  }\n  return input;\n}\n\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\nexport function addProjection(projection) {\n  addProj(projection.getCode(), projection);\n  addTransformFunc(projection, projection, cloneTransform);\n}\n\n/**\n * @param {Array<Projection>} projections Projections.\n */\nexport function addProjections(projections) {\n  projections.forEach(addProjection);\n}\n\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection|null} Projection object, or null if not in list.\n * @api\n */\nexport function get(projectionLike) {\n  if (!(typeof projectionLike === 'string')) {\n    return projectionLike;\n  }\n  const projection = getProj(projectionLike);\n  if (projection) {\n    return projection;\n  }\n  for (const makeProjection of projectionFactories) {\n    const projection = makeProjection(projectionLike);\n    if (projection) {\n      return projection;\n    }\n  }\n  return null;\n}\n\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the `point` pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {import(\"./proj/Units.js\").Units} [units] Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\nexport function getPointResolution(projection, resolution, point, units) {\n  projection = get(projection);\n  let pointResolution;\n  const getter = projection.getPointResolutionFunc();\n  if (getter) {\n    pointResolution = getter(resolution, point);\n    if (units && units !== projection.getUnits()) {\n      const metersPerUnit = projection.getMetersPerUnit();\n      if (metersPerUnit) {\n        pointResolution =\n          (pointResolution * metersPerUnit) / METERS_PER_UNIT[units];\n      }\n    }\n  } else {\n    const projUnits = projection.getUnits();\n    if ((projUnits == 'degrees' && !units) || units == 'degrees') {\n      pointResolution = resolution;\n    } else {\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\n      // measuring its width and height on the normal sphere, and taking the\n      // average of the width and height.\n      const toEPSG4326 = getTransformFromProjections(\n        projection,\n        get('EPSG:4326'),\n      );\n      if (!toEPSG4326 && projUnits !== 'degrees') {\n        // no transform is available\n        pointResolution = resolution * projection.getMetersPerUnit();\n      } else {\n        let vertices = [\n          point[0] - resolution / 2,\n          point[1],\n          point[0] + resolution / 2,\n          point[1],\n          point[0],\n          point[1] - resolution / 2,\n          point[0],\n          point[1] + resolution / 2,\n        ];\n        vertices = toEPSG4326(vertices, vertices, 2);\n        const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n        const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n        pointResolution = (width + height) / 2;\n      }\n      const metersPerUnit = units\n        ? METERS_PER_UNIT[units]\n        : projection.getMetersPerUnit();\n      if (metersPerUnit !== undefined) {\n        pointResolution /= metersPerUnit;\n      }\n    }\n  }\n  return pointResolution;\n}\n\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\nexport function addEquivalentProjections(projections) {\n  addProjections(projections);\n  projections.forEach(function (source) {\n    projections.forEach(function (destination) {\n      if (source !== destination) {\n        addTransformFunc(source, destination, cloneTransform);\n      }\n    });\n  });\n}\n\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\nexport function addEquivalentTransforms(\n  projections1,\n  projections2,\n  forwardTransform,\n  inverseTransform,\n) {\n  projections1.forEach(function (projection1) {\n    projections2.forEach(function (projection2) {\n      addTransformFunc(projection1, projection2, forwardTransform);\n      addTransformFunc(projection2, projection1, inverseTransform);\n    });\n  });\n}\n\n/**\n * Clear all cached projections and transforms.\n */\nexport function clearAllProjections() {\n  clearProj();\n  clearTransformFuncs();\n}\n\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\nexport function createProjection(projection, defaultCode) {\n  if (!projection) {\n    return get(defaultCode);\n  }\n  if (typeof projection === 'string') {\n    return get(projection);\n  }\n  return /** @type {Projection} */ (projection);\n}\n\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n  return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>} [output] Output.\n     * @param {number} [dimension] Dimensions that should be transformed.\n     * @param {number} [stride] Stride.\n     * @return {Array<number>} Output.\n     */\n    function (input, output, dimension, stride) {\n      const length = input.length;\n      dimension = dimension !== undefined ? dimension : 2;\n      stride = stride ?? dimension;\n      output = output !== undefined ? output : new Array(length);\n      for (let i = 0; i < length; i += stride) {\n        const point = coordTransform(input.slice(i, i + dimension));\n        const pointLength = point.length;\n        for (let j = 0, jj = stride; j < jj; ++j) {\n          output[i + j] = j >= pointLength ? input[i + j] : point[j];\n        }\n      }\n      return output;\n    }\n  );\n}\n\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only\n *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate\n *     with only the length it can transform. The other dimensions will be taken unchanged from the\n *     source.\n * @api\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n  const sourceProj = get(source);\n  const destProj = get(destination);\n  addTransformFunc(\n    sourceProj,\n    destProj,\n    createTransformFromCoordinateTransform(forward),\n  );\n  addTransformFunc(\n    destProj,\n    sourceProj,\n    createTransformFromCoordinateTransform(inverse),\n  );\n}\n\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike} [projection] Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\nexport function fromLonLat(coordinate, projection) {\n  disableCoordinateWarning();\n  return transform(\n    coordinate,\n    'EPSG:4326',\n    projection !== undefined ? projection : 'EPSG:3857',\n  );\n}\n\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike} [projection] Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\nexport function toLonLat(coordinate, projection) {\n  const lonLat = transform(\n    coordinate,\n    projection !== undefined ? projection : 'EPSG:3857',\n    'EPSG:4326',\n  );\n  const lon = lonLat[0];\n  if (lon < -180 || lon > 180) {\n    lonLat[0] = modulo(lon + 180, 360) - 180;\n  }\n  return lonLat;\n}\n\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\nexport function equivalent(projection1, projection2) {\n  if (projection1 === projection2) {\n    return true;\n  }\n  const equalUnits = projection1.getUnits() === projection2.getUnits();\n  if (projection1.getCode() === projection2.getCode()) {\n    return equalUnits;\n  }\n  const transformFunc = getTransformFromProjections(projection1, projection2);\n  return transformFunc === cloneTransform && equalUnits;\n}\n\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} source Source Projection object.\n * @param {Projection} destination Destination Projection\n *     object.\n * @return {TransformFunction|null} Transform function.\n */\nexport function getTransformFromProjections(source, destination) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  let transformFunc = getTransformFunc(sourceCode, destinationCode);\n  if (transformFunc) {\n    return transformFunc;\n  }\n\n  /**\n   * @type {Transforms|null}\n   */\n  let sourceTransforms = null;\n\n  /**\n   * @type {Transforms|null}\n   */\n  let destinationTransforms = null;\n\n  // lazily add projections if we have supported transforms\n  for (const makeTransforms of transformFactories) {\n    if (!sourceTransforms) {\n      sourceTransforms = makeTransforms(source);\n    }\n    if (!destinationTransforms) {\n      destinationTransforms = makeTransforms(destination);\n    }\n  }\n\n  if (!sourceTransforms && !destinationTransforms) {\n    return null;\n  }\n\n  const intermediateCode = 'EPSG:4326';\n  if (!destinationTransforms) {\n    const toDestination = getTransformFunc(intermediateCode, destinationCode);\n    if (toDestination) {\n      transformFunc = composeTransformFuncs(\n        sourceTransforms.inverse,\n        toDestination,\n      );\n    }\n  } else if (!sourceTransforms) {\n    const fromSource = getTransformFunc(sourceCode, intermediateCode);\n    if (fromSource) {\n      transformFunc = composeTransformFuncs(\n        fromSource,\n        destinationTransforms.forward,\n      );\n    }\n  } else {\n    transformFunc = composeTransformFuncs(\n      sourceTransforms.inverse,\n      destinationTransforms.forward,\n    );\n  }\n\n  if (transformFunc) {\n    addProjection(source);\n    addProjection(destination);\n    addTransformFunc(source, destination, transformFunc);\n  }\n\n  return transformFunc;\n}\n\n/**\n * @param {TransformFunction} t1 The first transform function.\n * @param {TransformFunction} t2 The second transform function.\n * @return {TransformFunction} The composed transform function.\n */\nfunction composeTransformFuncs(t1, t2) {\n  return function (input, output, dimensions, stride) {\n    output = t1(input, output, dimensions, stride);\n    return t2(output, output, dimensions, stride);\n  };\n}\n\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\nexport function getTransform(source, destination) {\n  const sourceProjection = get(source);\n  const destinationProjection = get(destination);\n  return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original). If there\n * is no available transform between the two projection, the function will throw\n * an error.\n *\n * See {@link module:ol/proj.transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\nexport function transform(coordinate, source, destination) {\n  const transformFunc = getTransform(source, destination);\n  if (!transformFunc) {\n    const sourceCode = get(source).getCode();\n    const destinationCode = get(destination).getCode();\n    throw new Error(\n      `No transform available between ${sourceCode} and ${destinationCode}`,\n    );\n  }\n  return transformFunc(coordinate, undefined, coordinate.length);\n}\n\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\nexport function transformExtent(extent, source, destination, stops) {\n  const transformFunc = getTransform(source, destination);\n  return applyTransform(extent, transformFunc, undefined, stops);\n}\n\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\nexport function transformWithProjections(\n  point,\n  sourceProjection,\n  destinationProjection,\n) {\n  const transformFunc = getTransformFromProjections(\n    sourceProjection,\n    destinationProjection,\n  );\n  return transformFunc(point);\n}\n\n/**\n * @type {Projection|null}\n */\nlet userProjection = null;\n\n/**\n * Set the projection for coordinates supplied from and returned by API methods.\n * This includes all API methods except for those interacting with tile grids,\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\n * @param {ProjectionLike} projection The user projection.\n * @api\n */\nexport function setUserProjection(projection) {\n  userProjection = get(projection);\n}\n\n/**\n * Clear the user projection if set.\n * @api\n */\nexport function clearUserProjection() {\n  userProjection = null;\n}\n\n/**\n * Get the projection for coordinates supplied from and returned by API methods.\n * @return {Projection|null} The user projection (or null if not set).\n * @api\n */\nexport function getUserProjection() {\n  return userProjection;\n}\n\n/**\n * Use geographic coordinates (WGS-84 datum) in API methods.\n * This includes all API methods except for those interacting with tile grids,\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\n * @api\n */\nexport function useGeographic() {\n  setUserProjection('EPSG:4326');\n}\n\n/**\n * Return a coordinate transformed into the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\n * @return {Array<number>} The input coordinate in the user projection.\n */\nexport function toUserCoordinate(coordinate, sourceProjection) {\n  if (!userProjection) {\n    return coordinate;\n  }\n  return transform(coordinate, sourceProjection, userProjection);\n}\n\n/**\n * Return a coordinate transformed from the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {Array<number>} The input coordinate transformed.\n */\nexport function fromUserCoordinate(coordinate, destProjection) {\n  if (!userProjection) {\n    if (\n      showCoordinateWarning &&\n      !equals(coordinate, [0, 0]) &&\n      coordinate[0] >= -180 &&\n      coordinate[0] <= 180 &&\n      coordinate[1] >= -90 &&\n      coordinate[1] <= 90\n    ) {\n      showCoordinateWarning = false;\n      warn(\n        'Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.',\n      );\n    }\n    return coordinate;\n  }\n  return transform(coordinate, userProjection, destProjection);\n}\n\n/**\n * Return an extent transformed into the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} sourceProjection The input extent projection.\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\n */\nexport function toUserExtent(extent, sourceProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, sourceProjection, userProjection);\n}\n\n/**\n * Return an extent transformed from the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\n */\nexport function fromUserExtent(extent, destProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, userProjection, destProjection);\n}\n\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in input projection units per pixel.\n * @param {ProjectionLike} sourceProjection The input projection.\n * @return {number} Resolution in user projection units per pixel.\n */\nexport function toUserResolution(resolution, sourceProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  const sourceMetersPerUnit = get(sourceProjection).getMetersPerUnit();\n  const userMetersPerUnit = userProjection.getMetersPerUnit();\n  return sourceMetersPerUnit && userMetersPerUnit\n    ? (resolution * sourceMetersPerUnit) / userMetersPerUnit\n    : resolution;\n}\n\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in user projection units per pixel.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {number} Resolution in destination projection units per pixel.\n */\nexport function fromUserResolution(resolution, destProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  const destMetersPerUnit = get(destProjection).getMetersPerUnit();\n  const userMetersPerUnit = userProjection.getMetersPerUnit();\n  return destMetersPerUnit && userMetersPerUnit\n    ? (resolution * userMetersPerUnit) / destMetersPerUnit\n    : resolution;\n}\n\n/**\n * Creates a safe coordinate transform function from a coordinate transform function.\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\n * and that coordinates exceeding the source projection validity extent's range will be\n * clamped to the validity range.\n * @param {Projection} sourceProj Source projection.\n * @param {Projection} destProj Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destination).\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destination).\n */\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\n  return function (coord) {\n    let transformed, worldsAway;\n    if (sourceProj.canWrapX()) {\n      const sourceExtent = sourceProj.getExtent();\n      const sourceExtentWidth = getWidth(sourceExtent);\n      coord = coord.slice(0);\n      worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\n      if (worldsAway) {\n        // Move x to the real world\n        coord[0] = coord[0] - worldsAway * sourceExtentWidth;\n      }\n      coord[0] = clamp(coord[0], sourceExtent[0], sourceExtent[2]);\n      coord[1] = clamp(coord[1], sourceExtent[1], sourceExtent[3]);\n      transformed = transform(coord);\n    } else {\n      transformed = transform(coord);\n    }\n    if (worldsAway && destProj.canWrapX()) {\n      // Move transformed coordinate back to the offset world\n      transformed[0] += worldsAway * getWidth(destProj.getExtent());\n    }\n    return transformed;\n  };\n}\n\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\nexport function addCommon() {\n  // Add transformations that don't alter coordinates to convert within set of\n  // projections with equal meaning.\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n  // coordinates and back.\n  addEquivalentTransforms(\n    EPSG4326_PROJECTIONS,\n    EPSG3857_PROJECTIONS,\n    fromEPSG4326,\n    toEPSG4326,\n  );\n}\n\naddCommon();\n","/**\n * @module ol/proj/proj4\n */\nimport Projection from './Projection.js';\nimport {\n  addCoordinateTransforms,\n  addEquivalentProjections,\n  addProjection,\n  createSafeCoordinateTransform,\n} from '../proj.js';\nimport {get as getCachedProjection} from './projections.js';\nimport {get as getTransform} from './transforms.js';\n\n/**\n * @type {import(\"proj4\")|null}\n */\nlet registered = null;\n\n/**\n * @return {boolean} Proj4 has been registered.\n */\nexport function isRegistered() {\n  return !!registered;\n}\n\n/**\n * Unsets the shared proj4 previously set with register.\n */\nexport function unregister() {\n  registered = null;\n}\n\n/**\n * Make projections defined in proj4 (with `proj4.defs()`) available in\n * OpenLayers. Requires proj4 >= 2.8.0.\n *\n * This function should be called whenever changes are made to the proj4\n * registry, e.g. after calling `proj4.defs()`. Existing transforms will not be\n * modified by this function.\n *\n * @param {import(\"proj4\")} proj4 Proj4.\n * @api\n */\nexport function register(proj4) {\n  registered = proj4;\n\n  const projCodes = Object.keys(proj4.defs);\n  const len = projCodes.length;\n  let i, j;\n  for (i = 0; i < len; ++i) {\n    const code = projCodes[i];\n    if (!getCachedProjection(code)) {\n      const def = proj4.defs(code);\n      let units = /** @type {import(\"./Units.js\").Units} */ (def.units);\n      if (!units && def.projName === 'longlat') {\n        units = 'degrees';\n      }\n      addProjection(\n        new Projection({\n          code: code,\n          axisOrientation: def.axis,\n          metersPerUnit: def.to_meter,\n          units,\n        }),\n      );\n    }\n  }\n  for (i = 0; i < len; ++i) {\n    const code1 = projCodes[i];\n    const proj1 = getCachedProjection(code1);\n    for (j = 0; j < len; ++j) {\n      const code2 = projCodes[j];\n      const proj2 = getCachedProjection(code2);\n      if (!getTransform(code1, code2)) {\n        if (proj4.defs[code1] === proj4.defs[code2]) {\n          addEquivalentProjections([proj1, proj2]);\n        } else {\n          const transform = proj4(code1, code2);\n          addCoordinateTransforms(\n            proj1,\n            proj2,\n            createSafeCoordinateTransform(proj1, proj2, transform.forward),\n            createSafeCoordinateTransform(proj2, proj1, transform.inverse),\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {number} code The EPSG code.\n * @return {Promise<string>} The proj4 definition.\n */\nlet epsgLookup = async function (code) {\n  const response = await fetch(`https://epsg.io/${code}.proj4`);\n  if (!response.ok) {\n    throw new Error(`Unexpected response from epsg.io: ${response.status}`);\n  }\n  return response.text();\n};\n\n/**\n * Set the lookup function for getting proj4 definitions given an EPSG code.\n * By default, the {@link module:ol/proj/proj4.fromEPSGCode} function uses the\n * epsg.io website for proj4 definitions.  This can be changed by providing a\n * different lookup function.\n *\n * @param {function(number):Promise<string>} func The lookup function.\n * @api\n */\nexport function setEPSGLookup(func) {\n  epsgLookup = func;\n}\n\n/**\n * Get the current EPSG lookup function.\n *\n * @return {function(number):Promise<string>} The EPSG lookup function.\n */\nexport function getEPSGLookup() {\n  return epsgLookup;\n}\n\n/**\n * Get a projection from an EPSG code.  This function fetches the projection\n * definition from the epsg.io website, registers this definition for use with\n * proj4, and returns a configured projection.  You must call import proj4 and\n * call {@link module:ol/proj/proj4.register} before using this function.\n *\n * If the projection definition is already registered with proj4, it will not\n * be fetched again (so it is ok to call this function multiple times with the\n * same code).\n *\n * @param {number|string} code The EPSG code (e.g. 4326 or 'EPSG:4326').\n * @return {Promise<Projection>} The projection.\n * @api\n */\nexport async function fromEPSGCode(code) {\n  if (typeof code === 'string') {\n    code = parseInt(code.split(':').pop(), 10);\n  }\n\n  const proj4 = registered;\n  if (!proj4) {\n    throw new Error('Proj4 must be registered first with register(proj4)');\n  }\n\n  const epsgCode = 'EPSG:' + code;\n  if (proj4.defs(epsgCode)) {\n    return getCachedProjection(epsgCode);\n  }\n\n  proj4.defs(epsgCode, await epsgLookup(code));\n  register(proj4);\n\n  return getCachedProjection(epsgCode);\n}\n\n/**\n * Generate an EPSG lookup function which uses the MapTiler Coordinates API to find projection\n * definitions which do not require proj4 to be configured to handle `+nadgrids` parameters.\n * Call {@link module:ol/proj/proj4.setEPSGLookup} use the function for lookups\n * `setEPSGLookup(epsgLookupMapTiler('{YOUR_MAPTILER_API_KEY_HERE}'))`.\n *\n * @param {string} key MapTiler API key.  Get your own API key at https://www.maptiler.com/cloud/.\n * @return {function(number):Promise<string>} The EPSG lookup function.\n * @api\n */\nexport function epsgLookupMapTiler(key) {\n  return async function (code) {\n    const response = await fetch(\n      `https://api.maptiler.com/coordinates/search/code:${code}.json?transformations=true&exports=true&key=${key}`,\n    );\n    if (!response.ok) {\n      throw new Error(\n        `Unexpected response from maptiler.com: ${response.status}`,\n      );\n    }\n    return response.json().then((json) => {\n      const results = json['results'];\n      if (results?.length > 0) {\n        const result = results.filter(\n          (r) =>\n            r['id']?.['authority'] === 'EPSG' && r['id']?.['code'] === code,\n        )[0];\n        if (result) {\n          const transforms = result['transformations'];\n          if (transforms?.length > 0) {\n            // use default transform if it does not require grids\n            const defaultTransform = result['default_transformation'];\n            if (\n              transforms.filter(\n                (t) =>\n                  t['id']?.['authority'] === defaultTransform?.['authority'] &&\n                  t['id']?.['code'] === defaultTransform?.['code'] &&\n                  t['grids']?.length === 0,\n              ).length > 0\n            ) {\n              return result['exports']?.['proj4'];\n            }\n            // otherwise use most accurate alternative without grids\n            const transform = transforms\n              .filter(\n                (t) =>\n                  t['grids']?.length === 0 &&\n                  t['target_crs']?.['authority'] === 'EPSG' &&\n                  t['target_crs']?.['code'] === 4326 &&\n                  t['deprecated'] === false &&\n                  t['usable'] === true,\n              )\n              .sort((t1, t2) => t1['accuracy'] - t2['accuracy'])[0]?.[\n              'exports'\n            ]?.['proj4'];\n            if (transform) {\n              return transform;\n            }\n          }\n          // fallback to default\n          return result['exports']?.['proj4'];\n        }\n      }\n    });\n  };\n}\n","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nexport { _createClass as default };","/**\n * Represents the log levels available for logging.\n */\nexport type WorkerLogLevel = 'info' | 'warning' | 'error' | 'debug' | 'trace';\n\n/**\n * WorkerLogger class for handling logging in a worker context.\n *\n * This logger allows for centralized logging from workers back to the main thread,\n * maintaining a consistent logging interface across the application.\n */\nclass WorkerLogger {\n  #prefix: string;\n\n  /**\n   * Creates an instance of WorkerLogger.\n   * @param {string} [prefix=''] - The prefix to be added to all log messages.\n   */\n  constructor(prefix: string = '') {\n    this.#prefix = prefix;\n  }\n\n  /**\n   * Internal method to send log messages to the main thread.\n   * @private\n   * @param {WorkerLogLevel} level - The log level of the message.\n   * @param {...unknown[]} args - The message and any additional arguments to log.\n   */\n  #log(level: WorkerLogLevel, ...args: unknown[]): void {\n    const message = this.#prefix ? [this.#prefix, ...args] : args;\n    // Send the log message to the main thread\n    // eslint-disable-next-line no-restricted-globals\n    self.postMessage({\n      type: 'log',\n      level,\n      message,\n    });\n  }\n\n  /**\n   * Logs an informational message.\n   * @param {...unknown[]} args - The message and any additional arguments to log.\n   */\n  logInfo(...args: unknown[]): void {\n    this.#log('info', ...args);\n  }\n\n  /**\n   * Logs a warning message.\n   * @param {...unknown[]} args - The message and any additional arguments to log.\n   */\n  logWarning(...args: unknown[]): void {\n    this.#log('warning', ...args);\n  }\n\n  /**\n   * Logs an error message.\n   * @param {...unknown[]} args - The message and any additional arguments to log.\n   */\n  logError(...args: unknown[]): void {\n    this.#log('error', ...args);\n  }\n\n  /**\n   * Logs a debug message.\n   * @param {...unknown[]} args - The message and any additional arguments to log.\n   */\n  logDebug(...args: unknown[]): void {\n    this.#log('debug', ...args);\n  }\n\n  /**\n   * Logs a trace message.\n   * @param {...unknown[]} args - The message and any additional arguments to log.\n   */\n  logTrace(...args: unknown[]): void {\n    this.#log('trace', ...args);\n  }\n}\n\n/**\n * Creates and returns a new WorkerLogger instance.\n * @param {string} [prefix] - Optional prefix for all log messages from this logger.\n * @returns {WorkerLogger} A new WorkerLogger instance.\n */\nexport const createWorkerLogger = (prefix?: string): WorkerLogger => new WorkerLogger(prefix);\n","function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _classCallCheck as default };","import { expose } from 'comlink';\nimport proj4 from 'proj4';\nimport { register } from 'ol/proj/proj4';\nimport { Coordinate } from 'ol/coordinate';\n\nimport { createWorkerLogger } from '@/core/workers/helper/logger-worker';\nimport { TypeJsonObject } from '@/api/config/types/config-types';\n\n/**\n * This worker script is designed to be used with the JsonExportWorker class.\n * It handles the transformation of GeoJSON features from one coordinate system to another.\n *\n * The main operations are:\n * 1. Initialization: Set up the source and target coordinate reference systems.\n * 2. Processing: Transform chunks of GeoJSON features, converting their geometries.\n *\n * The worker uses proj4 for coordinate transformations and includes a custom\n * definition for the EPSG:3978 projection.\n */\n\ntype TypeWorkerExportGeometry = {\n  type: string;\n  coordinates: Coordinate | Coordinate[] | Coordinate[][] | Coordinate[][][];\n};\n\n// Type related to the worker\nexport type TypeWorkerExportChunk = {\n  geometry: TypeJsonObject;\n  properties: {\n    [k: string]: unknown;\n  };\n};\nexport type TypeWorkerExportProjectionInfo = {\n  sourceCRS: string;\n  targetCRS: string;\n};\n\n// Initialize the worker logger\nconst logger = createWorkerLogger('json-export-worker');\n\n// Variables to store the source and target coordinate reference systems\nlet sourceCRS: string;\nlet targetCRS: string;\n\n// Register the EPSG:3978 projection. This is needed because wroker does not work on same thread as main\n// and do not have access to our already define proj4 version.\nproj4.defs(\n  'EPSG:3978',\n  '+proj=lcc +lat_1=49 +lat_2=77 +lat_0=49 +lon_0=-95 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs'\n);\nregister(proj4);\n\n/**\n * Transforms an array of points from the source CRS to the target CRS.\n * @param {Coordinate[]} points - Array of points coordinates to transform.\n * @returns {Coordinate[]} Array of transformed points coordinates.\n */\nfunction transformPoints(points: Coordinate[]): Coordinate[] {\n  const converted: Array<Array<number>> = [];\n\n  if (Array.isArray(points) && points.length > 0) {\n    if (Array.isArray(points[0])) {\n      for (let i = 0; i < points.length; i++) {\n        const coords = proj4(sourceCRS, targetCRS, points[i]);\n        converted.push(coords);\n      }\n    }\n  }\n\n  return converted;\n}\n\n/**\n * Transforms the geometry of a GeoJSON feature.\n * @param {TypeWorkerExportGeometry} geometry - The geometry to transform.\n * @returns {TypeJsonObject} The transformed geometry.\n */\nfunction transformGeometry(geometry: TypeWorkerExportGeometry): TypeJsonObject {\n  const { type, coordinates } = geometry;\n\n  let transformedGeometry = {};\n  if (type === 'Polygon') {\n    // coordinates are in the form of Coordinate[][]\n    transformedGeometry = {\n      type: 'Polygon',\n      coordinates: (coordinates as Coordinate[][]).map((coords: Coordinate[]) => {\n        return coords.map((coord: Coordinate) => transformPoints([coord])[0]);\n      }),\n    };\n  } else if (type === 'MultiPolygon') {\n    // coordinates are in the form of Coordinate[][][]\n    transformedGeometry = {\n      type: 'MultiPolygon',\n      coordinates: (coordinates as Coordinate[][][]).map((coords1: Coordinate[][]) => {\n        return coords1.map((coords2: Coordinate[]) => {\n          return coords2.map((coord: Coordinate) => transformPoints([coord])[0]);\n        });\n      }),\n    };\n  } else if (type === 'LineString') {\n    // coordinates are in the form of Coordinate[]\n    transformedGeometry = {\n      type: 'LineString',\n      coordinates: (coordinates as Coordinate[]).map((coord: Coordinate) => transformPoints([coord])[0]),\n    };\n  } else if (type === 'MultiLineString') {\n    // coordinates are in the form of Coordinate[][]\n    transformedGeometry = {\n      type: 'MultiLineString',\n      coordinates: (coordinates as Coordinate[][]).map((coords: Coordinate[]) => {\n        return coords.map((coord: Coordinate) => transformPoints([coord])[0]);\n      }),\n    };\n  } else if (type === 'Point') {\n    // coordinates are in the form of Coordinate\n    transformedGeometry = { type: 'Point', coordinates: transformPoints([coordinates as Coordinate])[0] };\n  } else if (type === 'MultiPoint') {\n    // coordinates are in the form of Coordinate[]\n    transformedGeometry = {\n      type: 'MultiPoint',\n      coordinates: (coordinates as Coordinate[]).map((coord: Coordinate) => transformPoints([coord])[0]),\n    };\n  }\n\n  return transformedGeometry;\n}\n\n/**\n * The main worker object containing methods for initialization and processing.\n */\nconst worker = {\n  /**\n   * Initializes the worker with projection information.\n   * @param {TypeWorkerExportProjectionInfo} projectionInfo - The projection information.\n   */\n  init(projectionInfo: TypeWorkerExportProjectionInfo) {\n    try {\n      sourceCRS = projectionInfo.sourceCRS;\n      targetCRS = projectionInfo.targetCRS;\n      logger.logTrace('init worker', `Worker initialized with sourceCRS: ${sourceCRS}, targetCRS: ${targetCRS}`);\n    } catch (error) {\n      logger.logError('init worker', error);\n    }\n  },\n\n  /**\n   * Processes a chunk of GeoJSON features, transforming their geometries.\n   * @param {TypeWorkerExportChunk[]} chunk - The chunk of GeoJSON features to process.\n   * @param {boolean} isFirst - Indicates if this is the first chunk of the dataset.\n   * @returns {string} A JSON string of the processed features.\n   */\n  process(chunk: TypeWorkerExportChunk[], isFirst: boolean): string {\n    try {\n      logger.logTrace('process worker', `Processing chunk of ${chunk.length} items`);\n      let result = '';\n      if (isFirst) {\n        result += '{\"type\":\"FeatureCollection\",\"features\":[';\n      } else if (chunk.length > 0) {\n        result += ',';\n      }\n\n      const processedChunk = chunk.map((feature: TypeWorkerExportChunk) => {\n        const { geometry, properties } = feature;\n        const transformedGeometry = transformGeometry(geometry as unknown as TypeWorkerExportGeometry);\n        return JSON.stringify({\n          type: 'Feature',\n          geometry: transformedGeometry,\n          properties,\n        });\n      });\n\n      result += processedChunk.join(',');\n\n      logger.logTrace('process worker', `Finished processing`);\n      return result;\n    } catch (error) {\n      logger.logError('process worker', error);\n      return '';\n    }\n  },\n};\n\n// Expose the worker methods to be accessible from the main thread\nexpose(worker);\nexport default {} as typeof Worker & { new (): Worker };\n"],"names":["proxyMarker","Symbol","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","proxyTransferHandler","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","ep","target","pendingListeners","Map","addEventListener","ev","data","id","resolver","get","delete","createProxy","wrap","transferHandlers","value","serialized","Error","isError","message","name","stack","Object","assign","globalThis","allowedOrigins","callback","origin","allowedOrigin","RegExp","test","isAllowedOrigin","console","warn","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","set","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","error","TypeError","endpoint","constructor","isMessagePort","close","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","isProxyReleased","Proxy","_target","unregister","unregisterProxy","clear","length","r","p","toString","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","Array","prototype","concat","handler","serializedValue","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","SRS_WGS84_SEMIMAJOR","SRS_WGS84_ESQUARED","SEC_TO_RAD","HALF_PI","PI","EPSLN","D2R","R2D","FORTPI","TWO_PI","SPI","to_meter","ignoredChar","match","key","testkey","keys","lkey","toLowerCase","replace","i","defData","paramName","paramVal","paramOutname","self","paramObj","split","trim","filter","a","push","params","proj","datum","rf","parseFloat","lat_0","lat0","lat_1","lat1","lat_2","lat2","lat_ts","lon_0","long0","lon_1","long1","lon_2","long2","alpha","gamma","rectified_grid_angle","lonc","longc","x_0","x0","y_0","y0","k_0","k0","k","b","r_a","R_A","zone","parseInt","south","utmSouth","towgs84","datum_params","units","unit","from_greenwich","pm","nadgrids","datumCode","axis","legalAxis","indexOf","substr","approx","txt","parser","Parser","output","NEUTRAL","whitespace","latin","keyword","endThings","digets","text","this","level","place","root","currentObject","state","mapit","isArray","unshift","thing","out","newObj","item","sExpr","shift","convert","readCharicter","char","neutral","quoted","afterquote","number","word","afterItem","pop","newObjects","knownTypes","d2r","input","cleanWKT","wkt","ii","setPropertiesFromWkt","AUTHORITY","authority","title","projName","local","PROJECTION","AXIS","axisOrder","UNIT","DATUM","SPHEROID","geogcs","GEOGCS","toMeter","sphere","ellps","TOWGS84","isFinite","forEach","outName","inName","rename","lisp","defs","that","arguments","def","charAt","EPSG","ESRI","IAU2000","log","WGS84","GOOGLE","global","codeWords","codes","code","testObj","testDef","some","testWKT","auth","checkMercator","maybeProjStr","ext","checkProjStr","testProj","destination","source","property","eccent","sinphi","cosphi","con","sqrt","x","abs","sign","phi","com","pow","tan","ts","dphi","eccnth","atan","sin","identity","pt","projs","init","es","e","cos","msfnz","forward","y","lon","lat","adjust_lon","tsfnz","inverse","exp","phi2z","names","projStore","add","len","n","ellipseName","datums","wgs84","ellipse","datumName","ch1903","ggrs87","nad83","nad27","potsdam","carthage","hermannskogel","mgi","osni52","ire65","rassadiran","nzgd49","osgb36","s_jtsk","beduaram","gunung_segara","rnb72","ep2","datum_type","grids","loadedNadgrids","parseNadgridString","optional","mandatory","grid","isNull","secondsToRadians","seconds","decodeString","view","end","String","fromCharCode","Uint8Array","buffer","mapNodes","nodes","longitudeShift","latitudeShift","readGridHeader","offset","isLittleEndian","lowerLatitude","getFloat64","upperLatitude","lowerLongitude","upperLongitude","latitudeInterval","longitudeInterval","gridNodeCount","getInt32","readGridNodes","gridHeader","nodesOffset","gridShiftRecords","record","getFloat32","latitudeAccuracy","longitudeAccuracy","Projection","srsCode","json","parseCode","ourProj","projections","datumDef","Datum","a2","b2","sphere_","ecc","getNadgrids","datumObj","extend","geodeticToGeocentric","Rn","Sin_Lat","Sin2_Lat","Cos_Lat","Longitude","Latitude","Height","z","Infinity","geocentricToGeodetic","P","RR","CT","ST","RX","RK","RN","CPHI0","SPHI0","CPHI","SPHI","SDPHI","iter","genau","X","Y","Z","atan2","checkParams","dest","point","compareDatums","source_a","source_es","applyGridShift","dest_a","dest_b","dest_es","Dx_BF","Dy_BF","Dz_BF","Rx_BF","Ry_BF","Rz_BF","M_BF","geocentricToWgs84","x_tmp","y_tmp","z_tmp","geocentricFromWgs84","NaN","attemptedGrids","outer","subgrids","j","jj","subgrid","epsilon","del","minX","ll","minY","maxX","lim","maxY","applySubgridShift","isNaN","pin","ct","tb","t","nadInterpolate","dif","inx","indx","frct","f00","cvs","f10","f11","f01","m11","m10","m00","m01","crs","denorm","xin","yin","zin","array","m","checkCoord","num","transform","enforceAxis","hasZ","toPoint","checkSanity","checkNotWGS","adjust_axis","datum_transform","transformer","from","to","coords","transformedArray","checkProj","oProj","fromProj","toProj","coord","single","SET_ORIGIN_COLUMN_LETTERS","SET_ORIGIN_ROW_LETTERS","A","I","O","V","mgrs","bbox","UTMtoLL","decode","toUpperCase","left","bottom","right","top","accuracy","utm","seasting","easting","snorthing","northing","zoneNumber","zoneLetter","setParm","get100kSetForZone","setColumn","setRow","column","row","parm","index","colOrigin","charCodeAt","rowOrigin","colInt","rowInt","rollover","encode","eccPrimeSquared","N","T","C","M","LongOriginRad","ZoneNumber","Lat","Long","eccSquared","LatRad","degToRad","LongRad","UTMEasting","UTMNorthing","round","getLetterDesignator","LLtoUTM","deg","radToDeg","rad","N1","T1","C1","R1","D","LongOrigin","mu","phi1Rad","e1","result","topRight","LetterDesignator","mgrsString","testChar","hunK","sb","substring","east100k","curCol","eastingValue","rewindMarker","getEastingFromChar","north100k","curRow","northingValue","getNorthingFromChar","getMinNorthing","remainder","accuracyBonus","sepEastingString","sepNorthingString","sep","sepEasting","sepNorthing","Point","fromMGRS","mgrsStr","toMGRS","C04","C06","C08","en","sphi","cphi","arg","s","pj_mlfn","pj_enfn","ml0","delta_lon","sin_phi","cos_phi","al","als","c","cs","tq","ml","acos","pj_inv_mlfn","tan_phi","d","ds","f","g","temp","h","asin","max","min","log1py","hypot","pp","B","cos_2B","h1","h2","arg_r","arg_i","hr2","hi2","sin_arg_r","cos_arg_r","sinh_arg_i","sinh","cosh_arg_i","cosh","hr","hi1","hr1","hi","tmerc","cgb","cbg","utg","gtu","np","Qn","gatg","Zb","clens","Ce","Cn","sin_Cn","cos_Cn","sin_Ce","cos_Ce","asinhy","tmp","clens_cmplx","adjust_zone","etmerc","dependsOn","esinp","rc","phic0","ratexp","K","srat","gauss","sinc0","cosc0","R2","sinc","cosc","cosl","rho","coslat0","sinlat0","cons","ms1","X0","ssfn_","cosX0","sinX0","sinX","cosX","rh","sinlat","coslat","dlon","ce","Chi","phit","eccen","phy0","lambda0","sinPhy0","semiMajorAxis","flattening","e2","R","b0","k1","k2","k3","Sa1","Sa2","S","rotI","rotB","lambda","phy","prevPhy","iteration","TOL","cosph0","F","H","L","sinph0","J","gamma0","projectionName","lamc","lam1","lam2","phi1","phi2","alpha_c","no_off","no_rot","alp","gam","one_es","E","lam0","pi","singam","cosgam","sinrot","cosrot","rB","ArB","BrA","u_0","v_pole_n","v_pole_s","U","W","u","Qp","Sp","Tp","Vp","Up","sin1","cos1","ts1","sin2","cos2","ms2","ts2","ts0","ns","f0","rh1","theta","s45","s90","fi0","alfa","uq","u0","n0","s0","ro0","ad","gfi","deltav","eps","ro","czech","fi1","ok","e0","e3","e0fn","e1fn","e2fn","e3fn","mlfn","lam","nl","gN","tl","asq","cl","dd","imlfn","nl1","rl1","tl1","dl","dsq","adjust_lat","P00","P01","P02","P10","P11","P20","mode","S_POLE","N_POLE","EQUIT","OBLIQ","qp","qsfnz","mmf","apa","APA","authset","rq","xmf","ymf","sinb1","cosb1","coslam","sinlam","q","sinb","cosb","cCe","sCe","ab","beta","cosz","sinz","sin_po","cos_po","t1","qs1","t2","qs2","t3","qs0","ns0","qs","phi1z","asinz","eccnts","sin_p14","cos_p14","infinity_dist","coslon","iqsfnz","dlat","el","bl","tanphi","mln","mlnp","ma","B_re","B_im","C_re","C_im","delta_lat","d_phi","d_lambda","d_phi_n","d_psi","th_n_im1","th_re","th_im","th_n_re","th_n_im","z_re","z_im","z_n_im1","delta_x","z_n_re","z_n_im","iterations","num_re","num_im","den_re","den_im","den2","d_psi_n","C_y","C_x","delta_theta","ml1","ml2","sinth","costh","gsq","msq","xx","yy","xys","c1","c2","c3","a1","m1","th1","sin_p12","cos_p12","Mlp","Ml","Nl1","Nl","psi","Az","G","GH","Hs","kp","cos_c","s2","s3","s4","cosAz","Ee","sinpsi","FACE_ENUM","AREA_ENUM","qsc_fwd_equat_face_theta","area","qsc_shift_lon_origin","slon","face","one_minus_f","one_minus_f_squared","xy","sinlon","nu","cosmu","tannu","tantheta","invert_sign","xa","lp","COEFS_X","COEFS_Y","FXC","FYC","RC1","NODES","poly3_val","coefs","f_df","max_err","iters","upd","newton_rapshon","poly3_der","azi","degrees","tilt","pn1","rp","pfact","omega","cg","sg","cw","sw","yt","ba","bm","bq","flip_axis","sweep","radius_g_1","radius_g","rone_es","radius_p","radius_p2","radius_p_inv2","shape","v_x","v_y","v_z","det","v_zp","A1","A2","A3","A4","paramLat","paramLatSq","paramLatPow6","EPS10","e_fwd","am1","e_inv","s_fwd","cphi1","s_inv","defaultDatum","Proj","nadgrid","DataView","nFields","detectLittleEndian","header","nSubgridFields","nSubgrids","shiftType","fromSemiMajorAxis","fromSemiMinorAxis","toSemiMajorAxis","toSemiMinorAxis","readHeader","gridOffset","subHeader","lngColumnCount","latColumnCount","count","readSubgrids","version","proj4","sterea","stere","somerc","omerc","lcc","krovak","cass","laea","aea","gnom","cea","eqc","poly","nzmg","mill","sinu","moll","eqdc","vandg","aeqd","ortho","qsc","robin","geocent","tpers","geos","eqearth","bonne","options","code_","units_","extent_","extent","worldExtent_","worldExtent","axisOrientation_","axisOrientation","global_","canWrapX_","getPointResolutionFunc_","getPointResolution","defaultTileGrid_","metersPerUnit_","metersPerUnit","canWrapX","getCode","getExtent","getUnits","getMetersPerUnit","getWorldExtent","getAxisOrientation","isGlobal","setGlobal","getDefaultTileGrid","setDefaultTileGrid","tileGrid","setExtent","setWorldExtent","setGetPointResolution","func","getPointResolutionFunc","RADIUS","HALF_SIZE","EXTENT","WORLD_EXTENT","MAX_SAFE_Y","EPSG3857Projection","super","resolution","PROJECTIONS","fromEPSG4326","dimension","stride","toEPSG4326","EPSG4326Projection","cache","transforms","transformFn","sourceCode","destinationCode","clamp","getWorldsAway","coordinate","projection","sourceExtentWidth","projectionExtent","worldsAway","epsgRegExes","zoneFromCode","epsgId","re","north","projectionFactories","cloneTransform","addProjection","projectionLike","makeProjection","addEquivalentProjections","addProjections","createTransformFromCoordinateTransform","coordTransform","pointLength","addCoordinateTransforms","sourceProj","destProj","createSafeCoordinateTransform","transformed","sourceExtent","projections2","forwardTransform","inverseTransform","projection1","projection2","registered","projCodes","code1","proj1","code2","proj2","_typeof","o","iterator","toPropertyKey","toPrimitive","call","_defineProperties","enumerable","configurable","writable","defineProperty","WorkerLogger","prefix","_classCallCheck","_WorkerLogger_brand","_classPrivateFieldInitSpec","_prefix","_classPrivateFieldSet","_assertClassBrand2","_len","args","_key","_assertClassBrand","_log","_assertClassBrand3","_len2","_key2","_assertClassBrand4","_len3","_key3","_assertClassBrand5","_len4","_key4","_assertClassBrand6","_len5","_key5","_len6","_key6","_classPrivateFieldGet","sourceCRS","targetCRS","logger","transformPoints","points","converted","projectionInfo","logTrace","logError","process","chunk","isFirst","feature","geometry","properties","transformedGeometry","coordinates","coords1","coords2","transformGeometry","JSON","stringify"],"sourceRoot":""}